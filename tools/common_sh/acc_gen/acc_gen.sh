# =====================================================================
#
# Copyright (C) 2021 University of Modena and Reggio Emilia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# =====================================================================
#
# Project:      Richie Toolchain
#
# Name: 		Accelerator generation
#
# Description:  Generate accelerator interfaces compliant with the overlay
#               infrastructure. Furthermore, the procedure derives design
#               parameters to optimize the generated accelerator-rich overlay
#               on the basis of the application needs.
#
# Date:        	23.11.2021
#
# Author: 		Gianluca Bellocchi <gianluca.bellocchi@unimore.it>
#
# =====================================================================

#!/bin/bash

THIS_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
source $THIS_DIR/../common.sh

# ========= #
# Functions #
# ========= #

# =====================================================================
# Title:        init_generation
# Description:  Preliminary operation to let the generation process proceed
#               with all the required information about the input specifications.
# =====================================================================

init_generation()
{
    echo -e ""
    echo "# ========================================= #"
    echo "# Initializating wrapper design environment #"
    echo "# ========================================= #"
    echo -e ""

    make --silent acc_gen_init
}

# =====================================================================
# Title:        read_ov_config
# Description:  This shell function reads the 'acc_config.cfg' file under
#               ${CONFIG_FILE}. This file is generated by the generator
#               Python class of 'richie-toolchain.py' once it reads the overlay
#               configuration specifications. 'acc_config.cfg' is meant
#               to be a setup file to pilot the generation of accelerator
#               wrappers. This procedure is transparent to the user that
#               approaches to the toolchain.
# =====================================================================

read_ov_config()
{
    # Number of accelerators
    n_acc=$(grep N_ACC ${CONFIG_FILE} | sed 's/.*=//' | tr -d '"')

    if [ $n_acc -gt 0 ]; then

        echo -e "[sh] >> Accelerator wrappers will be generated for the following applications:\n"

        # Accelerator targets
        for (( c=0; c<=$n_acc-1; c++ ))
        do
            acc_targets[$c]=$(grep TARGET_ACC_$c ${CONFIG_FILE} | sed 's/.*=//' | tr -d '"')
            echo -e "\t- ${acc_targets[$c]}"
        done

        # Check data correctness
        if [ ${#acc_targets[@]} -eq 0 ]; then
            echo -e "\nOops, something went wrong, no targets have been found... \n"
            exit 1
        else
            q_correctness
        fi

    else

        echo -e "[sh] >> No targets for accelerator wrapper\n"

    fi
}

# =====================================================================
# Title:        fetch_acc_specs
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               fetch the target from the accelerator library and mirror
#               it in a runtime device environment. The latter is meant
#               to hold a high-level description of the output acc-rich
#               overlay system together with the acceleration kernel
#               targets. Mirroring also permits avoiding breaking the
#               accelerator and overlay libraries.
# =====================================================================

fetch_acc_specs()
{
    echo -e ""
    echo "# ==================================== #"
    echo "# Retrieving wrapper design parameters #"
    echo "# ==================================== #"
    echo -e ""

    # Cleaning generated accelerators
    cd $dir_root
    make --silent acc_gen_clean

    # Fetch accelerator specifications
    cd $dir_acc_src
    for (( c=0; c<=$n_acc-1; c++ ))
    do
        echo "[sh] >> Retrieving wrapper target #$c -> ${acc_targets[$c]}"
        make --silent clean all ACC_DEV_DIR=$dir_acc_dev TARGET_ACC=${acc_targets[$c]} ACC_HW_DESIGN=$dir_overlay_acc_hw
    done
}

# =====================================================================
# Title:        check_acc_out
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               check whether current target has already undertaken the
#               generation process (thus having generated HW/SW components
#               in the output environment), or not. This check is to avoid
#               generating multiple times the same target.
# =====================================================================

check_acc_out()
{
    echo "[sh] >> Checking previous target generation "
    if [ -d ${dir_acc_out}/${acc_targets[$c]} ]; then
        echo "[sh] >> Generated item already exists"
        is_gen="true"
    else
        echo "[sh] >> Found no previously generated item"
        is_gen="false"
    fi
}

# =====================================================================
# Title:        gen_acc_configs
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               generate HW/SW components of target accelerator and its
#               output environment.
# =====================================================================

gen_acc_configs()
{
    # Generate targets
    cd $dir_root
    for (( c=0; c<=$n_acc-1; c++ ))
    do
        # Check if target has already been generated
        check_acc_out

        if [ "$is_gen" == "false" ]; then
            # Generate target accelerator wrapper
            make --silent acc_gen_kernel_list TARGET_ACC=${acc_targets[$c]}
            make --silent acc_gen_out_env TARGET_ACC=${acc_targets[$c]}
            make --silent acc_gen_run TARGET_ACC=${acc_targets[$c]}
        fi
    done
}

# ======= #
# Program #
# ======= #

# Read Makefile arguments
readonly dir_root=$1
readonly dir_devs=$2
readonly dir_py_venv=$3
readonly dir_acc_src=$4
readonly dir_acc_out=$5
readonly dir_overlay_acc_hw=$6

readonly dir_ov_dev=$dir_devs/ov_dev
readonly dir_acc_dev=$dir_devs/acc_dev

# Activate environment
source $dir_py_venv/bin/activate

# Read user-defined configuration file
CONFIG_FILE=$dir_ov_dev/acc_config.cfg

# ======================================= #
# Generate accelerator-rich configuration #
# ======================================= #

# Initialize generation
init_generation

if [ -f ${CONFIG_FILE} ]; then
    # Fetch overlay configuration
    read_ov_config

    if [ $n_acc -gt 0 ]; then

        # Fetch accelerator specifications
        fetch_acc_specs

        # Generate accelerator wrappers
        gen_acc_configs

    fi

else
    echo "[sh] >> No accelerator configuration found in $dir_ov_dev"
fi

# Deactivate environment
deactivate
