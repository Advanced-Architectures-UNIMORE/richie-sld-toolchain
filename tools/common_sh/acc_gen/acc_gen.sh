# =====================================================================
# Project:      Scripts - Generation environment
# Title:        acc_gen.sh
# Description:  Generate accelerator wrappers compliant with the overlay 
#               infrastructure. Furthermore, the procedure derives design 
#               parameters to optimize the generated accelerator-rich overlay 
#               on the basis of the application needs.
#
# $Date:        3.12.2021
#
# =====================================================================
#
# Copyright (C) 2021 University of Modena and Reggio Emilia.
#
# Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
#
# =====================================================================

#!/bin/bash

THIS_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
source $THIS_DIR/../common.sh

# ========= #
# Functions #
# ========= #

# =====================================================================
# Title:        init_generation
# Description:  Preliminary operation to let the generation process proceed
#               with all the required information about the input specifications.
# =====================================================================

init_generation()
{
    echo -e ""
    echo "# ======================================== #"
    echo "# Initialization of accelerator generation #"
    echo "# ======================================== #"
    echo -e ""

    make --silent acc_gen_init
}

# =====================================================================
# Title:        read_ov_config
# Description:  This shell function reads the 'acc_config.cfg' file under
#               ${CONFIG_FILE}. This file is generated by the generator 
#               Python class of 'genov.py' once it reads the overlay
#               configuration specifications. 'acc_config.cfg' is meant 
#               to be a setup file to pilot the generation of accelerator 
#               wrappers. This procedure is transparent to the user that
#               approaches to the toolchain.
# =====================================================================

read_ov_config()
{
    echo -e ""
    echo "# ============================= #"
    echo "# Reading overlay configuration #"
    echo "# ============================= #"
    echo -e ""

    echo -e "[sh] >> User-defined, system-level specification concerning target accelerator kernels:\n"

    # Number of accelerators
    n_acc=$(grep N_ACC ${CONFIG_FILE} | sed 's/.*=//' | tr -d '"')
    echo -e "\t- Number of accelerators -> $n_acc"

    # Accelerator targets
    for (( c=0; c<=$n_acc-1; c++ ))
    do  
        acc_targets[$c]=$(grep TARGET_ACC_$c ${CONFIG_FILE} | sed 's/.*=//' | tr -d '"')
        echo -e "\t- Accelerator target #$c -> ${acc_targets[$c]}"
    done

    # Check data correctness
    if [ ${#acc_targets[@]} -eq 0 ]; then
        echo -e "\nOops, something went wrong, no targets have been found... \n"
        exit 1
    else
        q_correctness
    fi
}

# =====================================================================
# Title:        fetch_acc_specs
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               fetch the target from the accelerator library and mirror
#               it in a runtime device environment. The latter is meant 
#               to hold a high-level description of the output acc-rich 
#               overlay system together with the acceleration kernel 
#               targets. Mirroring also permits avoiding breaking the 
#               accelerator and overlay libraries.
# =====================================================================

fetch_acc_specs()
{
    echo -e ""
    echo "# ========================================= #"
    echo "# Fetching accelerator input specifications #" 
    echo "# ========================================= #"
    echo -e ""

    # Cleaning generated accelerators
    cd $dir_root
    make --silent acc_gen_clean

    # Fetch accelerator specifications
    cd $dir_acc_src
    for (( c=0; c<=$n_acc-1; c++ ))
    do  
        echo "[sh] >> Fetching accelerator target #$c -> ${acc_targets[$c]}"
        make --silent clean all ACC_DEV_DIR=$dir_acc_dev TARGET_ACC=${acc_targets[$c]}
    done

    # # Make accelerator specifications accessible by Python import system
    # touch $dir_acc_dev/__init__.py
}

# =====================================================================
# Title:        optimize_ov_specs
# Description:  This shell function invokes the 'ov_gen.mk' and the
#               recipe 'ov_gen_opt' to optimize the overlay specifications
#               with application-specific kernel informations.
# =====================================================================

optimize_ov_specs()
{
    echo -e ""
    echo "# ================================ #"
    echo "# Optimizing overlay specification #"
    echo "# ================================ #"
    echo -e ""

    cd $dir_root

    if [ -f $dir_root/genov/state_optimizer.obj ]; then
        rm $dir_root/genov/state_optimizer.obj
    fi

    for (( c=0; c<=$n_acc-1; c++ ))
    do  
        echo "[sh] >> Optimizing overlay specification with infomation about target #$c -> ${acc_targets[$c]}"
        make --silent ov_gen_opt TARGET_ACC=${acc_targets[$c]} OFFSET_ACC=$c N_ACC=$n_acc
    done
}

# =====================================================================
# Title:        check_acc_out
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               check whether current target has already undertaken the 
#               generation process (thus having generated HW/SW components 
#               in the output environment), or not. This check is to avoid 
#               generating multiple times the same target.
# =====================================================================

check_acc_out()
{
    echo "[sh] >> Checking previous target generation "
    if [ -d ${dir_acc_out}/${acc_targets[$c]} ]; then
        echo "[sh] >> Generated item already exists"
        is_gen="true"
    else
        echo "[sh] >> Found no previously generated item"
        is_gen="false"
    fi
}

# =====================================================================
# Title:        gen_acc_configs
# Description:  This shell function invokes the 'acc_gen.mk' recipes to
#               generate HW/SW components of target accelerator and its
#               output environment.
# =====================================================================

gen_acc_configs()
{
    # Generate targets
    cd $dir_root
    for (( c=0; c<=$n_acc-1; c++ ))
    do  
        echo -e ""
        echo "# =========================================== #"
        echo "# Generating target #$c -> ${acc_targets[$c]} #"
        echo "# =========================================== #"
        echo -e ""

        # Check if target has already been generated
        check_acc_out

        if [ "$is_gen" == "false" ]; then
            # Generate target accelerator wrapper
            make --silent acc_gen_get_engine TARGET_ACC=${acc_targets[$c]}
            make --silent acc_gen_out_env TARGET_ACC=${acc_targets[$c]}
            make --silent acc_gen_run TARGET_ACC=${acc_targets[$c]}
        fi
    done
}

# ======= #
# Program #
# ======= #

# Read Makefile arguments
readonly dir_root=$1
readonly dir_devs=$2
readonly dir_py_venv=$3
readonly dir_acc_src=$4
readonly dir_acc_out=$5

readonly dir_ov_dev=$dir_devs/ov_dev
readonly dir_acc_dev=$dir_devs/acc_dev

# Activate environment
source $dir_py_venv/bin/activate

# Read user-defined configuration file
CONFIG_FILE=$dir_ov_dev/acc_config.cfg

# ======================================= #
# Generate accelerator-rich configuration #
# ======================================= #

# Initialize generation
init_generation

if [ -f ${CONFIG_FILE} ]; then
    # Fetch overlay configuration
    read_ov_config

    # Fetch accelerator specifications
    fetch_acc_specs

    # Optimize overlay specification
    optimize_ov_specs

    # Generate accelerator wrappers
    gen_acc_configs
else
    echo "No accelerator configuration found in $dir_ov_dev"
fi

# Deactivate environment
deactivate