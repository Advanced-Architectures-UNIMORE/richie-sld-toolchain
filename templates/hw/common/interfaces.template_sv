<%
#############
## Generic ##
#############
%>

<%def name="port(name, data_type, width, output, active_low=False)">\
  <%
    if output:
      direction = 'output'
      suffix = 'o'
    else:
      direction = 'input '
      suffix = 'i'
    if width == 1:
      typ = '        '
    else:
      typ = "[%3d:0] " % (width - 1)
    if active_low:
      suffix = 'n' + suffix
    name = name + '_' + suffix
  %>
  % if (width > 0):
  ${direction} ${data_type} ${typ} ${name}\
  % endif
</%def>\

<%
###############
## AXI ports ##
###############
%>

<%def name="axi_w_ports(prefix, master, dw)">\
  ${port(prefix + '_data', dw, master)},\
  ${port(prefix + '_strb', dw/8, master)},\
  ${port(prefix + '_last', 1, master)},\
  ${port(prefix + '_valid', 1, master)},\
  ${port(prefix + '_ready', 1, not master)}\
</%def>\

<%def name="axi_b_ports(prefix, master, iw)">\
  ${port(prefix + '_id', iw, not master)},\
  ${port(prefix + '_resp', 2, not master)},\
  ${port(prefix + '_valid', 1, not master)},\
  ${port(prefix + '_ready', 1, master)}\
</%def>\

<%def name="axi_r_ports(prefix, master, dw, iw)">\
  ${port(prefix + '_id', iw, not master)},\
  ${port(prefix + '_data', dw, not master)},\
  ${port(prefix + '_resp', 2, not master)},\
  ${port(prefix + '_last', 1, not master)},\
  ${port(prefix + '_valid', 1, not master)},\
  ${port(prefix + '_ready', 1, master)}\
</%def>\

<%def name="axi_ports(prefix, master, aw, dw, iw, uw)">\
  ${axi_ax_ports(prefix + '_aw', master, aw, iw, uw)},\
  ${axi_w_ports(prefix + '_w', master, dw)},\
  ${axi_b_ports(prefix + '_b', master, iw)},\
  ${axi_ax_ports(prefix + '_ar', master, aw, iw, uw)},\
  ${axi_r_ports(prefix + '_r', master, dw, iw)}\
</%def>\

<%def name="axi_lite_ax_ports(prefix, master, aw)">\
  ${port(prefix + '_addr', aw, master)},\
  ${port(prefix + '_prot', 3, master)},\
  ${port(prefix + '_valid', 1, master)},\
  ${port(prefix + '_ready', 1, not master)}\
</%def>\

<%def name="axi_lite_w_ports(prefix, master, dw)">\
  ${port(prefix + '_data', dw, master)},\
  ${port(prefix + '_strb', dw/8, master)},\
  ${port(prefix + '_valid', 1, master)},\
  ${port(prefix + '_ready', 1, not master)}\
</%def>\

<%def name="axi_lite_b_ports(prefix, master)">\
  ${port(prefix + '_resp', 2, not master)},\
  ${port(prefix + '_valid', 1, not master)},\
  ${port(prefix + '_ready', 1, master)}\
</%def>\

<%def name="axi_lite_r_ports(prefix, master, dw)">\
  ${port(prefix + '_data', dw, not master)},\
  ${port(prefix + '_resp', 2, not master)},\
  ${port(prefix + '_valid', 1, not master)},\
  ${port(prefix + '_ready', 1, master)}\
</%def>\

<%def name="axi_lite_ports(prefix, master, aw, dw)">\
  ${axi_lite_ax_ports(prefix + '_aw', master, aw)},\
  ${axi_lite_w_ports(prefix + '_w', master, dw)},\
  ${axi_lite_b_ports(prefix + '_b', master)},\
  ${axi_lite_ax_ports(prefix + '_ar', master, aw)},\
  ${axi_lite_r_ports(prefix + '_r', master, dw)}\
</%def>\

<%def name="axi_stream_inst_in(prefix, index, n_ports)">\
.${prefix}_TDATA  ( i_${stream_in[index]}.data  ), \
.${prefix}_TVALID ( i_${stream_in[index]}.valid ), \
.${prefix}_TREADY ( i_${stream_in[index]}.ready ), \
</%def>\

<%def name="axi_stream_inst_out(prefix, index, n_ports)">\
.${prefix}_TDATA  ( o_${stream_out[index]}.data  ), \
.${prefix}_TVALID ( o_${stream_out[index]}.valid ), \
.${prefix}_TREADY ( o_${stream_out[index]}.ready ), \
</%def>\

<%
#########################
## Streamer interfaces ##
#########################
%>

<%def name="stream_intf_stream_decl_1(name, data_width, clk_name)">\
hwpe_stream_intf_stream #( .DATA_WIDTH(${data_width}) ) ${name} ( .clk (${clk_name}) );
</%def>\

// <%def name="stream_intf_stream_decl_2(name, data_width, stream_dir)">\
// hwpe_stream_intf_stream.${stream_dir} ${name},
// </%def>\

<%def name="stream_instance(name, io_dir, stream_dir)">\
.${name}_${io_dir}              ( ${name}.${stream_dir}       ), \
</%def>\

<%
#####################
## TCDM interfaces ##
#####################
%>

<%def name="stream_intf_tcdm_decl(prefix , name, data_width, clk_name)">\
hwpe_stream_intf_tcdm ${prefix}_${name} [${data_width}:0] ( .clk (${clk_name}) );
</%def>\

<%
#############################
## Job-dependent registers ##
#############################
%>

<%def name="static_reg_decl(type, prefix, name, dim, index)">\
% if len(prefix)>0:
% if len(type)>0:
${type} [(${dim}-1):0] ${prefix}_${name}; \
% else:
${type} [(${dim}-1):0] ${prefix}_${name}_${index}; \
% endif
% else:
% if len(type)>0:
${type} [(${dim}-1):0] ${name}; \
% else:
${type} [(${dim}-1):0] ${name}_${index}; \
% endif
% endif
</%def>\

<%def name="static_reg_assign(name)">\
<% NAME = name.upper() %>
assign static_reg_${name} = reg_file.hwpe_params[${target}_REG_${NAME}]; \
</%def>\

<%def name="static_reg_to_fsm(name)">\
fsm_ctrl.${name}    = static_reg_${name}; \
</%def>\

<%def name="static_reg_to_engine_intf(name, isport)">\
  % if isport:
.${name}        ( ctrl_i.${name}      ),
  % endif
</%def>\

<%def name="static_reg_to_kernel_module(name, isport, dim)">\
  % if isport:
input logic [${dim-1}:0] ${name},
  % endif
</%def>\

<%def name="static_reg_to_kernel_hls_intf(name, isport, dim, reg_num, reg_offset)">\
% if (reg_offset < reg_num):
  % if isport:
.${name}   ( ${name} ),
  % endif
% else:
  % if isport:
.${name}   ( ${name} )
  % endif
% endif
</%def>\

<%def name="fsm_t_size(trans_size_reg, streampath, current_stream)">\
  % if current_stream == streampath:
${trans_size_reg};
  % else:
len;
  % endif
</%def>\
