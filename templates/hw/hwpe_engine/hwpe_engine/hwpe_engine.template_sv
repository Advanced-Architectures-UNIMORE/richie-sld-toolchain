/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Authors:     Francesco Conti <fconti@iis.ee.ethz.ch>
 * Contribute:  ${author} ${email}
 *
 * Module: ${target}_engine.sv
 * 
 */

import ${target}_package::*;

module ${target}_engine (\

  // Global signals
  ${port('clk', 'logic', 1, False)},\
  ${port('rst', 'logic', 1, False, True)},
  ${port('test_mode', 'logic', 1, False)},

  // Sink ports
  % for i in range (n_sink):
  hwpe_stream_intf_stream.sink    ${chr(i+97)}_i,
  % endfor 

  // Source ports
  % for j in range (n_source):
  hwpe_stream_intf_stream.source  ${chr(j+i+98)}_o,
  % endfor 

  // Control channel
  input  ctrl_engine_t            ctrl_i,
  output flags_engine_t           flags_o
);

  // ${target} control
  logic clear;
  logic done, idle, ready;

  assign clear = ctrl_i.clear;
  assign flags_o.done = done;
  assign flags_o.idle = idle;

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_ready
    if(~rst_ni)
      flags_o.ready = 1'b0;
    else if(~(ready | idle))
      flags_o.ready = 1'b0;
    else
      flags_o.ready = 1'b1;
  end

  assign flags_o.cnt = cnt_out;

  // Kernel wrapper
  kernel_wrapper i_k_wrap (

    // Global signals
    .clk             ( clk_i            ), 
    .rst_n           ( rst_ni           ), 

    // Input data (to-hwpe)
    % for i in range (n_sink):
    ${axi_stream_inst_in(stream_in[i], i, (n_sink + n_source))}
    % endfor 

    // Output data (from-hwpe)
    % for j in range (n_source):
    ${axi_stream_inst_out(stream_out[j], j+i+1, (n_sink + n_source))}
    % endfor 

    // Algorithm parameters
    % for i in range (custom_reg_num):
    ${static_reg_to_engine_intf(custom_reg_name[i], custom_reg_isport[i])}
    % endfor 

    // Control signals
    .start           ( ctrl_i.start     ),
    .done            ( done             ), 
    .idle            ( idle             ), 
    .ready           ( ready            ),
    .cnt_out         ( cnt_out          )

  );

  // At the moment output strobe is always '1
  // All bytes of output streams are written
  // to TCDM
  always_comb
  begin
    % for i in range (n_sink, n_sink + n_source):
    ${chr(i+97)}_o.strb = '1;
    % endfor
  end

endmodule\

