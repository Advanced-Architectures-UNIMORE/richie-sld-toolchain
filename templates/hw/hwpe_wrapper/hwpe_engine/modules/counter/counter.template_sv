<%
#####################################
## Library of components - Counter ##
#####################################
%>

<%
###################################
## Counter - Signals declaration ##
###################################
%>

<%def name="counter_out_declaration()">\

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  logic unsigned [($clog2(${TARGET}_CNT_LEN)+1):0] cnt_${stream_out[j]}_{k};
      % endfor
    % else:
  logic unsigned [($clog2(${TARGET}_CNT_LEN)+1):0] cnt_${stream_out[j]};
    % endif
  % endfor

</%def>\

<%
#################################
## Counter - FF implementation ##
#################################
%>

<%def name="counter_out_ff_impl()">\

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  always_ff @(posedge clk_i or negedge rst_ni)
  begin: cnt_${stream_out[j]}_{k}_counter
    if((~rst_ni) | clear)
      cnt_${stream_out[j]}_{k} = 32'b0;
    else if( (${stream_out[j]}_{k}.valid) & (${stream_out[j]}_{k}.ready) & (done) )
      cnt_${stream_out[j]}_{k} = cnt_${stream_out[j]}_{k} + 1;
    else
      cnt_${stream_out[j]}_{k} = cnt_${stream_out[j]}_{k};
  end
      % endfor
    % else:
  always_ff @(posedge clk_i or negedge rst_ni)
  begin: cnt_${stream_out[j]}_counter
    if((~rst_ni) | clear)
      cnt_${stream_out[j]} = 32'b0;
    else if( (${stream_out[j]}.valid) & (${stream_out[j]}.ready) & (done) )
      cnt_${stream_out[j]} = cnt_${stream_out[j]} + 1;
    else
      cnt_${stream_out[j]} = cnt_${stream_out[j]};
  end
    % endif
  % endfor 

</%def>\

<%
#################################
## Counter - FF implementation ##
#################################
%>

<%def name="counter_out_assign_to_fsm()">\

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  assign flags_o.cnt_${stream_out[j]}_${k} = cnt_${stream_out[j]}_{k};
      % endfor
    % else:
  assign flags_o.cnt_${stream_out[j]} = cnt_${stream_out[j]};
    % endif
  % endfor

</%def>\