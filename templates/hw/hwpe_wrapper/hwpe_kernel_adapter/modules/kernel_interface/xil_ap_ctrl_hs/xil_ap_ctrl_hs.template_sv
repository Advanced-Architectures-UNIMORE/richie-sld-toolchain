<%
###########################################################
## Kernel interface - Xilinx ap_ctrl_hs (refer to UG902) ##
###########################################################
%>

<%
########################################
## Kernel interface - Kernel controls ##
########################################
%>

<%def name="xil_ap_ctrl_hs_kernel_ctrl()">\

  /* ${target} control signals. */

  logic kernel_start;

  // START is not always high. For each READY (~(engine_ready | engine_idle)) that is
  // delivered to the FSM, a new START signal is set high and iaaued to the kernel.

  assign kernel_start = start;

</%def>\

<%
#####################################
## Kernel interface - Kernel flags ##
#####################################
%>

<%def name="xil_ap_ctrl_hs_kernel_flags()">\

  /* ${target} flag signals. */

  logic kernel_done, kernel_idle, kernel_ready;

  assign done = kernel_done;
  assign idle = kernel_idle;

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_ready
    if(~rst_ni)
      ready = 1'b0;
    else if(~(kernel_ready | kernel_idle))
      ready = 1'b0;
    else
      ready = 1'b1;
  end

</%def>\

<%
###########################################################
## Kernel interface - Xilinx ap_ctrl_hs kernel interface ##
###########################################################
%>

<%def name="xil_ap_ctrl_hs_kernel_intf()">\

  /* ${target} kernel interface. */

  ${target} i_${target} (
    // Global signals.
    .ap_clk       ( clk_i            ),
    .ap_rst_n     ( rst_ni           ),

    // Sink ports
    % for i in range (n_sink):
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    .${stream_in[i]}_${k}_TDATA  ( ${stream_in[i]}_${k}_i.data  ),
    .${stream_in[i]}_${k}_TVALID ( ${stream_in[i]}_${k}_i.valid ),
    .${stream_in[i]}_${k}_TREADY ( ${stream_in[i]}_${k}_i.ready ),
        % endfor
      % else:
    .${stream_in[i]}_TDATA  ( ${stream_in[i]}_i.data  ),
    .${stream_in[i]}_TVALID ( ${stream_in[i]}_i.valid ),
    .${stream_in[i]}_TREADY ( ${stream_in[i]}_i.ready ),
      % endif
    % endfor  

    // Source ports
    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    .${stream_out[j]}_${k}_TDATA  ( ${stream_out[j]}_${k}_o.data  ),
    .${stream_out[j]}_${k}_TVALID ( ${stream_out[j]}_${k}_o.valid ),
    .${stream_out[j]}_${k}_TREADY ( ${stream_out[j]}_${k}_o.ready ),
        % endfor
      % else:
    .${stream_out[j]}_TDATA  ( ${stream_out[j]}_o.data  ),
    .${stream_out[j]}_TVALID ( ${stream_out[j]}_o.valid ),
    .${stream_out[j]}_TREADY ( ${stream_out[j]}_o.ready ),
      % endif
    % endfor

    % if custom_reg_num>0:
    // Kernel parameters
      % for i in range (custom_reg_num):
        % if custom_reg_isport[i]:
    .${custom_reg_name[i]}        ( ${custom_reg_name[i]} ),
        % endif
      % endfor
    % endif 

    // Control signals.
    .ap_start      ( kernel_start            ),
    .ap_done       ( kernel_done             ),
    .ap_idle       ( kernel_idle             ),
    .ap_ready      ( kernel_ready            )
  );

</%def>\

<%
################################################
## Kernel interface - Generate stream strobes ##
################################################
%>

<%def name="xil_ap_ctrl_hs_stream_strobes()">\

  // At the moment output strobe is always '1
  // All bytes of output streams are written
  // to TCDM
  always_comb
  begin
    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    ${stream_out[j]}_${k}_o.strb = '1;
        % endfor
      % else:
    ${stream_out[j]}_o.strb = '1;
      % endif
    % endfor 
  end

</%def>\

