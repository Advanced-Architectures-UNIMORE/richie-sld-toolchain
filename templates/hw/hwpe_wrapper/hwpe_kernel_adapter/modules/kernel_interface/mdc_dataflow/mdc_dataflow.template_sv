<%
######################################
## Kernel interface - MDC dataflow  ##
######################################
%>

<%
########################################
## Kernel interface - Kernel controls ##
########################################
%>

<%def name="mdc_dataflow_kernel_ctrl()">\

  /* ${target} control signals. */

  logic kernel_start;

  // START is not always high. For each READY (~(engine_ready | engine_idle)) that is
  // delivered to the FSM, a new START signal is set high and iaaued to the kernel.

  assign kernel_start = start;

</%def>\

<%
#####################################
## Kernel interface - Kernel flags ##
#####################################
%>

<%def name="mdc_dataflow_kernel_flags()">\

  /* ${target} flag signals. */

  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):

  logic kernel_ready_${stream_in[i]}_${k};
  logic kernel_done_${stream_in[i]}_${k}; //FIXEME: to be removed

      % endfor
    % else:

  logic kernel_ready_${stream_in[i]};
  logic kernel_done_${stream_in[i]}; //FIXEME: to be removed

    % endif
  % endfor

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):

  logic kernel_done_${stream_out[j]}_${k};

      % endfor
    % else:

  logic kernel_done_${stream_out[j]};

    % endif
  % endfor

  logic kernel_idle;
  // logic kernel_ready;

  /* Done. */
  // A done is generated for each output. These are counted and 
  // delivered to the FSM that decides when to update the address
  // on the basis of the state of the line processing (see HWPE-docs).

  // FIXME: This temporarily works synch-outputs.
  // EX: What if Out_0 is provided at each input and Out_1 once per 10 inputs?
  assign done = ${AND_kernel_done_out()};

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_done_${stream_out[j]}_${k}
    if(~rst_ni)
      kernel_done_${stream_out[j]}_${k} = 1'b0;
    else if((o_${stream_out[j]}_${k}.valid)&(o_${stream_out[j]}_${k}.ready))
      kernel_done_${stream_out[j]}_${k} = 1'b1;
    else
      kernel_done_${stream_out[j]}_${k} = 1'b0;
  end

      % endfor
    % else:

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_done_${stream_out[j]}
    if(~rst_ni)
      kernel_done_${stream_out[j]} = 1'b0;
    else if((o_${stream_out[j]}.valid)&(o_${stream_out[j]}.ready))
      kernel_done_${stream_out[j]} = 1'b1;
    else
      kernel_done_${stream_out[j]} = 1'b0;
  end

    % endif
  % endfor

  /* Ready. */
  /* This is used in the hwpe-engine to set flags_o.ready. 
     The latter triggers the START of accelerator. (see FSM_COMPUTE). */
  /* Driven using input counters. */

  assign ready = ${AND_kernel_done_in()};

  /* Idle. */
  /* This is used in the hwpe-engine to set flags_o.ready. 
     The latter triggers the START of accelerator. (see FSM_COMPUTE). */
  /* For more infos refer to UG902. */

  assign idle = kernel_idle;

  /* The Idle signal indicates when the design is idle and not operating. */
  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_idle
		if(~rst_ni) begin
      kernel_idle = 1'b0;
    end 
    else if(kernel_start) begin
      /* Idle goes Low immediately after Start to indicate the design is no longer idle. */
      /* If the Start signal is High when Ready is High, the design continues to operate,
          and the Idle signal remains Low. */
			kernel_idle = 1'b0;
    end 
    else if((!kernel_start) & (ready)) begin 
      if( ${AND_kernel_done_out()} ) begin
        /* If the Start signal is Low when Ready is High, the design stops operation, and
            the ap_idle signal goes High one cycle after ap_done.*/
        kernel_idle = 1'b1;
      end
    end 
    else begin
			kernel_idle = kernel_idle;
    end
  end

</%def>\

<%
#######################################
## Kernel interface - Input counters ##
#######################################
%>

<%def name="mdc_dataflow_counter_in()">\

  /* ${target} input counters. Ready. */

  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):

  logic unsigned [($clog2(${target}_CNT_LEN)+1):0] kernel_cnt_${stream_in[i]}_${k};

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: engine_cnt_${stream_in[i]}_${k}
    if((~rst_ni) | start) begin
      kernel_cnt_${stream_in[i]}_${k} = 32'b0;
    end
    else if(kernel_start) begin
      kernel_cnt_${stream_in[i]}_${k} = 32'b0;
    end
    else if ((i_${stream_in[i]}_${k}.valid) & (i_${stream_in[i]}_${k}.ready)) begin
      kernel_cnt_${stream_in[i]}_${k} = kernel_cnt_${stream_in[i]}_${k} + 1;
    end
    else begin
      kernel_cnt_${stream_in[i]}_${k} = kernel_cnt_${stream_in[i]}_${k};
    end
  end

  // FIXME: Now kernel_done_in goes High every time an input enters the acc.
  // This should be generalized. Even though the wrapper looper is designed to 
  // on counting the ouputs, the number of inputs needed to generate an ouput
  // are usually > 1.
  // SOL: Add to ctrl_i also the information about max_input.
  assign kernel_done_${stream_in[i]}_${k} = (kernel_cnt_${stream_in[i]}_${k}==1) ? 1 : 0;

      % endfor
    % else:

  logic unsigned [($clog2(${target}_CNT_LEN)+1):0] kernel_cnt_${stream_in[i]};

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: engine_cnt_${stream_in[i]}
    if((~rst_ni) | start) begin
      kernel_cnt_${stream_in[i]} = 32'b0;
    end
    else if(kernel_start) begin
      kernel_cnt_${stream_in[i]} = 32'b0;
    end
    else if ((i_${stream_in[i]}.valid) & (i_${stream_in[i]}.ready)) begin
      kernel_cnt_${stream_in[i]} = kernel_cnt_${stream_in[i]} + 1;
    end
    else begin
      kernel_cnt_${stream_in[i]} = kernel_cnt_${stream_in[i]};
    end
  end

  // FIXME: Now kernel_done_in goes High every time an input enters the acc.
  // This should be generalized. Even though the wrapper looper is designed to 
  // on counting the ouputs, the number of inputs needed to generate an ouput
  // are usually > 1.
  // SOL: Add to ctrl_i also the information about max_input.
  assign kernel_done_${stream_in[i]} = (kernel_cnt_${stream_in[i]}==1) ? 1 : 0;

    % endif
  % endfor 

</%def>\

<%
########################################
## Kernel interface - Output counters ##
########################################
%>

<%def name="mdc_dataflow_counter_out()">\
  /* ${target} output counters. */

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):

  logic unsigned [($clog2(${target}_CNT_LEN)+1):0] kernel_cnt_${stream_out[j]}_${k};

  // Suggested design:
  //      ap_done = done_out0 & ... & done_outM;
  //      done_outM = cnt_out,i == ctrl_i.max_out,i; (for i=1,..,N)
  // However, loop ctrl is already implemented in micro-code looper that sits
  // in the hwpe-ctrl. Thus, the done information provided by this stage should 
  // concern a single output element, not a tile (block,..).
  // FIXME: At this point, cnt_out is not essential here and could be removed.

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: engine_cnt_${stream_out[j]}_${k}
    if((~rst_ni) | start)
      kernel_cnt_${stream_out[j]}_${k} = 32'b0;
    else if(!kernel_idle) begin
      if((${stream_out[j]}_${k}_o.valid)&(${stream_out[j]}_${k}_o.ready))
        kernel_cnt_${stream_out[j]}_${k} = kernel_cnt_${stream_out[j]}_${k} + 1;
      else
        kernel_cnt_${stream_out[j]}_${k} = kernel_cnt_${stream_out[j]}_${k};
    end
  end

  assign cnt_${stream_out[j]}_${k} = kernel_cnt_${stream_out[j]}_${k};

      % endfor
    % else:

  logic unsigned [($clog2(${target}_CNT_LEN)+1):0] kernel_cnt_${stream_out[j]};

  // Suggested design:
  //      ap_done = done_out0 & ... & done_outM;
  //      done_outM = cnt_out,i == ctrl_i.max_out,i; (for i=1,..,N)
  // However, loop ctrl is already implemented in micro-code looper that sits
  // in the hwpe-ctrl. Thus, the done information provided by this stage should 
  // concern a single output element, not a tile (block,..).
  // FIXME: At this point, cnt_out is not essential here and could be removed.

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: engine_cnt_${stream_out[j]}
    if((~rst_ni) | start)
      kernel_cnt_${stream_out[j]} = 32'b0;
    else if(!kernel_idle) begin
      if((${stream_out[j]}_o.valid)&(${stream_out[j]}_o.ready))
        kernel_cnt_${stream_out[j]} = kernel_cnt_${stream_out[j]} + 1;
      else
        kernel_cnt_${stream_out[j]} = kernel_cnt_${stream_out[j]};
    end
  end

  assign cnt_${stream_out[j]} = kernel_cnt_${stream_out[j]};

    % endif
  % endfor

</%def>\

<%
######################################################
## Kernel interface - MDC dataflow kernel interface ##
######################################################
%>

<%def name="mdc_dataflow_kernel_intf()">\

  /* ${target} kernel interface. */

  ${target} i_${target} (
    // Global signals.
    .ap_clk             ( clk_i            ), 
    .ap_rst_n           ( rst_ni           ), 

    % if custom_reg_num>0:
    // Kernel parameters
      % for i in range (custom_reg_num):
        % if custom_reg_isport[i]:
    .${custom_reg_name[i]}        ( ${custom_reg_name[i]} ),
        % endif
      % endfor
    % endif 

    // Sink ports
    % for i in range (n_sink):
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    .${stream_in[i]}_${k}_TDATA  ( i_${stream_in[i]}_${k}.data  ),
    .${stream_in[i]}_${k}_TVALID ( i_${stream_in[i]}_${k}.valid ),
    .${stream_in[i]}_${k}_TREADY ( i_${stream_in[i]}_${k}.ready ),
        % endfor
      % else:
    .${stream_in[i]}_TDATA  ( i_${stream_in[i]}.data  ),
    .${stream_in[i]}_TVALID ( i_${stream_in[i]}.valid ),
    .${stream_in[i]}_TREADY ( i_${stream_in[i]}.ready ),
      % endif
    % endfor  

    // Source ports
    % for j in range (n_source-1):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    .${stream_out[j]}_${k}_TDATA  ( i_${stream_out[j]}_${k}.data  ),
    .${stream_out[j]}_${k}_TVALID ( i_${stream_out[j]}_${k}.valid ),
    .${stream_out[j]}_${k}_TREADY ( i_${stream_out[j]}_${k}.ready ),
        % endfor
      % else:
    .${stream_out[j]}_TDATA  ( i_${stream_out[j]}.data  ),
    .${stream_out[j]}_TVALID ( i_${stream_out[j]}.valid ),
    .${stream_out[j]}_TREADY ( i_${stream_out[j]}.ready ),
      % endif
    % endfor

    % if (is_parallel_out[n_source-1]):
      % for k in range (out_parallelism_factor[n_source-1]-1):
    .${stream_out[n_source-1]}_${k}_TDATA  ( i_${stream_out[n_source-1]}_${k}.data  ),
    .${stream_out[n_source-1]}_${k}_TVALID ( i_${stream_out[n_source-1]}_${k}.valid ),
    .${stream_out[n_source-1]}_${k}_TREADY ( i_${stream_out[n_source-1]}_${k}.ready ),
      % endfor
    % else:
    .${stream_out[n_source-1]}_TDATA  ( i_${stream_out[n_source-1]}.data  ),
    .${stream_out[n_source-1]}_TVALID ( i_${stream_out[n_source-1]}.valid ),
    .${stream_out[n_source-1]}_TREADY ( i_${stream_out[n_source-1]}.ready )
    % endif

    % if (is_parallel_out[n_source-1]):
    .${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}_TDATA  ( i_${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}.data  ),
    .${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}_TVALID ( i_${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}.valid ),
    .${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}_TREADY ( i_${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1}.ready )
    % endif

  );

</%def>\

<%
################################################
## Kernel interface - Generate stream strobes ##
################################################
%>

<%def name="mdc_dataflow_stream_strobes()">\

  // At the moment output strobe is always '1
  // All bytes of output streams are written
  // to TCDM
  always_comb
  begin
    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    o_${stream_out[j]}_${k}.strb = '1;
        % endfor
      % else:
    o_${stream_out[j]}.strb = '1;
      % endif
    % endfor 
  end

</%def>\

<%
#############################################
## Kernel interface - AND-ing done signals ##
#############################################
%>


<%def name="AND_kernel_done_in()">\
\
% for i in range (n_sink-1):
    % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
kernel_done_${stream_in[i]}_${k} & \
        % endfor
    % else:
kernel_done_${stream_in[i]} & \
    % endif
% endfor
\
% if (is_parallel_in[n_sink-1]):
    % for k in range (in_parallelism_factor[n_sink-1]-1):
kernel_done_${stream_in[n_sink-1]}_${k} & \
    % endfor
kernel_done_${stream_in[n_sink-1]}_${in_parallelism_factor[n_sink-1]-1};\
% else:
kernel_done_${stream_in[n_sink-1]}\
% endif
\
</%def>\

<%def name="AND_kernel_done_out()">\
\
% for j in range (n_source-1):
    % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
kernel_done_${stream_out[j]}_${k} & \
        % endfor
    % else:
kernel_done_${stream_out[j]} & \
    % endif
% endfor
\
% if (is_parallel_out[n_source-1]):
    % for k in range (out_parallelism_factor[n_source-1]-1):
kernel_done_${stream_out[n_source-1]}_${k} & \
    % endfor
kernel_done_${stream_out[n_source-1]}_${out_parallelism_factor[n_source-1]-1};\
% else:
kernel_done_${stream_out[n_source-1]}\
% endif
\
</%def>\

