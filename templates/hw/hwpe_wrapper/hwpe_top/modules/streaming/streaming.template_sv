<%
#######################################
## Library of components - Streaming ##
#######################################
%>

<%
###########################################
## Streaming - Top interface declaration ##
###########################################
%>

<%def name="streaming_top_intf()">\

  // Streamer interfaces
  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]}_${k} ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]} ( .clk (clk_i) );
    % endif
  % endfor 

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_${k} ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]} ( .clk (clk_i) );
    % endif
  % endfor

</%def>\

<%
##################################
## Streaming - Engine interface ##
##################################
%>

<%def name="streaming_engine_intf()">\

    % for i in range (n_sink):
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    .${stream_in[i]}_${k}              ( ${stream_in[i]}_${k}.i       ),
        % endfor
      % else:
    .${stream_in[i]}              ( ${stream_in[i]}.i       ),
      % endif
    % endfor 

    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    .${stream_out[j]}_${k}              ( ${stream_out[j]}_${k}.o       ),
        % endfor
      % else:
    .${stream_out[j]}              ( ${stream_out[j]}.o       ),
      % endif
    % endfor 

</%def>\

<%
####################################
## Streaming - Streamer interface ##
####################################
%>

<%def name="streaming_streamer_intf()">\

    % for i in range (n_sink):
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    .${stream_in[i]}_${k}              ( ${stream_in[i]}_${k}.o       ),
        % endfor
      % else:
    .${stream_in[i]}              ( ${stream_in[i]}.o       ),
      % endif
    % endfor 

    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    .${stream_out[j]}_${k}              ( ${stream_out[j]}_${k}.i       ),
        % endfor
      % else:
    .${stream_out[j]}              ( ${stream_out[j]}.i       ),
      % endif
    % endfor 

</%def>\