/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Authors:     Francesco Conti <fconti@iis.ee.ethz.ch>
 * Contribute:  ${author} ${email}
 *
 * Module: ${target}_top.sv
 * 
 */

import ${target}_package::*;
import hwpe_ctrl_package::*;

(* DONT_TOUCH = "TRUE" *) module ${target}_top
#(
  parameter int unsigned N_CORES = 2,
  parameter int unsigned MP  = ${n_tcdm_ports},
  parameter int unsigned ID  = 10
)
( 
  // Global signals
  ${port('clk', 'logic', 1, False)},\
  ${port('rst', 'logic', 1, False, True)},
  (* dont_touch = "yes" *) input  logic          test_mode_i,

  // Events
  (* dont_touch = "yes" *) output logic [N_CORES-1:0][REGFILE_N_EVT-1:0] evt_o,

  // TCDM master ports
  (* dont_touch = "yes" *) hwpe_stream_intf_tcdm.master                  tcdm[MP-1:0],

  // Peripheral slave port
  (* dont_touch = "yes" *) hwpe_ctrl_intf_periph.slave                   periph
);

  // Signals
  (* dont_touch = "yes" *) logic enable, clear;
  (* dont_touch = "yes" *) logic [N_CORES-1:0][REGFILE_N_EVT-1:0] evt;
  (* dont_touch = "yes" *) ctrl_streamer_t  streamer_ctrl;
  (* dont_touch = "yes" *) flags_streamer_t streamer_flags;
  (* dont_touch = "yes" *) ctrl_engine_t    engine_ctrl;
  (* dont_touch = "yes" *) flags_engine_t   engine_flags;

  // Streamer interfaces
  % for i in range (n_tcdm_ports):
  ${stream_intf_stream_decl_1(chr(i+97), 32, 'clk_i')}
  % endfor 

  // HWPE engine wrapper
  (* DONT_TOUCH = "TRUE" *) ${target}_engine i_engine (
    .clk_i            ( clk_i          ),
    .rst_ni           ( rst_ni         ),
    .test_mode_i      ( test_mode_i    ),
    % for i in range (n_sink):
    ${stream_instance(chr(i+97), 'i', 'sink')}
    % endfor
    % for j in range (n_source):
    ${stream_instance(chr(j+i+98), 'o', 'source')}
    % endfor
    .ctrl_i           ( engine_ctrl    ),
    .flags_o          ( engine_flags   )
  );

  // HWPE streamer wrapper
  (* DONT_TOUCH = "TRUE" *) ${target}_streamer #(
    .MP ( MP )
  ) i_streamer (
    .clk_i            ( clk_i          ),
    .rst_ni           ( rst_ni         ),
    .test_mode_i      ( test_mode_i    ),
    .enable_i         ( enable         ),
    .clear_i          ( clear          ),
    % for i in range (n_sink):
    ${stream_instance(chr(i+97), 'o', 'source')}
    % endfor
    % for j in range (n_source):
    ${stream_instance(chr(j+i+98), 'i', 'sink')}
    % endfor
    .tcdm             ( tcdm           ),
    .ctrl_i           ( streamer_ctrl  ),
    .flags_o          ( streamer_flags )
  );

  // HWPE ctrl wrapper
  (* DONT_TOUCH = "TRUE" *) ${target}_ctrl #(
    .N_CORES   ( 2  ),
    .N_CONTEXT ( 2  ),
    .N_IO_REGS ( 16 ),
    .ID ( ID )
  ) i_ctrl (
    .clk_i            ( clk_i          ),
    .rst_ni           ( rst_ni         ),
    .test_mode_i      ( test_mode_i    ),
    .clear_o          ( clear          ),
    .evt_o            ( evt_o          ),
    .ctrl_streamer_o  ( streamer_ctrl  ),
    .flags_streamer_i ( streamer_flags ),
    .ctrl_engine_o    ( engine_ctrl    ),
    .flags_engine_i   ( engine_flags   ), 
    .periph           ( periph         )
  );

  assign enable = 1'b1;

endmodule\

