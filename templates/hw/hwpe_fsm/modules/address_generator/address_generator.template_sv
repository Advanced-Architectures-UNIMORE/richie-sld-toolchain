<%
###############################################
## Library of components - Address generator ##
###############################################
%>

<%
#############################################################################
## Address generator - Mapping control signals to streamer (input streams) ##
#############################################################################
%>

<%def name="addressgen_mapping_in()">\

  % for i in range (n_sink):
    % if (addr_gen_in_isprogr[i]):
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    // Input stream - ${stream_in[i]}_${k} (unrolled, programmable)
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.trans_size      = ctrl_i.${stream_in[i]}_trans_size; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.line_stride     = ctrl_i.${stream_in[i]}_line_stride; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.line_length     = ctrl_i.${stream_in[i]}_line_length; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_stride     = ctrl_i.${stream_in[i]}_feat_stride; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_length     = ctrl_i.${stream_in[i]}_feat_length;
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.base_addr       = ctrl_i.${stream_in[i]}_port_offset * ${k} + reg_file_i.hwpe_params[${TARGET}_REG_${stream_in[i].upper()}_${k}_ADDR] + (flags_ucode_i.offs[${TARGET}_UCODE_${stream_in[i].upper()}_${k}_OFFS]);
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_roll       = ctrl_i.${stream_in[i]}_feat_roll;
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.loop_outer      = ctrl_i.${stream_in[i]}_loop_outer; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.realign_type    = ctrl_i.${stream_in[i]}_realign_type; 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.step            = ctrl_i.${stream_in[i]}_step;
        % endfor
      % else:
    // Input stream - ${stream_in[i]} (programmable)
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.trans_size      = ctrl_i.${stream_in[i]}_trans_size; 
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.line_stride     = ctrl_i.${stream_in[i]}_line_stride; 
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.line_length     = ctrl_i.${stream_in[i]}_line_length; 
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_stride     = ctrl_i.${stream_in[i]}_feat_stride; 
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_length     = ctrl_i.${stream_in[i]}_feat_length;
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.base_addr       = ctrl_i.${stream_in[i]}_port_offset + reg_file_i.hwpe_params[${TARGET}_REG_${stream_in[i].upper()}_ADDR] + (flags_ucode_i.offs[${TARGET}_UCODE_${stream_in[i].upper()}_OFFS]);
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_roll       = ctrl_i.${stream_in[i]}_feat_roll;
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.loop_outer      = ctrl_i.${stream_in[i]}_loop_outer; 
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.realign_type    = ctrl_i.${stream_in[i]}_realign_type; 
      % endif
    % else:
      % if (is_parallel_in[i]):
        % for k in range (in_parallelism_factor[i]):
    // Input stream - ${stream_in[i]}_${k} (unrolled, hardwired)
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.trans_size      = /* TO-BE-DONE */ 
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.line_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.line_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.base_addr       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.feat_roll       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.loop_outer      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.realign_type    = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_${k}_source_ctrl.addressgen_ctrl.step            = /* TO-BE-DONE */
        % endfor
      % else:
    // Input stream - ${stream_in[i]} (hardwired)
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.trans_size      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.line_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.line_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.base_addr       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.feat_roll       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.loop_outer      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_in[i]}_source_ctrl.addressgen_ctrl.realign_type    = /* TO-BE-DONE */
      % endif
    % endif
  % endfor

</%def>\

<%
##############################################################################
## Address generator - Mapping control signals to streamer (output streams) ##
##############################################################################
%>

<%def name="addressgen_mapping_out()">\

  % for j in range (n_source):
    % if (addr_gen_out_isprogr[j]):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    // Output stream - ${stream_out[j]}_${k} (unrolled, programmable)
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.trans_size      = ctrl_i.${stream_out[j]}_trans_size; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.line_stride     = ctrl_i.${stream_out[j]}_line_stride; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.line_length     = ctrl_i.${stream_out[j]}_line_length; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_stride     = ctrl_i.${stream_out[j]}_feat_stride; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_length     = ctrl_i.${stream_out[j]}_feat_length;
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.base_addr       = ctrl_i.${stream_out[j]}_port_offset * ${k} + reg_file_i.hwpe_params[${TARGET}_REG_${stream_out[j].upper()}_${k}_ADDR] + (flags_ucode_i.offs[${TARGET}_UCODE_${stream_out[j].upper()}_${k}_OFFS]);
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_roll       = ctrl_i.${stream_out[j]}_feat_roll;
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.loop_outer      = ctrl_i.${stream_out[j]}_loop_outer; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.realign_type    = ctrl_i.${stream_out[j]}_realign_type; 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.step            = ctrl_i.${stream_out[j]}_step;
        % endfor
      % else:
    // Output stream - ${stream_out[j]} (programmable)
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.trans_size      = ctrl_i.${stream_out[j]}_trans_size; 
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.line_stride     = ctrl_i.${stream_out[j]}_line_stride; 
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.line_length     = ctrl_i.${stream_out[j]}_line_length; 
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_stride     = ctrl_i.${stream_out[j]}_feat_stride; 
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_length     = ctrl_i.${stream_out[j]}_feat_length;
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.base_addr       = ctrl_i.${stream_out[j]}_port_offset + reg_file_i.hwpe_params[${TARGET}_REG_${stream_out[j].upper()}_ADDR] + (flags_ucode_i.offs[${TARGET}_UCODE_${stream_out[j].upper()}_OFFS]);
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_roll       = ctrl_i.${stream_out[j]}_feat_roll;
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.loop_outer      = ctrl_i.${stream_out[j]}_loop_outer; 
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.realign_type    = ctrl_i.${stream_out[j]}_realign_type; 
      % endif
    % else:
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    // Output stream - ${stream_out[j]}_${k} (unrolled, hardwired)
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.trans_size      = /* TO-BE-DONE */ 
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.line_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.line_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.base_addr       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.feat_roll       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.loop_outer      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.realign_type    = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_${k}_source_ctrl.addressgen_ctrl.step            = /* TO-BE-DONE */
        % endfor
      % else:
    // Output stream - ${stream_out[j]} (hardwired)
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.trans_size      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.line_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.line_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_stride     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_length     = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.base_addr       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.feat_roll       = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.loop_outer      = /* TO-BE-DONE */
    ctrl_streamer_o.${stream_out[j]}_source_ctrl.addressgen_ctrl.realign_type    = /* TO-BE-DONE */
      % endif
    % endif
  % endfor

</%def>\

