<%
##################################
## Library of components - FIFO ##
##################################
%>

<%
##########################
## FIFO - Ready signals ##
##########################
%>

<%def name="fifo_ready_sign(stream_in, n_sink, is_parallel_in, in_parallelism_factor)">\

  // FIFO ready signals
  % for i in range ( n_sink ):
    % if ( is_parallel_in[i] ):
      % for k in range ( in_parallelism_factor[i] ):
  logic ${stream_in[i]}_${k}_tcdm_fifo_ready;
      % endfor
    % else:
  logic ${stream_in[i]}_tcdm_fifo_ready;
    % endif
  % endfor 

</%def>\

<%
#######################
## FIFO - Interfaces ##
#######################
%>

<%def name="fifo_intf(stream_in, n_sink, is_parallel_in, in_parallelism_factor)">\

  // FIFO interfaces
  hwpe_stream_intf_tcdm tcdm_fifo [MP-1:0] ( .clk ( clk_i ) );

  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_in[i]}_${k} [31:0] ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_in[i]} [31:0] ( .clk (clk_i) );
    % endif
  % endfor 

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_out[j]}_${k} [31:0] ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_out[j]} [31:0] ( .clk (clk_i) );
    % endif
  % endfor

</%def>\

<%
######################################
## FIFO - Pre-streaming (tcdm-side) ##
######################################
%>

<%def name="fifo_pre(stream_in, stream_out, n_sink, n_source, is_parallel_in, is_parallel_out, in_parallelism_factor, out_parallelism_factor)">\

  // Pre-FIFO streamer interfaces (TCDM-side)
  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]}_${k}_prefifo ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]}_prefifo ( .clk (clk_i) );
    % endif
  % endfor

  // TCDM-side FIFOs (TCDM -> HWPE)
  % for i in range (n_sink):
  hwpe_stream_tcdm_fifo_load #(
    .FIFO_DEPTH ( 4 )
  ) i_${ stream_in[i] }_tcdm_fifo_load (
    .clk_i       ( clk_i             ),
    .rst_ni      ( rst_ni            ),
    .clear_i     ( clear_i           ),
    .flags_o     (                   ),
    .ready_i     ( ${ stream_in[i] }_tcdm_fifo_ready ),
    .tcdm_slave  ( tcdm_fifo_${i}[0]    ),
    .tcdm_master ( tcdm      [${i}]     )
  );
  % endfor 

  // TCDM-side FIFOs (TCDM <- HWPE)
  % for j in range (n_source):
  hwpe_stream_tcdm_fifo_store #(
    .FIFO_DEPTH ( 4 )
  ) i_${ stream_out[j] }_tcdm_fifo_store (
    .clk_i       ( clk_i          ),
    .rst_ni      ( rst_ni         ),
    .clear_i     ( clear_i        ),
    .flags_o     (                ),
    .tcdm_slave  ( tcdm_fifo_${j+i+1}[0] ),
    .tcdm_master ( tcdm       [${j+i+1}] )
  );
  % endfor

</%def>\

<%
#########################################
## FIFO - Post-streaming (engine-side) ##
#########################################
%>

<%def name="fifo_post(stream_in, stream_out, n_sink, n_source, is_parallel_in, is_parallel_out, in_parallelism_factor, out_parallelism_factor)">\

  // Post-FIFO streamer interfaces (TCDM-side)
  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_${k}_postfifo ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_postfifo ( .clk (clk_i) );
    % endif
  % endfor 

  // Engine-side FIFOs (TCDM -> HWPE)
  % for i in range (n_sink):
  hwpe_stream_fifo #(
    .DATA_WIDTH( 32 ),
    .FIFO_DEPTH( 2  ),
    .LATCH_FIFO( 0  )
  ) i_${ stream_in[i] }_fifo (
    .clk_i   ( clk_i          ),
    .rst_ni  ( rst_ni         ),
    .clear_i ( clear_i        ),
    .push_i  ( ${ stream_in[i] }_prefifo.sink ),
    .pop_o   ( ${ stream_in[i] }_o            ),
    .flags_o (                )
  );
  % endfor 

  // Engine-side FIFOs (TCDM <- HWPE)
  % for j in range (n_source):
  hwpe_stream_fifo #(
    .DATA_WIDTH( 32 ),
    .FIFO_DEPTH( 2  ),
    .LATCH_FIFO( 0  )
  ) i_${ stream_out[j] }_fifo (
    .clk_i   ( clk_i             ),
    .rst_ni  ( rst_ni            ),
    .clear_i ( clear_i           ),
    .push_i  ( ${ stream_out[j] }_i               ),
    .pop_o   ( ${ stream_out[j] }_postfifo.source ),
    .flags_o (                   )
  );
  % endfor

</%def>\
