/*
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Authors:     Francesco Conti <fconti@iis.ee.ethz.ch>
 * Contribute:  ${author} ${email}
 *
 * Module: ${target}_streamer.sv
 * 
 */

import ${target}_package::*;
import hwpe_stream_package::*;

module ${target}_streamer
#(
  parameter int unsigned MP  = ${n_tcdm_ports}, // number of master ports
  parameter int unsigned FD  = 2 // FIFO depth
)
(
  // Global signals
  ${port('clk', 'logic', 1, False)},\
  ${port('rst', 'logic', 1, False, True)},
  ${port('test_mode', 'logic', 1, False)},

  // Local enable & clear
  ${port('enable', 'logic', 1, False)},\
  ${port('clear', 'logic', 1, False)},\

  // Streaming interfaces
  
  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_stream.source ${stream_in[i]}_${k},
      % endfor
    % else:
  hwpe_stream_intf_stream.source ${stream_in[i]},
    % endif
  % endfor 

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_stream.source ${stream_out[j]}_${k},
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_postfifo ( .clk (clk_i) ),
    % endif
  % endfor 

  // TCDM ports
  hwpe_stream_intf_tcdm.master tcdm [MP-1:0],

  // control channel
  input  ctrl_streamer_t  ctrl_i,
  output flags_streamer_t flags_o
);

  // FIFO ready signals
  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  logic ${stream_in[i]}_${k}_tcdm_fifo_ready;
      % endfor
    % else:
  logic ${stream_in[i]}_tcdm_fifo_ready;
    % endif
  % endfor 

  // Pre-FIFO streamer interfaces (TCDM-side)
  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]}_${k}_prefifo ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_in[i]}_prefifo ( .clk (clk_i) );
    % endif
  % endfor 

  // Post-FIFO streamer interfaces (TCDM-side)
  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_${k}_postfifo ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_stream #( .DATA_WIDTH(32) ) ${stream_out[j]}_postfifo ( .clk (clk_i) );
    % endif
  % endfor 

  // FIFO interfaces
  hwpe_stream_intf_tcdm tcdm_fifo [MP-1:0] ( .clk ( clk_i ) );
  // % for i in range (n_tcdm_ports):
  // ${stream_intf_tcdm_decl('tcdm_fifo' , i, 0, 'clk_i')}
  // % endfor 

  % for i in range (n_sink):
    % if (is_parallel_in[i]):
      % for k in range (in_parallelism_factor[i]):
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_in[i]}_${k} [31:0] ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_in[i]} [31:0] ( .clk (clk_i) );
    % endif
  % endfor 

  % for j in range (n_source):
    % if (is_parallel_out[j]):
      % for k in range (out_parallelism_factor[j]):
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_out[i+j]}_${k} [31:0] ( .clk (clk_i) );
      % endfor
    % else:
  hwpe_stream_intf_tcdm tcdm_fifo_${stream_out[i+j]} [31:0] ( .clk (clk_i) );
    % endif
  % endfor

  // Source modules (TCDM -> HWPE)
  % for i in range (n_sink):
  hwpe_stream_source #(
    .DATA_WIDTH   ( 32 ),
    .DECOUPLED    ( 1  )
    // .NB_TCDM_PORTS (    )
  ) i_${ stream_in[i] }_source (
    .clk_i              ( clk_i                  ),
    .rst_ni             ( rst_ni                 ),
    .test_mode_i        ( test_mode_i            ),
    .clear_i            ( clear_i                ),
    .tcdm               ( tcdm_fifo_${i}            ), 
    .stream             ( ${stream_in[i]}_prefifo.source       ),
    .ctrl_i             ( ctrl_i.${stream_in[i]}_source_ctrl   ),
    .flags_o            ( flags_o.${stream_in[i]}_source_flags ),
    .tcdm_fifo_ready_o  ( ${stream_in[i]}_tcdm_fifo_ready      )
  );
  % endfor 

  // Sink modules (TCDM <- HWPE)
  % for j in range (n_source):
  hwpe_stream_sink #(
    .DATA_WIDTH ( 32 )
    // .NB_TCDM_PORTS (    )
  ) i_${ stream_out[j] }_sink (
    .clk_i              ( clk_i                  ),
    .rst_ni             ( rst_ni                 ),
    .test_mode_i        ( test_mode_i            ),
    .clear_i            ( clear_i                ),
    .tcdm               ( tcdm_fifo_${j+i+1}            ), 
    .stream             ( ${ stream_out[j] }_postfifo.sink       ),
    .ctrl_i             ( ctrl_i.${ stream_out[j] }_sink_ctrl   ),
    .flags_o            ( flags_o.${ stream_out[j] }_sink_flags )
  );
  % endfor 

  // TCDM-side FIFOs (TCDM -> HWPE)
  % for i in range (n_sink):
  hwpe_stream_tcdm_fifo_load #(
    .FIFO_DEPTH ( 4 )
  ) i_${ stream_in[i] }_tcdm_fifo_load (
    .clk_i       ( clk_i             ),
    .rst_ni      ( rst_ni            ),
    .clear_i     ( clear_i           ),
    .flags_o     (                   ),
    .ready_i     ( ${ stream_in[i] }_tcdm_fifo_ready ),
    .tcdm_slave  ( tcdm_fifo_${i}[0]    ),
    .tcdm_master ( tcdm      [${i}]     )
  );
  % endfor 

  // TCDM-side FIFOs (TCDM <- HWPE)
  % for j in range (n_source):
  hwpe_stream_tcdm_fifo_store #(
    .FIFO_DEPTH ( 4 )
  ) i_${ stream_out[j] }_tcdm_fifo_store (
    .clk_i       ( clk_i          ),
    .rst_ni      ( rst_ni         ),
    .clear_i     ( clear_i        ),
    .flags_o     (                ),
    .tcdm_slave  ( tcdm_fifo_${j+i+1}[0] ),
    .tcdm_master ( tcdm       [${j+i+1}] )
  );
  % endfor

  // Datapath-side FIFOs (TCDM -> HWPE)
  % for i in range (n_sink):
  hwpe_stream_fifo #(
    .DATA_WIDTH( 32 ),
    .FIFO_DEPTH( 2  ),
    .LATCH_FIFO( 0  )
  ) i_${ stream_in[i] }_fifo (
    .clk_i   ( clk_i          ),
    .rst_ni  ( rst_ni         ),
    .clear_i ( clear_i        ),
    .push_i  ( ${ stream_in[i] }_prefifo.sink ),
    .pop_o   ( ${ stream_in[i] }_o            ),
    .flags_o (                )
  );
  % endfor 

  // Datapath-side FIFOs (TCDM <- HWPE)
  % for j in range (n_source):
  hwpe_stream_fifo #(
    .DATA_WIDTH( 32 ),
    .FIFO_DEPTH( 2  ),
    .LATCH_FIFO( 0  )
  ) i_${ stream_out[j] }_fifo (
    .clk_i   ( clk_i             ),
    .rst_ni  ( rst_ni            ),
    .clear_i ( clear_i           ),
    .push_i  ( ${ stream_out[j] }_i               ),
    .pop_o   ( ${ stream_out[j] }_postfifo.source ),
    .flags_o (                   )
  );
  % endfor
  
endmodule\

