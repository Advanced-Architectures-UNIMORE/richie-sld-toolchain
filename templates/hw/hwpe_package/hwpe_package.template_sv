/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Authors:     Francesco Conti <fconti@iis.ee.ethz.ch>
 * Contribute:  ${author} ${email}
 *
 * Module: ${target}_package.sv
 * 
 */

import hwpe_stream_package::*;

package ${target}_package;

  parameter int unsigned ${TARGET}_CNT_LEN = 1024; // maximum length of the vectors for a scalar product

  /* Registers */
  // TCDM addresses
  % for i in range (n_sink):
  parameter int unsigned ${TARGET}_REG_${stream_in[i].upper()}_ADDR              = ${i};
  % endfor 

  % for j in range (n_source):
  parameter int unsigned ${TARGET}_REG_${stream_out[j].upper()}_ADDR              = ${i+j};
  % endfor 

  // Standard registers
  parameter int unsigned ${TARGET}_REG_NB_ITER              = ${n_sink+n_source};
  parameter int unsigned ${TARGET}_REG_LEN_ITER             = ${n_sink+n_source+1};
  parameter int unsigned ${TARGET}_REG_SHIFT_SIMPLEMUL      = ${n_sink+n_source+2};
  parameter int unsigned ${TARGET}_REG_SHIFT_VECTSTRIDE     = ${n_sink+n_source+3};
  parameter int unsigned ${TARGET}_REG_SHIFT_VECTSTRIDE2    = ${n_sink+n_source+4}; // Added to be aligned with sw (not used in hw)

  // Custom register files
  % for i in range (custom_reg_num):
  <% NAME=custom_reg_name[i].upper() %>
  parameter int unsigned ${TARGET}_REG_${NAME}             = ${i+n_sink+n_source+std_reg_num};
  % endfor 

  // microcode offset indeces -- this should be aligned to the microcode compiler of course!
  % for i in range (n_sink):
  parameter int unsigned ${TARGET}_UCODE_${stream_in[i].upper()}_OFFS              = ${i};
  % endfor 

  % for j in range (n_source):
  parameter int unsigned ${TARGET}_UCODE_${stream_out[j].upper()}_OFFS              = ${i+j};
  % endfor 

  // microcode mnemonics -- this should be aligned to the microcode compiler of course!
  parameter int unsigned ${TARGET}_UCODE_MNEM_NBITER     = 4 - 4;
  parameter int unsigned ${TARGET}_UCODE_MNEM_ITERSTRIDE = 5 - 4;
  parameter int unsigned ${TARGET}_UCODE_MNEM_ONESTRIDE  = 6 - 4;

  typedef struct packed {
    logic clear;
    logic enable;
    logic simple_mul;
    logic start;
    logic unsigned [$clog2(32)-1       :0] shift;
    logic unsigned [$clog2(${target}_CNT_LEN):0] len; // 1 bit more as cnt starts from 1, not 0

    // Custom register files
    % for i in range (custom_reg_num):
    ${static_reg_decl("logic unsigned" , "", custom_reg_name[i], custom_reg_dim[i], "")}
    % endfor 

  } ctrl_engine_t; 

  typedef struct packed {
    logic unsigned [$clog2(${target}_CNT_LEN):0] cnt; // 1 bit more as cnt starts from 1, not 0
    logic done;
    logic idle;
    logic ready;
  } flags_engine_t;

  typedef struct packed {
    % for i in range (n_sink):
    hwpe_stream_package::ctrl_sourcesink_t ${stream_in[i]}_source_ctrl;
    % endfor 
    % for j in range (n_source):
    hwpe_stream_package::ctrl_sourcesink_t ${stream_out[j]}_sink_ctrl;
    % endfor 
  } ctrl_streamer_t;

  typedef struct packed {
    % for i in range (n_sink):
    hwpe_stream_package::flags_sourcesink_t ${stream_in[i]}_source_flags;
    % endfor 
    % for j in range (n_source):
    hwpe_stream_package::flags_sourcesink_t ${stream_out[j]}_sink_flags;
    % endfor 
  } flags_streamer_t;

  typedef struct packed {
    logic simple_mul;
    logic unsigned [$clog2(32)-1       :0] shift;
    logic unsigned [$clog2(${target}_CNT_LEN):0] len; // 1 bit more as cnt starts from 1, not 0
    // Custom register files
    % for i in range (custom_reg_num):
    ${static_reg_decl("logic unsigned" , "", custom_reg_name[i], custom_reg_dim[i], "")}
    % endfor 
  } ctrl_fsm_t;

  typedef enum {
    FSM_IDLE,
    FSM_START,
    FSM_COMPUTE,
    FSM_WAIT,
    FSM_UPDATEIDX,
    FSM_TERMINATE
  } state_fsm_t;

endpackage