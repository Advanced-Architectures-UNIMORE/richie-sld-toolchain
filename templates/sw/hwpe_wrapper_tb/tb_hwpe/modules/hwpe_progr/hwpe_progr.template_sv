<%
##############################################
## Library of components - HWPE programming ##
##############################################
%>

<%
#######################################
## HWPE programming - Initialization ##
#######################################
%>

<%def name="hwpe_init()">\

  /* HWPE initialization */

  hwpe_cg_enable();
  while((offload_id_tmp = hwpe_acquire_job()) < 0)

</%def>\

<%
#####################################
## HWPE programming - Deactivation ##
#####################################
%>

<%def name="hwpe_disable()">\

  /* Clean and disable HWPE */

  hwpe_soft_clear();
  hwpe_cg_disable();

</%def>\

<%
##########################################
## HWPE programming - ULOOP programming ##
##########################################
%>

<%def name="hwpe_uloop_progr()">\

  /* Micro-code processor programming */

  // Set up bytecode
  hwpe_bytecode_set(${target.upper()}_REG_LOOPS1_OFFS,           0x00000000);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE5_LOOPS0_OFFS, 0x00000000);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE4_OFFS,        0x00000000);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE3_OFFS,        0x00000000);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE2_OFFS,        0x00000000);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE1_OFFS,        0x00000808);
  hwpe_bytecode_set(${target.upper()}_REG_BYTECODE0_OFFS,        0x09e22c24);

  // Ucode parameters
  hwpe_nb_iter_set(stripe_height);
  hwpe_linestride_set(width*sizeof(uint32_t));
  hwpe_tilestride_set(stripe_height*sizeof(uint32_t));

</%def>\

<%
###############################################
## HWPE programming - Controller programming ##
###############################################
%>

<%def name="hwpe_ctrl_progr()">\

  /* Controller programming */

  // FSM
  
  % for j in range (n_source):
  hwpe_len_iter_set_${stream_out[j]}(${stream_out[j]}_stripe_height * ${stream_out[j]}_stripe_height - 1);
  % endfor

</%def>\

<%
######################################################
## HWPE programming - Address generator programming ##
######################################################
%>

<%def name="hwpe_addressgen_progr()">\

  /* Address generator programming */

  % for i in range (n_sink):
  // Input ${stream_in[i]}
    % if (is_parallel_in[i]):
  hwpe_addr_gen_${stream_in[i]}(
    ${stream_in[i]}_trans_size,
    ${stream_in[i]}_line_stride,
    ${stream_in[i]}_line_length,
    ${stream_in[i]}_feat_stride,
    ${stream_in[i]}_feat_length,
    ${stream_in[i]}_feat_roll,
    ${stream_in[i]}_loop_outer,
    ${stream_in[i]}_realign_type,
    ${stream_in[i]}_port_offset,
    ${stream_in[i]}_step
  );
    % else:
  hwpe_addr_gen_${stream_in[i]}(
    ${stream_in[i]}_trans_size,
    ${stream_in[i]}_line_stride,
    ${stream_in[i]}_line_length,
    ${stream_in[i]}_feat_stride,
    ${stream_in[i]}_feat_length,
    ${stream_in[i]}_feat_roll,
    ${stream_in[i]}_loop_outer,
    ${stream_in[i]}_realign_type
  );
    % endif
  % endfor

  % for j in range (n_source):
  // Output ${stream_out[j]}
    % if (is_parallel_out[j]):
  hwpe_addr_gen_${stream_out[j]}(
    ${stream_out[j]}_trans_size,
    ${stream_out[j]}_line_stride,
    ${stream_out[j]}_line_length,
    ${stream_out[j]}_feat_stride,
    ${stream_out[j]}_feat_length,
    ${stream_out[j]}_feat_roll,
    ${stream_out[j]}_loop_outer,
    ${stream_out[j]}_realign_type,
    ${stream_out[j]}_port_offset,
    ${stream_out[j]}_step
  );
    % else:
  hwpe_addr_gen_${stream_out[j]}(
    ${stream_out[j]}_trans_size,
    ${stream_out[j]}_line_stride,
    ${stream_out[j]}_line_length,
    ${stream_out[j]}_feat_stride,
    ${stream_out[j]}_feat_length,
    ${stream_out[j]}_feat_roll,
    ${stream_out[j]}_loop_outer,
    ${stream_out[j]}_realign_type
  );
    % endif
  % endfor

</%def>\

<%
#####################################################
## HWPE programming - TCDM master port programming ##
#####################################################
%>

<%def name="hwpe_tcdm_progr()">\

  /* Set TCDM address reg values */

  % for i in range (n_sink):
  // input ${stream_in[i]}
  hwpe_${stream_in[i]}_addr_set( ${stream_in[i]}_l1 );
  % endfor

  % for j in range (n_source):
  // output ${stream_out[j]}
  hwpe_${stream_out[j]}_addr_set( ${stream_out[j]}_l1 );
  % endfor

</%def>\