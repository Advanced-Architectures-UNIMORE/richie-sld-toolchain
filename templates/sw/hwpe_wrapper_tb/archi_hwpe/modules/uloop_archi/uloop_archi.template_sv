<%
#######################################################
## Library of components - Microcode processor archi ##
#######################################################
%>

<%
####################################################
## Microcode processor archi - Offset declaration ##
####################################################
%>

<%def name="uloop_archi(addr_current)">\

  /* Microcode processor */

        <%  
          # Differently from the other archi components, here we set 
          # *_REG_BYTECODE to addr_current, and then set the others with
          # new offsets. This is because we take advantage of the HAL
          # api "hwpe_bytecode_set()" to program the bytecode.
        %>

#define ${target.upper()}_REG_BYTECODE                                 ${hex(addr_current)}

        <%  
          # Now let's re-initialize addr_current to 0
          # and associate 32b to each bytecode.
          addr_current = 0
        %>

#define ${target.upper()}_REG_BYTECODE0_OFFS                           ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_BYTECODE1_OFFS                           ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_BYTECODE2_OFFS                           ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_BYTECODE3_OFFS                           ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_BYTECODE4_OFFS                           ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_BYTECODE5_LOOPS0_OFFS                    ${hex(addr_current)}

        <%  
          addr_current += 4
        %>

#define ${target.upper()}_REG_LOOPS1_OFFS                              ${hex(addr_current)}

</%def>\