-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_HConvH_proc6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    src_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_V_TVALID : IN STD_LOGIC;
    src_V_TREADY : OUT STD_LOGIC;
    hconv_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    hconv_V_full_n : IN STD_LOGIC;
    hconv_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_HConvH_proc6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_10A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001010";
    constant ap_const_lv32_1F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110010";
    constant ap_const_lv32_2D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010100";
    constant ap_const_lv32_335 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110101";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal width_blk_n : STD_LOGIC;
    signal src_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln139_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hconv_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln149_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_141 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_0_i_i_reg_152 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_read_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln139_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln147_1_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_1_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_3_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_3_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_10_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_10_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln149_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_432_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal hwin_1_1_i_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_2_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_3_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_4_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_5_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_6_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_7_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_8_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal hwin_9_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln140_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln147_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_1_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_2_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_3_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_4_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_5_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_6_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_7_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_8_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln147_2_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln147_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln147_3_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_1_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_2_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln147_1_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_3_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_4_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_5_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_2_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_5_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_6_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_7_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_8_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_8_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_7_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_9_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_6_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln140_fu_275_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln147_4_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_src_V_U_apdone_blk : STD_LOGIC;
    signal src_V_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_TVALID_int : STD_LOGIC;
    signal src_V_TREADY_int : STD_LOGIC;
    signal regslice_both_src_V_U_ack_in : STD_LOGIC;
    signal bound_fu_171_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_171_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_src_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_V_TDATA,
        vld_in => src_V_TVALID,
        ack_in => regslice_both_src_V_U_ack_in,
        data_out => src_V_TDATA_int,
        vld_out => src_V_TVALID_int,
        ack_out => src_V_TREADY_int,
        apdone_blk => regslice_both_src_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_141 <= add_ln139_fu_221_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_141 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_0_i_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_0_i_i_reg_152 <= row_fu_432_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_0_i_i_reg_152 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln147_10_reg_538 <= add_ln147_10_fu_415_p2;
                    add_ln147_1_reg_528(31 downto 2) <= add_ln147_1_fu_367_p2(31 downto 2);
                add_ln147_3_reg_533 <= add_ln147_3_fu_379_p2;
                icmp_ln149_reg_543 <= icmp_ln149_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_514 <= bound_fu_171_p2;
                width_read_reg_509 <= width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hwin_1_1_i_fu_76 <= hwin_1_fu_80;
                hwin_1_fu_80 <= hwin_2_fu_84;
                hwin_2_fu_84 <= hwin_3_fu_88;
                hwin_3_fu_88 <= hwin_4_fu_92;
                hwin_4_fu_92 <= hwin_5_fu_96;
                hwin_5_fu_96 <= hwin_6_fu_100;
                hwin_6_fu_100 <= hwin_7_fu_104;
                hwin_7_fu_104 <= hwin_8_fu_108;
                hwin_8_fu_108 <= hwin_9_fu_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hwin_9_fu_112 <= src_V_TDATA_int;
            end if;
        end if;
    end process;
    add_ln147_1_reg_528(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, height_empty_n, width_empty_n, ap_enable_reg_pp0_iter0, icmp_ln139_fu_216_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln139_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln139_fu_216_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln139_fu_221_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_141) + unsigned(ap_const_lv64_1));
    add_ln147_10_fu_415_p2 <= std_logic_vector(unsigned(add_ln147_9_fu_409_p2) + unsigned(add_ln147_6_fu_391_p2));
    add_ln147_1_fu_367_p2 <= std_logic_vector(unsigned(add_ln147_fu_361_p2) + unsigned(shl_ln147_3_fu_355_p2));
    add_ln147_2_fu_373_p2 <= std_logic_vector(unsigned(mul_ln147_fu_295_p2) + unsigned(mul_ln147_1_fu_301_p2));
    add_ln147_3_fu_379_p2 <= std_logic_vector(unsigned(add_ln147_2_fu_373_p2) + unsigned(shl_ln147_1_fu_289_p2));
    add_ln147_4_fu_438_p2 <= std_logic_vector(unsigned(add_ln147_3_reg_533) + unsigned(add_ln147_1_reg_528));
    add_ln147_5_fu_385_p2 <= std_logic_vector(unsigned(mul_ln147_3_fu_313_p2) + unsigned(mul_ln147_4_fu_319_p2));
    add_ln147_6_fu_391_p2 <= std_logic_vector(unsigned(add_ln147_5_fu_385_p2) + unsigned(mul_ln147_2_fu_307_p2));
    add_ln147_7_fu_397_p2 <= std_logic_vector(unsigned(mul_ln147_5_fu_325_p2) + unsigned(mul_ln147_6_fu_331_p2));
    add_ln147_8_fu_403_p2 <= std_logic_vector(unsigned(mul_ln147_7_fu_337_p2) + unsigned(mul_ln147_8_fu_343_p2));
    add_ln147_9_fu_409_p2 <= std_logic_vector(unsigned(add_ln147_8_fu_403_p2) + unsigned(add_ln147_7_fu_397_p2));
    add_ln147_fu_361_p2 <= std_logic_vector(unsigned(shl_ln147_2_fu_349_p2) + unsigned(shl_ln147_fu_283_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln139_fu_216_p2, ap_enable_reg_pp0_iter1, icmp_ln149_reg_543, src_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln149_reg_543 = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (src_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln139_fu_216_p2, ap_enable_reg_pp0_iter1, icmp_ln149_reg_543, src_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln149_reg_543 = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (src_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(hconv_V_full_n, ap_enable_reg_pp0_iter0, icmp_ln139_fu_216_p2, ap_enable_reg_pp0_iter1, icmp_ln149_reg_543, src_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln149_reg_543 = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (src_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, height_empty_n, width_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln139_fu_216_p2, src_V_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (src_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(hconv_V_full_n, icmp_ln149_reg_543)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln149_reg_543 = ap_const_lv1_1) and (hconv_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln139_fu_216_p2)
    begin
        if ((icmp_ln139_fu_216_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_171_p0 <= bound_fu_171_p00(32 - 1 downto 0);
    bound_fu_171_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_dout),64));
    bound_fu_171_p1 <= bound_fu_171_p10(32 - 1 downto 0);
    bound_fu_171_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_dout),64));
    bound_fu_171_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_171_p0) * unsigned(bound_fu_171_p1), 64));

    hconv_V_blk_n_assign_proc : process(hconv_V_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_543)
    begin
        if (((icmp_ln149_reg_543 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hconv_V_blk_n <= hconv_V_full_n;
        else 
            hconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hconv_V_din <= std_logic_vector(unsigned(add_ln147_10_reg_538) + unsigned(add_ln147_4_fu_438_p2));

    hconv_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_543, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln149_reg_543 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            hconv_V_write <= ap_const_logic_1;
        else 
            hconv_V_write <= ap_const_logic_0;
        end if; 
    end process;


    height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln139_fu_216_p2 <= "1" when (indvar_flatten_reg_141 = bound_reg_514) else "0";
    icmp_ln140_fu_211_p2 <= "1" when (signed(zext_ln140_fu_207_p1) < signed(width_read_reg_509)) else "0";
    icmp_ln149_fu_421_p2 <= "1" when (unsigned(select_ln140_fu_275_p3) > unsigned(ap_const_lv11_9)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln147_1_fu_301_p1 <= hwin_2_fu_84;
    mul_ln147_1_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_10A) * signed(mul_ln147_1_fu_301_p1))), 32));
    mul_ln147_2_fu_307_p1 <= hwin_3_fu_88;
    mul_ln147_2_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1F2) * signed(mul_ln147_2_fu_307_p1))), 32));
    mul_ln147_3_fu_313_p1 <= hwin_4_fu_92;
    mul_ln147_3_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_2D4) * signed(mul_ln147_3_fu_313_p1))), 32));
    mul_ln147_4_fu_319_p1 <= hwin_5_fu_96;
    mul_ln147_4_fu_319_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_335) * signed(mul_ln147_4_fu_319_p1))), 32));
    mul_ln147_5_fu_325_p1 <= hwin_6_fu_100;
    mul_ln147_5_fu_325_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_2D4) * signed(mul_ln147_5_fu_325_p1))), 32));
    mul_ln147_6_fu_331_p1 <= hwin_7_fu_104;
    mul_ln147_6_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1F2) * signed(mul_ln147_6_fu_331_p1))), 32));
    mul_ln147_7_fu_337_p1 <= hwin_8_fu_108;
    mul_ln147_7_fu_337_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_10A) * signed(mul_ln147_7_fu_337_p1))), 32));
    mul_ln147_8_fu_343_p1 <= hwin_9_fu_112;
    mul_ln147_8_fu_343_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_6F) * signed(mul_ln147_8_fu_343_p1))), 32));
    mul_ln147_fu_295_p1 <= hwin_1_fu_80;
    mul_ln147_fu_295_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_6F) * signed(mul_ln147_fu_295_p1))), 32));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_fu_432_p2 <= std_logic_vector(unsigned(select_ln140_fu_275_p3) + unsigned(ap_const_lv11_1));
    select_ln140_fu_275_p3 <= 
        row_0_i_i_reg_152 when (icmp_ln140_fu_211_p2(0) = '1') else 
        ap_const_lv11_0;
    shl_ln147_1_fu_289_p2 <= std_logic_vector(shift_left(unsigned(hwin_1_1_i_fu_76),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln147_2_fu_349_p2 <= std_logic_vector(shift_left(unsigned(src_V_TDATA_int),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln147_3_fu_355_p2 <= std_logic_vector(shift_left(unsigned(src_V_TDATA_int),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln147_fu_283_p2 <= std_logic_vector(shift_left(unsigned(hwin_1_1_i_fu_76),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));

    src_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln139_fu_216_p2, src_V_TVALID_int)
    begin
        if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_TDATA_blk_n <= src_V_TVALID_int;
        else 
            src_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_V_TREADY_assign_proc : process(src_V_TVALID, regslice_both_src_V_U_ack_in)
    begin
        if (((src_V_TVALID = ap_const_logic_1) and (regslice_both_src_V_U_ack_in = ap_const_logic_1))) then 
            src_V_TREADY <= ap_const_logic_1;
        else 
            src_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    src_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln139_fu_216_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln139_fu_216_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V_TREADY_int <= ap_const_logic_1;
        else 
            src_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    width_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, width_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln140_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_i_i_reg_152),32));
end behav;
