-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_VConvH_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_empty_n : IN STD_LOGIC;
    vconv_xlim_loc_read : OUT STD_LOGIC;
    hconv_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hconv_V_empty_n : IN STD_LOGIC;
    hconv_V_read : OUT STD_LOGIC;
    vconv_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vconv_V_full_n : IN STD_LOGIC;
    vconv_V_write : OUT STD_LOGIC;
    height_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    height_out_full_n : IN STD_LOGIC;
    height_out_write : OUT STD_LOGIC;
    vconv_xlim_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_out_full_n : IN STD_LOGIC;
    vconv_xlim_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_VConvH_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_10A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001010";
    constant ap_const_lv32_1F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110010";
    constant ap_const_lv32_2D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010100";
    constant ap_const_lv32_335 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal linebuf_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_0_ce0 : STD_LOGIC;
    signal linebuf_0_we0 : STD_LOGIC;
    signal linebuf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_1_ce0 : STD_LOGIC;
    signal linebuf_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_1_ce1 : STD_LOGIC;
    signal linebuf_1_we1 : STD_LOGIC;
    signal linebuf_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_2_ce0 : STD_LOGIC;
    signal linebuf_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_2_ce1 : STD_LOGIC;
    signal linebuf_2_we1 : STD_LOGIC;
    signal linebuf_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_3_ce0 : STD_LOGIC;
    signal linebuf_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_3_ce1 : STD_LOGIC;
    signal linebuf_3_we1 : STD_LOGIC;
    signal linebuf_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_4_ce0 : STD_LOGIC;
    signal linebuf_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_4_ce1 : STD_LOGIC;
    signal linebuf_4_we1 : STD_LOGIC;
    signal linebuf_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_5_ce0 : STD_LOGIC;
    signal linebuf_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_5_ce1 : STD_LOGIC;
    signal linebuf_5_we1 : STD_LOGIC;
    signal linebuf_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_6_ce0 : STD_LOGIC;
    signal linebuf_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_6_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_6_ce1 : STD_LOGIC;
    signal linebuf_6_we1 : STD_LOGIC;
    signal linebuf_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_7_ce0 : STD_LOGIC;
    signal linebuf_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_7_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_7_ce1 : STD_LOGIC;
    signal linebuf_7_we1 : STD_LOGIC;
    signal linebuf_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_8_ce0 : STD_LOGIC;
    signal linebuf_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_8_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_8_ce1 : STD_LOGIC;
    signal linebuf_8_we1 : STD_LOGIC;
    signal linebuf_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_9_ce0 : STD_LOGIC;
    signal linebuf_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_9_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_9_ce1 : STD_LOGIC;
    signal linebuf_9_we1 : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_blk_n : STD_LOGIC;
    signal hconv_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln156_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal vconv_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal select_ln156_1_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_1_reg_606_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal height_out_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal col1_0_i_i_i_reg_325 : STD_LOGIC_VECTOR (10 downto 0);
    signal row2_0_i_i_i_reg_336 : STD_LOGIC_VECTOR (10 downto 0);
    signal vconv_xlim_loc_read_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln156_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln156_reg_597_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_fu_375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln156_1_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_2_fu_415_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_0_addr_reg_615 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_1_addr_reg_620 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_2_addr_reg_626 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_3_addr_reg_632 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_4_addr_reg_638 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_5_addr_reg_644 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_6_addr_reg_650 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_7_addr_reg_656 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_8_addr_reg_662 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_9_addr_reg_668 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_1_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_1_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_2_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_2_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_5_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_5_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_9_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_9_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal zext_ln164_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln157_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln157_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_1_fu_389_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln169_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln156_fu_381_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln165_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_1_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_2_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_3_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_4_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_5_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_6_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_7_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_8_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_3_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_4_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_5_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_6_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_7_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln165_8_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_8_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_7_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln165_2_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln165_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln165_3_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_2_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln165_1_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_3_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_1_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_6_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_10_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_4_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_37 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_58 : BOOLEAN;
    signal ap_enable_state3_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_63 : BOOLEAN;
    signal ap_enable_operation_60 : BOOLEAN;
    signal ap_enable_operation_57 : BOOLEAN;
    signal ap_enable_operation_95 : BOOLEAN;
    signal ap_enable_state4_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_39 : BOOLEAN;
    signal ap_enable_operation_61 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_operation_41 : BOOLEAN;
    signal ap_enable_operation_64 : BOOLEAN;
    signal ap_enable_operation_69 : BOOLEAN;
    signal ap_enable_operation_43 : BOOLEAN;
    signal ap_enable_operation_67 : BOOLEAN;
    signal ap_enable_operation_72 : BOOLEAN;
    signal ap_enable_operation_45 : BOOLEAN;
    signal ap_enable_operation_70 : BOOLEAN;
    signal ap_enable_operation_75 : BOOLEAN;
    signal ap_enable_operation_47 : BOOLEAN;
    signal ap_enable_operation_73 : BOOLEAN;
    signal ap_enable_operation_78 : BOOLEAN;
    signal ap_enable_operation_49 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_operation_81 : BOOLEAN;
    signal ap_enable_operation_51 : BOOLEAN;
    signal ap_enable_operation_79 : BOOLEAN;
    signal ap_enable_operation_84 : BOOLEAN;
    signal ap_enable_operation_53 : BOOLEAN;
    signal ap_enable_operation_82 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_355_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_355_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component Loop_VConvH_proc_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_VConvH_proc_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    linebuf_0_U : component Loop_VConvH_proc_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_0_address0,
        ce0 => linebuf_0_ce0,
        we0 => linebuf_0_we0,
        d0 => linebuf_1_q0,
        q0 => linebuf_0_q0);

    linebuf_1_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_1_address0,
        ce0 => linebuf_1_ce0,
        q0 => linebuf_1_q0,
        address1 => linebuf_1_address1,
        ce1 => linebuf_1_ce1,
        we1 => linebuf_1_we1,
        d1 => linebuf_2_q0);

    linebuf_2_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_2_address0,
        ce0 => linebuf_2_ce0,
        q0 => linebuf_2_q0,
        address1 => linebuf_2_address1,
        ce1 => linebuf_2_ce1,
        we1 => linebuf_2_we1,
        d1 => linebuf_3_q0);

    linebuf_3_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_3_address0,
        ce0 => linebuf_3_ce0,
        q0 => linebuf_3_q0,
        address1 => linebuf_3_address1,
        ce1 => linebuf_3_ce1,
        we1 => linebuf_3_we1,
        d1 => linebuf_4_q0);

    linebuf_4_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_4_address0,
        ce0 => linebuf_4_ce0,
        q0 => linebuf_4_q0,
        address1 => linebuf_4_address1,
        ce1 => linebuf_4_ce1,
        we1 => linebuf_4_we1,
        d1 => linebuf_5_q0);

    linebuf_5_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_5_address0,
        ce0 => linebuf_5_ce0,
        q0 => linebuf_5_q0,
        address1 => linebuf_5_address1,
        ce1 => linebuf_5_ce1,
        we1 => linebuf_5_we1,
        d1 => linebuf_6_q0);

    linebuf_6_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_6_address0,
        ce0 => linebuf_6_ce0,
        q0 => linebuf_6_q0,
        address1 => linebuf_6_address1,
        ce1 => linebuf_6_ce1,
        we1 => linebuf_6_we1,
        d1 => linebuf_7_q0);

    linebuf_7_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_7_address0,
        ce0 => linebuf_7_ce0,
        q0 => linebuf_7_q0,
        address1 => linebuf_7_address1,
        ce1 => linebuf_7_ce1,
        we1 => linebuf_7_we1,
        d1 => linebuf_8_q0);

    linebuf_8_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_8_address0,
        ce0 => linebuf_8_ce0,
        q0 => linebuf_8_q0,
        address1 => linebuf_8_address1,
        ce1 => linebuf_8_ce1,
        we1 => linebuf_8_we1,
        d1 => linebuf_9_q0);

    linebuf_9_U : component Loop_VConvH_proc_cud
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_9_address0,
        ce0 => linebuf_9_ce0,
        q0 => linebuf_9_q0,
        address1 => linebuf_9_address1,
        ce1 => linebuf_9_ce1,
        we1 => linebuf_9_we1,
        d1 => hconv_V_dout);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col1_0_i_i_i_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_fu_370_p2 = ap_const_lv1_0))) then 
                col1_0_i_i_i_reg_325 <= select_ln156_2_fu_415_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col1_0_i_i_i_reg_325 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_fu_370_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_314 <= add_ln156_fu_375_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_314 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row2_0_i_i_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_fu_370_p2 = ap_const_lv1_0))) then 
                row2_0_i_i_i_reg_336 <= row_fu_437_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row2_0_i_i_i_reg_336 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then
                add_ln165_5_reg_700 <= add_ln165_5_fu_497_p2;
                add_ln165_9_reg_705 <= add_ln165_9_fu_515_p2;
                mul_ln165_1_reg_690 <= mul_ln165_1_fu_449_p2;
                mul_ln165_2_reg_695 <= mul_ln165_2_fu_455_p2;
                mul_ln165_reg_685 <= mul_ln165_fu_443_p2;
                tmp_1_reg_679 <= hconv_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_592 <= bound_fu_355_p2;
                vconv_xlim_loc_read_reg_587 <= vconv_xlim_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln156_reg_597 <= icmp_ln156_fu_370_p2;
                icmp_ln156_reg_597_pp0_iter1_reg <= icmp_ln156_reg_597;
                select_ln156_1_reg_606_pp0_iter1_reg <= select_ln156_1_reg_606;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_fu_370_p2 = ap_const_lv1_0))) then
                linebuf_0_addr_reg_615 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_1_addr_reg_620 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_2_addr_reg_626 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_3_addr_reg_632 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_4_addr_reg_638 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_5_addr_reg_644 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_6_addr_reg_650 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_7_addr_reg_656 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_8_addr_reg_662 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                linebuf_9_addr_reg_668 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
                select_ln156_1_reg_606 <= select_ln156_1_fu_407_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln156_fu_370_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln156_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln156_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln156_1_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(col1_0_i_i_i_reg_325));
    add_ln156_fu_375_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_314) + unsigned(ap_const_lv64_1));
    add_ln165_10_fu_575_p2 <= std_logic_vector(unsigned(add_ln165_9_reg_705) + unsigned(add_ln165_6_fu_571_p2));
    add_ln165_1_fu_549_p2 <= std_logic_vector(unsigned(add_ln165_fu_543_p2) + unsigned(shl_ln165_3_fu_538_p2));
    add_ln165_2_fu_555_p2 <= std_logic_vector(unsigned(mul_ln165_reg_685) + unsigned(mul_ln165_1_reg_690));
    add_ln165_3_fu_559_p2 <= std_logic_vector(unsigned(add_ln165_2_fu_555_p2) + unsigned(shl_ln165_1_fu_527_p2));
    add_ln165_4_fu_565_p2 <= std_logic_vector(unsigned(add_ln165_3_fu_559_p2) + unsigned(add_ln165_1_fu_549_p2));
    add_ln165_5_fu_497_p2 <= std_logic_vector(unsigned(mul_ln165_3_fu_461_p2) + unsigned(mul_ln165_4_fu_467_p2));
    add_ln165_6_fu_571_p2 <= std_logic_vector(unsigned(add_ln165_5_reg_700) + unsigned(mul_ln165_2_reg_695));
    add_ln165_7_fu_503_p2 <= std_logic_vector(unsigned(mul_ln165_5_fu_473_p2) + unsigned(mul_ln165_6_fu_479_p2));
    add_ln165_8_fu_509_p2 <= std_logic_vector(unsigned(mul_ln165_7_fu_485_p2) + unsigned(mul_ln165_8_fu_491_p2));
    add_ln165_9_fu_515_p2 <= std_logic_vector(unsigned(add_ln165_8_fu_509_p2) + unsigned(add_ln165_7_fu_503_p2));
    add_ln165_fu_543_p2 <= std_logic_vector(unsigned(shl_ln165_2_fu_533_p2) + unsigned(shl_ln165_fu_521_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(hconv_V_empty_n, vconv_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_enable_reg_pp0_iter2, select_ln156_1_reg_606_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((vconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1)) or ((hconv_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln156_reg_597 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(hconv_V_empty_n, vconv_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_enable_reg_pp0_iter2, select_ln156_1_reg_606_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((vconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1)) or ((hconv_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln156_reg_597 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(hconv_V_empty_n, vconv_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_enable_reg_pp0_iter2, select_ln156_1_reg_606_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((vconv_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1)) or ((hconv_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln156_reg_597 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(hconv_V_empty_n, icmp_ln156_reg_597)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((hconv_V_empty_n = ap_const_logic_0) and (icmp_ln156_reg_597 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(vconv_V_full_n, select_ln156_1_reg_606_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((vconv_V_full_n = ap_const_logic_0) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
        if ((icmp_ln156_fu_370_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_37_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_37 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_39_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_39 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_41_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_41 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_43_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_43 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_45_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_45 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_47_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_47 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_49_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_49 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_51_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_51 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_53_assign_proc : process(icmp_ln156_fu_370_p2)
    begin
                ap_enable_operation_53 <= (icmp_ln156_fu_370_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_57_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_57 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_58_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_58 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_60_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_60 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_61_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_61 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_63_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_63 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_64_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_64 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_66_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_66 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_67_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_67 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_69_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_69 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_70_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_70 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_72_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_72 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_73_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_73 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_75_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_75 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_76_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_76 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_78_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_78 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_79_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_79 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_81_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_81 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_82_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_82 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_84_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_84 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_89_assign_proc : process(icmp_ln156_reg_597)
    begin
                ap_enable_operation_89 <= (icmp_ln156_reg_597 = ap_const_lv1_0);
    end process;


    ap_enable_operation_95_assign_proc : process(icmp_ln156_reg_597_pp0_iter1_reg)
    begin
                ap_enable_operation_95 <= (icmp_ln156_reg_597_pp0_iter1_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state2_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state2_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state3_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state4_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_355_p0 <= bound_fu_355_p00(32 - 1 downto 0);
    bound_fu_355_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vconv_xlim_loc_dout),64));
    bound_fu_355_p1 <= bound_fu_355_p10(32 - 1 downto 0);
    bound_fu_355_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_dout),64));
    bound_fu_355_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_355_p0) * unsigned(bound_fu_355_p1), 64));

    hconv_V_blk_n_assign_proc : process(hconv_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln156_reg_597)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hconv_V_blk_n <= hconv_V_empty_n;
        else 
            hconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hconv_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            hconv_V_read <= ap_const_logic_1;
        else 
            hconv_V_read <= ap_const_logic_0;
        end if; 
    end process;


    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_out_blk_n <= height_out_full_n;
        else 
            height_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    height_out_din <= height_dout;

    height_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_out_write <= ap_const_logic_1;
        else 
            height_out_write <= ap_const_logic_0;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln156_fu_370_p2 <= "1" when (indvar_flatten_reg_314 = bound_reg_592) else "0";
    icmp_ln157_fu_365_p2 <= "1" when (signed(zext_ln157_fu_361_p1) < signed(vconv_xlim_loc_read_reg_587)) else "0";
    icmp_ln169_1_fu_401_p2 <= "1" when (unsigned(col1_0_i_i_i_reg_325) > unsigned(ap_const_lv11_9)) else "0";
    icmp_ln169_fu_395_p2 <= "1" when (unsigned(add_ln156_1_fu_389_p2) > unsigned(ap_const_lv11_9)) else "0";
    linebuf_0_address0 <= linebuf_0_addr_reg_615;

    linebuf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_0_ce0 <= ap_const_logic_1;
        else 
            linebuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_0_we0 <= ap_const_logic_1;
        else 
            linebuf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_1_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_1_address1 <= linebuf_1_addr_reg_620;

    linebuf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_1_ce0 <= ap_const_logic_1;
        else 
            linebuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_1_ce1 <= ap_const_logic_1;
        else 
            linebuf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_1_we1 <= ap_const_logic_1;
        else 
            linebuf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_2_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_2_address1 <= linebuf_2_addr_reg_626;

    linebuf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_2_ce0 <= ap_const_logic_1;
        else 
            linebuf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_2_ce1 <= ap_const_logic_1;
        else 
            linebuf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_2_we1 <= ap_const_logic_1;
        else 
            linebuf_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_3_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_3_address1 <= linebuf_3_addr_reg_632;

    linebuf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_3_ce0 <= ap_const_logic_1;
        else 
            linebuf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_3_ce1 <= ap_const_logic_1;
        else 
            linebuf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_3_we1 <= ap_const_logic_1;
        else 
            linebuf_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_4_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_4_address1 <= linebuf_4_addr_reg_638;

    linebuf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_4_ce0 <= ap_const_logic_1;
        else 
            linebuf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_4_ce1 <= ap_const_logic_1;
        else 
            linebuf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_4_we1 <= ap_const_logic_1;
        else 
            linebuf_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_5_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_5_address1 <= linebuf_5_addr_reg_644;

    linebuf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_5_ce0 <= ap_const_logic_1;
        else 
            linebuf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_5_ce1 <= ap_const_logic_1;
        else 
            linebuf_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_5_we1 <= ap_const_logic_1;
        else 
            linebuf_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_6_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_6_address1 <= linebuf_6_addr_reg_650;

    linebuf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_6_ce0 <= ap_const_logic_1;
        else 
            linebuf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_6_ce1 <= ap_const_logic_1;
        else 
            linebuf_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_6_we1 <= ap_const_logic_1;
        else 
            linebuf_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_7_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_7_address1 <= linebuf_7_addr_reg_656;

    linebuf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_7_ce0 <= ap_const_logic_1;
        else 
            linebuf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_7_ce1 <= ap_const_logic_1;
        else 
            linebuf_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_7_we1 <= ap_const_logic_1;
        else 
            linebuf_7_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_8_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_8_address1 <= linebuf_8_addr_reg_662;

    linebuf_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_8_ce0 <= ap_const_logic_1;
        else 
            linebuf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_8_ce1 <= ap_const_logic_1;
        else 
            linebuf_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_8_we1 <= ap_const_logic_1;
        else 
            linebuf_8_we1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_9_address0 <= zext_ln164_fu_423_p1(11 - 1 downto 0);
    linebuf_9_address1 <= linebuf_9_addr_reg_668;

    linebuf_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_9_ce0 <= ap_const_logic_1;
        else 
            linebuf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_9_ce1 <= ap_const_logic_1;
        else 
            linebuf_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_9_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln156_reg_597, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln156_reg_597 = ap_const_lv1_0))) then 
            linebuf_9_we1 <= ap_const_logic_1;
        else 
            linebuf_9_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln165_1_fu_449_p1 <= linebuf_2_q0;
    mul_ln165_1_fu_449_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_10A) * signed(mul_ln165_1_fu_449_p1))), 32));
    mul_ln165_2_fu_455_p1 <= linebuf_3_q0;
    mul_ln165_2_fu_455_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1F2) * signed(mul_ln165_2_fu_455_p1))), 32));
    mul_ln165_3_fu_461_p1 <= linebuf_4_q0;
    mul_ln165_3_fu_461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_2D4) * signed(mul_ln165_3_fu_461_p1))), 32));
    mul_ln165_4_fu_467_p1 <= linebuf_5_q0;
    mul_ln165_4_fu_467_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_335) * signed(mul_ln165_4_fu_467_p1))), 32));
    mul_ln165_5_fu_473_p1 <= linebuf_6_q0;
    mul_ln165_5_fu_473_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_2D4) * signed(mul_ln165_5_fu_473_p1))), 32));
    mul_ln165_6_fu_479_p1 <= linebuf_7_q0;
    mul_ln165_6_fu_479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1F2) * signed(mul_ln165_6_fu_479_p1))), 32));
    mul_ln165_7_fu_485_p1 <= linebuf_8_q0;
    mul_ln165_7_fu_485_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_10A) * signed(mul_ln165_7_fu_485_p1))), 32));
    mul_ln165_8_fu_491_p1 <= linebuf_9_q0;
    mul_ln165_8_fu_491_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_6F) * signed(mul_ln165_8_fu_491_p1))), 32));
    mul_ln165_fu_443_p1 <= linebuf_1_q0;
    mul_ln165_fu_443_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_6F) * signed(mul_ln165_fu_443_p1))), 32));
    row_fu_437_p2 <= std_logic_vector(unsigned(select_ln156_fu_381_p3) + unsigned(ap_const_lv11_1));
    select_ln156_1_fu_407_p3 <= 
        icmp_ln169_1_fu_401_p2 when (icmp_ln157_fu_365_p2(0) = '1') else 
        icmp_ln169_fu_395_p2;
    select_ln156_2_fu_415_p3 <= 
        col1_0_i_i_i_reg_325 when (icmp_ln157_fu_365_p2(0) = '1') else 
        add_ln156_1_fu_389_p2;
    select_ln156_fu_381_p3 <= 
        row2_0_i_i_i_reg_336 when (icmp_ln157_fu_365_p2(0) = '1') else 
        ap_const_lv11_0;
    shl_ln165_1_fu_527_p2 <= std_logic_vector(shift_left(unsigned(linebuf_0_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln165_2_fu_533_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_679),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln165_3_fu_538_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_679),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln165_fu_521_p2 <= std_logic_vector(shift_left(unsigned(linebuf_0_q0),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));

    vconv_V_blk_n_assign_proc : process(vconv_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, select_ln156_1_reg_606_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            vconv_V_blk_n <= vconv_V_full_n;
        else 
            vconv_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_V_din <= std_logic_vector(unsigned(add_ln165_10_fu_575_p2) + unsigned(add_ln165_4_fu_565_p2));

    vconv_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, select_ln156_1_reg_606_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln156_1_reg_606_pp0_iter1_reg = ap_const_lv1_1))) then 
            vconv_V_write <= ap_const_logic_1;
        else 
            vconv_V_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_blk_n <= vconv_xlim_loc_empty_n;
        else 
            vconv_xlim_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_xlim_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_blk_n <= vconv_xlim_loc_out_full_n;
        else 
            vconv_xlim_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_xlim_loc_out_din <= vconv_xlim_loc_dout;

    vconv_xlim_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_write <= ap_const_logic_1;
        else 
            vconv_xlim_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n, vconv_xlim_loc_empty_n, height_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (vconv_xlim_loc_out_full_n = ap_const_logic_0) or (height_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_read <= ap_const_logic_1;
        else 
            vconv_xlim_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln157_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row2_0_i_i_i_reg_336),32));
    zext_ln164_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln156_fu_381_p3),64));
end behav;
