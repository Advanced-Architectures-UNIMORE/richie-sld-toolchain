// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_HConvH_proc6_HH_
#define _Loop_HConvH_proc6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_HConvH_proc6 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > height_dout;
    sc_in< sc_logic > height_empty_n;
    sc_out< sc_logic > height_read;
    sc_in< sc_lv<32> > width_dout;
    sc_in< sc_logic > width_empty_n;
    sc_out< sc_logic > width_read;
    sc_in< sc_lv<32> > src_V_TDATA;
    sc_in< sc_logic > src_V_TVALID;
    sc_out< sc_logic > src_V_TREADY;
    sc_out< sc_lv<32> > hconv_V_din;
    sc_in< sc_logic > hconv_V_full_n;
    sc_out< sc_logic > hconv_V_write;


    // Module declarations
    Loop_HConvH_proc6(sc_module_name name);
    SC_HAS_PROCESS(Loop_HConvH_proc6);

    ~Loop_HConvH_proc6();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_src_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > height_blk_n;
    sc_signal< sc_logic > width_blk_n;
    sc_signal< sc_logic > src_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln139_fu_216_p2;
    sc_signal< sc_logic > hconv_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln149_reg_543;
    sc_signal< sc_lv<64> > indvar_flatten_reg_141;
    sc_signal< sc_lv<11> > row_0_i_i_reg_152;
    sc_signal< sc_lv<32> > width_read_reg_509;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > bound_fu_171_p2;
    sc_signal< sc_lv<64> > bound_reg_514;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > add_ln139_fu_221_p2;
    sc_signal< sc_lv<32> > add_ln147_1_fu_367_p2;
    sc_signal< sc_lv<32> > add_ln147_1_reg_528;
    sc_signal< sc_lv<32> > add_ln147_3_fu_379_p2;
    sc_signal< sc_lv<32> > add_ln147_3_reg_533;
    sc_signal< sc_lv<32> > add_ln147_10_fu_415_p2;
    sc_signal< sc_lv<32> > add_ln147_10_reg_538;
    sc_signal< sc_lv<1> > icmp_ln149_fu_421_p2;
    sc_signal< sc_lv<11> > row_fu_432_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<32> > hwin_1_1_i_fu_76;
    sc_signal< sc_lv<32> > hwin_1_fu_80;
    sc_signal< sc_lv<32> > hwin_2_fu_84;
    sc_signal< sc_lv<32> > hwin_3_fu_88;
    sc_signal< sc_lv<32> > hwin_4_fu_92;
    sc_signal< sc_lv<32> > hwin_5_fu_96;
    sc_signal< sc_lv<32> > hwin_6_fu_100;
    sc_signal< sc_lv<32> > hwin_7_fu_104;
    sc_signal< sc_lv<32> > hwin_8_fu_108;
    sc_signal< sc_lv<32> > hwin_9_fu_112;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bound_fu_171_p0;
    sc_signal< sc_lv<32> > bound_fu_171_p1;
    sc_signal< sc_lv<32> > zext_ln140_fu_207_p1;
    sc_signal< sc_lv<1> > icmp_ln140_fu_211_p2;
    sc_signal< sc_lv<32> > mul_ln147_fu_295_p1;
    sc_signal< sc_lv<32> > mul_ln147_1_fu_301_p1;
    sc_signal< sc_lv<32> > mul_ln147_2_fu_307_p1;
    sc_signal< sc_lv<32> > mul_ln147_3_fu_313_p1;
    sc_signal< sc_lv<32> > mul_ln147_4_fu_319_p1;
    sc_signal< sc_lv<32> > mul_ln147_5_fu_325_p1;
    sc_signal< sc_lv<32> > mul_ln147_6_fu_331_p1;
    sc_signal< sc_lv<32> > mul_ln147_7_fu_337_p1;
    sc_signal< sc_lv<32> > mul_ln147_8_fu_343_p1;
    sc_signal< sc_lv<32> > shl_ln147_2_fu_349_p2;
    sc_signal< sc_lv<32> > shl_ln147_fu_283_p2;
    sc_signal< sc_lv<32> > add_ln147_fu_361_p2;
    sc_signal< sc_lv<32> > shl_ln147_3_fu_355_p2;
    sc_signal< sc_lv<32> > mul_ln147_fu_295_p2;
    sc_signal< sc_lv<32> > mul_ln147_1_fu_301_p2;
    sc_signal< sc_lv<32> > add_ln147_2_fu_373_p2;
    sc_signal< sc_lv<32> > shl_ln147_1_fu_289_p2;
    sc_signal< sc_lv<32> > mul_ln147_3_fu_313_p2;
    sc_signal< sc_lv<32> > mul_ln147_4_fu_319_p2;
    sc_signal< sc_lv<32> > add_ln147_5_fu_385_p2;
    sc_signal< sc_lv<32> > mul_ln147_2_fu_307_p2;
    sc_signal< sc_lv<32> > mul_ln147_5_fu_325_p2;
    sc_signal< sc_lv<32> > mul_ln147_6_fu_331_p2;
    sc_signal< sc_lv<32> > mul_ln147_7_fu_337_p2;
    sc_signal< sc_lv<32> > mul_ln147_8_fu_343_p2;
    sc_signal< sc_lv<32> > add_ln147_8_fu_403_p2;
    sc_signal< sc_lv<32> > add_ln147_7_fu_397_p2;
    sc_signal< sc_lv<32> > add_ln147_9_fu_409_p2;
    sc_signal< sc_lv<32> > add_ln147_6_fu_391_p2;
    sc_signal< sc_lv<11> > select_ln140_fu_275_p3;
    sc_signal< sc_lv<32> > add_ln147_4_fu_438_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_src_V_U_apdone_blk;
    sc_signal< sc_lv<32> > src_V_TDATA_int;
    sc_signal< sc_logic > src_V_TVALID_int;
    sc_signal< sc_logic > src_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_src_V_U_ack_in;
    sc_signal< sc_lv<64> > bound_fu_171_p00;
    sc_signal< sc_lv<64> > bound_fu_171_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6F;
    static const sc_lv<32> ap_const_lv32_10A;
    static const sc_lv<32> ap_const_lv32_1F2;
    static const sc_lv<32> ap_const_lv32_2D4;
    static const sc_lv<32> ap_const_lv32_335;
    static const sc_lv<11> ap_const_lv11_9;
    static const sc_lv<11> ap_const_lv11_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln139_fu_221_p2();
    void thread_add_ln147_10_fu_415_p2();
    void thread_add_ln147_1_fu_367_p2();
    void thread_add_ln147_2_fu_373_p2();
    void thread_add_ln147_3_fu_379_p2();
    void thread_add_ln147_4_fu_438_p2();
    void thread_add_ln147_5_fu_385_p2();
    void thread_add_ln147_6_fu_391_p2();
    void thread_add_ln147_7_fu_397_p2();
    void thread_add_ln147_8_fu_403_p2();
    void thread_add_ln147_9_fu_409_p2();
    void thread_add_ln147_fu_361_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_171_p0();
    void thread_bound_fu_171_p00();
    void thread_bound_fu_171_p1();
    void thread_bound_fu_171_p10();
    void thread_bound_fu_171_p2();
    void thread_hconv_V_blk_n();
    void thread_hconv_V_din();
    void thread_hconv_V_write();
    void thread_height_blk_n();
    void thread_height_read();
    void thread_icmp_ln139_fu_216_p2();
    void thread_icmp_ln140_fu_211_p2();
    void thread_icmp_ln149_fu_421_p2();
    void thread_internal_ap_ready();
    void thread_mul_ln147_1_fu_301_p1();
    void thread_mul_ln147_1_fu_301_p2();
    void thread_mul_ln147_2_fu_307_p1();
    void thread_mul_ln147_2_fu_307_p2();
    void thread_mul_ln147_3_fu_313_p1();
    void thread_mul_ln147_3_fu_313_p2();
    void thread_mul_ln147_4_fu_319_p1();
    void thread_mul_ln147_4_fu_319_p2();
    void thread_mul_ln147_5_fu_325_p1();
    void thread_mul_ln147_5_fu_325_p2();
    void thread_mul_ln147_6_fu_331_p1();
    void thread_mul_ln147_6_fu_331_p2();
    void thread_mul_ln147_7_fu_337_p1();
    void thread_mul_ln147_7_fu_337_p2();
    void thread_mul_ln147_8_fu_343_p1();
    void thread_mul_ln147_8_fu_343_p2();
    void thread_mul_ln147_fu_295_p1();
    void thread_mul_ln147_fu_295_p2();
    void thread_real_start();
    void thread_row_fu_432_p2();
    void thread_select_ln140_fu_275_p3();
    void thread_shl_ln147_1_fu_289_p2();
    void thread_shl_ln147_2_fu_349_p2();
    void thread_shl_ln147_3_fu_355_p2();
    void thread_shl_ln147_fu_283_p2();
    void thread_src_V_TDATA_blk_n();
    void thread_src_V_TREADY();
    void thread_src_V_TREADY_int();
    void thread_start_out();
    void thread_start_write();
    void thread_width_blk_n();
    void thread_width_read();
    void thread_zext_ln140_fu_207_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
