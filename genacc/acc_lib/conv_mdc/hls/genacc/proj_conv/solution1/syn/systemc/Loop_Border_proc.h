// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_Border_proc_HH_
#define _Loop_Border_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_Border_proc_lbW.h"

namespace ap_rtl {

struct Loop_Border_proc : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > width_dout;
    sc_in< sc_logic > width_empty_n;
    sc_out< sc_logic > width_read;
    sc_in< sc_lv<32> > height_dout;
    sc_in< sc_logic > height_empty_n;
    sc_out< sc_logic > height_read;
    sc_out< sc_lv<32> > dst_V_TDATA;
    sc_out< sc_logic > dst_V_TVALID;
    sc_in< sc_logic > dst_V_TREADY;
    sc_in< sc_lv<32> > vconv_xlim_loc_dout;
    sc_in< sc_logic > vconv_xlim_loc_empty_n;
    sc_out< sc_logic > vconv_xlim_loc_read;
    sc_in< sc_lv<32> > vconv_V_dout;
    sc_in< sc_logic > vconv_V_empty_n;
    sc_out< sc_logic > vconv_V_read;


    // Module declarations
    Loop_Border_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_Border_proc);

    ~Loop_Border_proc();

    sc_trace_file* mVcdFile;

    Loop_Border_proc_lbW* borderbuf_U;
    regslice_both<32>* regslice_both_dst_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > width_blk_n;
    sc_signal< sc_logic > height_blk_n;
    sc_signal< sc_logic > dst_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln175_reg_501;
    sc_signal< sc_lv<1> > icmp_ln175_reg_501_pp0_iter2_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > icmp_ln175_reg_501_pp0_iter3_reg;
    sc_signal< sc_logic > vconv_xlim_loc_blk_n;
    sc_signal< sc_logic > vconv_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > select_ln175_1_reg_518;
    sc_signal< sc_lv<1> > icmp_ln182_reg_527;
    sc_signal< sc_lv<64> > indvar_flatten_reg_149;
    sc_signal< sc_lv<11> > i6_0_i_i_i_reg_160;
    sc_signal< sc_lv<11> > j_0_i_i_i_reg_171;
    sc_signal< sc_lv<32> > width_read_reg_470;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > vconv_xlim_loc_read_reg_475;
    sc_signal< sc_lv<32> > add_ln189_fu_182_p2;
    sc_signal< sc_lv<32> > add_ln189_reg_480;
    sc_signal< sc_lv<32> > add_ln196_fu_188_p2;
    sc_signal< sc_lv<32> > add_ln196_reg_485;
    sc_signal< sc_lv<32> > add_ln179_fu_194_p2;
    sc_signal< sc_lv<32> > add_ln179_reg_490;
    sc_signal< sc_lv<64> > bound_fu_208_p2;
    sc_signal< sc_lv<64> > bound_reg_496;
    sc_signal< sc_lv<1> > icmp_ln175_fu_256_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op58_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln175_reg_501_pp0_iter1_reg;
    sc_signal< sc_lv<64> > add_ln175_fu_261_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<11> > select_ln175_fu_277_p3;
    sc_signal< sc_lv<11> > select_ln175_reg_510;
    sc_signal< sc_lv<11> > select_ln175_reg_510_pp0_iter1_reg;
    sc_signal< sc_lv<1> > select_ln175_1_fu_314_p3;
    sc_signal< sc_lv<1> > select_ln175_1_reg_518_pp0_iter1_reg;
    sc_signal< sc_lv<11> > select_ln175_2_fu_326_p3;
    sc_signal< sc_lv<1> > icmp_ln182_fu_334_p2;
    sc_signal< sc_lv<1> > icmp_ln189_fu_339_p2;
    sc_signal< sc_lv<1> > icmp_ln189_reg_531;
    sc_signal< sc_lv<1> > icmp_ln189_reg_531_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln196_fu_344_p2;
    sc_signal< sc_lv<1> > icmp_ln196_reg_536;
    sc_signal< sc_lv<1> > icmp_ln196_reg_536_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln196_reg_536_pp0_iter2_reg;
    sc_signal< sc_lv<11> > j_fu_349_p2;
    sc_signal< sc_lv<1> > icmp_ln194_fu_403_p2;
    sc_signal< sc_lv<1> > icmp_ln194_reg_546;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<11> > borderbuf_address0;
    sc_signal< sc_logic > borderbuf_ce0;
    sc_signal< sc_logic > borderbuf_we0;
    sc_signal< sc_lv<11> > borderbuf_address1;
    sc_signal< sc_logic > borderbuf_ce1;
    sc_signal< sc_lv<32> > borderbuf_q1;
    sc_signal< sc_lv<64> > zext_ln184_fu_355_p1;
    sc_signal< sc_lv<64> > zext_ln199_fu_413_p1;
    sc_signal< sc_lv<32> > r_edge_pix_fu_78;
    sc_signal< sc_lv<32> > pix_out_fu_82;
    sc_signal< sc_lv<32> > l_edge_pix_fu_386_p3;
    sc_signal< sc_lv<32> > pix_out_1_fu_86;
    sc_signal< sc_lv<32> > select_ln186_fu_378_p3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > bound_fu_208_p0;
    sc_signal< sc_lv<32> > bound_fu_208_p1;
    sc_signal< sc_lv<32> > zext_ln175_1_fu_214_p1;
    sc_signal< sc_lv<1> > icmp_ln179_2_fu_230_p2;
    sc_signal< sc_lv<1> > icmp_ln179_1_fu_224_p2;
    sc_signal< sc_lv<1> > icmp_ln179_fu_218_p2;
    sc_signal< sc_lv<1> > and_ln179_fu_235_p2;
    sc_signal< sc_lv<32> > zext_ln176_fu_247_p1;
    sc_signal< sc_lv<11> > add_ln175_1_fu_267_p2;
    sc_signal< sc_lv<1> > icmp_ln176_fu_251_p2;
    sc_signal< sc_lv<32> > zext_ln175_fu_273_p1;
    sc_signal< sc_lv<1> > icmp_ln179_5_fu_297_p2;
    sc_signal< sc_lv<1> > icmp_ln179_4_fu_291_p2;
    sc_signal< sc_lv<1> > icmp_ln179_3_fu_285_p2;
    sc_signal< sc_lv<1> > and_ln179_1_fu_302_p2;
    sc_signal< sc_lv<1> > or_ln179_fu_241_p2;
    sc_signal< sc_lv<1> > or_ln179_1_fu_308_p2;
    sc_signal< sc_lv<32> > zext_ln175_2_fu_322_p1;
    sc_signal< sc_lv<1> > icmp_ln186_fu_373_p2;
    sc_signal< sc_lv<11> > add_ln199_fu_408_p2;
    sc_signal< sc_lv<1> > xor_ln194_fu_424_p2;
    sc_signal< sc_lv<1> > and_ln196_fu_429_p2;
    sc_signal< sc_lv<32> > pix_out_8_fu_434_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > regslice_both_dst_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > dst_V_TDATA_int;
    sc_signal< sc_logic > dst_V_TVALID_int;
    sc_signal< sc_logic > dst_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_dst_V_U_vld_out;
    sc_signal< sc_lv<64> > bound_fu_208_p00;
    sc_signal< sc_lv<64> > bound_fu_208_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFF5;
    static const sc_lv<32> ap_const_lv32_FFFFFFFA;
    static const sc_lv<32> ap_const_lv32_FFFFFFFB;
    static const sc_lv<11> ap_const_lv11_5;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<11> ap_const_lv11_6;
    static const sc_lv<11> ap_const_lv11_7FB;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln175_1_fu_267_p2();
    void thread_add_ln175_fu_261_p2();
    void thread_add_ln179_fu_194_p2();
    void thread_add_ln189_fu_182_p2();
    void thread_add_ln196_fu_188_p2();
    void thread_add_ln199_fu_408_p2();
    void thread_and_ln179_1_fu_302_p2();
    void thread_and_ln179_fu_235_p2();
    void thread_and_ln196_fu_429_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_io();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op58_read_state3();
    void thread_ap_ready();
    void thread_borderbuf_address0();
    void thread_borderbuf_address1();
    void thread_borderbuf_ce0();
    void thread_borderbuf_ce1();
    void thread_borderbuf_we0();
    void thread_bound_fu_208_p0();
    void thread_bound_fu_208_p00();
    void thread_bound_fu_208_p1();
    void thread_bound_fu_208_p10();
    void thread_bound_fu_208_p2();
    void thread_dst_V_TDATA_blk_n();
    void thread_dst_V_TDATA_int();
    void thread_dst_V_TVALID();
    void thread_dst_V_TVALID_int();
    void thread_height_blk_n();
    void thread_height_read();
    void thread_icmp_ln175_fu_256_p2();
    void thread_icmp_ln176_fu_251_p2();
    void thread_icmp_ln179_1_fu_224_p2();
    void thread_icmp_ln179_2_fu_230_p2();
    void thread_icmp_ln179_3_fu_285_p2();
    void thread_icmp_ln179_4_fu_291_p2();
    void thread_icmp_ln179_5_fu_297_p2();
    void thread_icmp_ln179_fu_218_p2();
    void thread_icmp_ln182_fu_334_p2();
    void thread_icmp_ln186_fu_373_p2();
    void thread_icmp_ln189_fu_339_p2();
    void thread_icmp_ln194_fu_403_p2();
    void thread_icmp_ln196_fu_344_p2();
    void thread_j_fu_349_p2();
    void thread_l_edge_pix_fu_386_p3();
    void thread_or_ln179_1_fu_308_p2();
    void thread_or_ln179_fu_241_p2();
    void thread_pix_out_8_fu_434_p3();
    void thread_select_ln175_1_fu_314_p3();
    void thread_select_ln175_2_fu_326_p3();
    void thread_select_ln175_fu_277_p3();
    void thread_select_ln186_fu_378_p3();
    void thread_vconv_V_blk_n();
    void thread_vconv_V_read();
    void thread_vconv_xlim_loc_blk_n();
    void thread_vconv_xlim_loc_read();
    void thread_width_blk_n();
    void thread_width_read();
    void thread_xor_ln194_fu_424_p2();
    void thread_zext_ln175_1_fu_214_p1();
    void thread_zext_ln175_2_fu_322_p1();
    void thread_zext_ln175_fu_273_p1();
    void thread_zext_ln176_fu_247_p1();
    void thread_zext_ln184_fu_355_p1();
    void thread_zext_ln199_fu_413_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
