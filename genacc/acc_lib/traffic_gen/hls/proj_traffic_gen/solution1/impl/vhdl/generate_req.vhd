-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generate_req is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_V_TVALID : IN STD_LOGIC;
    stream_in_V_TREADY : OUT STD_LOGIC;
    stream_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_V_TVALID : OUT STD_LOGIC;
    stream_out_V_TREADY : IN STD_LOGIC;
    n_trans : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of generate_req is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln39_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln44_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_0_reg_105 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_116_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_152 : STD_LOGIC_VECTOR (10 downto 0);
    signal ii_fu_125_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal icmp_ln44_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal jj_fu_141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal local_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_ce0 : STD_LOGIC;
    signal local_we0 : STD_LOGIC;
    signal local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_0_reg_94 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_fu_131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component generate_req_local IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    local_U : component generate_req_local
    generic map (
        DataWidth => 32,
        AddressRange => 1080,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_address0,
        ce0 => local_ce0,
        we0 => local_we0,
        d0 => stream_in_V_TDATA,
        q0 => local_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii_0_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_0_reg_94 <= ap_const_lv11_0;
            elsif ((not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_0_reg_94 <= ii_fu_125_p2;
            end if; 
        end if;
    end process;

    jj_0_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                jj_0_reg_105 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln44_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                jj_0_reg_105 <= jj_fu_141_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_152 <= empty_fu_116_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln44_reg_166 <= icmp_ln44_fu_136_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_TVALID, ap_CS_fsm_state2, icmp_ln39_fu_120_p2, icmp_ln44_fu_136_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (icmp_ln39_fu_120_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln44_fu_136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln44_fu_136_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_block_state5_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_state2_assign_proc : process(stream_in_V_TVALID, icmp_ln39_fu_120_p2)
    begin
                ap_block_state2 <= ((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(stream_out_V_TREADY, icmp_ln44_reg_166)
    begin
                ap_block_state5_io <= ((icmp_ln44_reg_166 = ap_const_lv1_0) and (stream_out_V_TREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln44_fu_136_p2)
    begin
        if ((icmp_ln44_fu_136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_116_p1 <= n_trans(11 - 1 downto 0);
    icmp_ln39_fu_120_p2 <= "1" when (ii_0_reg_94 = empty_reg_152) else "0";
    icmp_ln44_fu_136_p2 <= "1" when (jj_0_reg_105 = empty_reg_152) else "0";
    ii_fu_125_p2 <= std_logic_vector(unsigned(ii_0_reg_94) + unsigned(ap_const_lv11_1));
    jj_fu_141_p2 <= std_logic_vector(unsigned(jj_0_reg_105) + unsigned(ap_const_lv11_1));

    local_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln41_fu_131_p1, zext_ln46_fu_147_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            local_address0 <= zext_ln46_fu_147_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            local_address0 <= zext_ln41_fu_131_p1(11 - 1 downto 0);
        else 
            local_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    local_ce0_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state2, icmp_ln39_fu_120_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            local_ce0 <= ap_const_logic_1;
        else 
            local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_we0_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state2, icmp_ln39_fu_120_p2)
    begin
        if ((not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            local_we0 <= ap_const_logic_1;
        else 
            local_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_TDATA_blk_n_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state2, icmp_ln39_fu_120_p2)
    begin
        if (((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_in_V_TDATA_blk_n <= stream_in_V_TVALID;
        else 
            stream_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_V_TREADY_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state2, icmp_ln39_fu_120_p2)
    begin
        if ((not(((icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (stream_in_V_TVALID = ap_const_logic_0))) and (icmp_ln39_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stream_in_V_TREADY <= ap_const_logic_1;
        else 
            stream_in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_TDATA <= local_q0;

    stream_out_V_TDATA_blk_n_assign_proc : process(stream_out_V_TREADY, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln44_reg_166)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln44_reg_166 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_out_V_TDATA_blk_n <= stream_out_V_TREADY;
        else 
            stream_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_out_V_TVALID_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln44_reg_166, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln44_reg_166 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_out_V_TVALID <= ap_const_logic_1;
        else 
            stream_out_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln41_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_0_reg_94),64));
    zext_ln46_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_0_reg_105),64));
end behav;
