// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _traffic_gen_HH_
#define _traffic_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "generate_req.h"

namespace ap_rtl {

struct traffic_gen : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > stream_in_V_TDATA;
    sc_in< sc_logic > stream_in_V_TVALID;
    sc_out< sc_logic > stream_in_V_TREADY;
    sc_out< sc_lv<32> > stream_out_V_TDATA;
    sc_out< sc_logic > stream_out_V_TVALID;
    sc_in< sc_logic > stream_out_V_TREADY;
    sc_in< sc_lv<32> > n_trans;
    sc_in< sc_lv<32> > prob_req;


    // Module declarations
    traffic_gen(sc_module_name name);
    SC_HAS_PROCESS(traffic_gen);

    ~traffic_gen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    generate_req* grp_generate_req_fu_36;
    regslice_both<32>* regslice_both_stream_in_V_U;
    regslice_both<32>* regslice_both_stream_out_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_generate_req_fu_36_ap_start;
    sc_signal< sc_logic > grp_generate_req_fu_36_ap_done;
    sc_signal< sc_logic > grp_generate_req_fu_36_ap_idle;
    sc_signal< sc_logic > grp_generate_req_fu_36_ap_ready;
    sc_signal< sc_logic > grp_generate_req_fu_36_stream_in_V_TREADY;
    sc_signal< sc_lv<32> > grp_generate_req_fu_36_stream_out_V_TDATA;
    sc_signal< sc_logic > grp_generate_req_fu_36_stream_out_V_TVALID;
    sc_signal< sc_logic > grp_generate_req_fu_36_stream_out_V_TREADY;
    sc_signal< sc_logic > grp_generate_req_fu_36_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > regslice_both_stream_out_V_U_apdone_blk;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_stream_in_V_U_apdone_blk;
    sc_signal< sc_lv<32> > stream_in_V_TDATA_int;
    sc_signal< sc_logic > stream_in_V_TVALID_int;
    sc_signal< sc_logic > stream_in_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_stream_in_V_U_ack_in;
    sc_signal< sc_logic > stream_out_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_stream_out_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_generate_req_fu_36_ap_start();
    void thread_grp_generate_req_fu_36_stream_out_V_TREADY();
    void thread_stream_in_V_TREADY();
    void thread_stream_in_V_TREADY_int();
    void thread_stream_out_V_TVALID();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
