// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _generate_req_HH_
#define _generate_req_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "generate_req_local.h"

namespace ap_rtl {

struct generate_req : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > stream_in_V_TDATA;
    sc_in< sc_logic > stream_in_V_TVALID;
    sc_out< sc_logic > stream_in_V_TREADY;
    sc_out< sc_lv<32> > stream_out_V_TDATA;
    sc_out< sc_logic > stream_out_V_TVALID;
    sc_in< sc_logic > stream_out_V_TREADY;
    sc_in< sc_lv<32> > n_trans;


    // Module declarations
    generate_req(sc_module_name name);
    SC_HAS_PROCESS(generate_req);

    ~generate_req();

    sc_trace_file* mVcdFile;

    generate_req_local* local_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > stream_in_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln39_fu_120_p2;
    sc_signal< sc_logic > stream_out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln44_reg_166;
    sc_signal< sc_lv<11> > jj_0_reg_105;
    sc_signal< sc_lv<11> > empty_fu_116_p1;
    sc_signal< sc_lv<11> > empty_reg_152;
    sc_signal< sc_lv<11> > ii_fu_125_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > icmp_ln44_fu_136_p2;
    sc_signal< bool > ap_block_state4_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<11> > jj_fu_141_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state4;
    sc_signal< sc_lv<11> > local_address0;
    sc_signal< sc_logic > local_ce0;
    sc_signal< sc_logic > local_we0;
    sc_signal< sc_lv<32> > local_q0;
    sc_signal< sc_lv<11> > ii_0_reg_94;
    sc_signal< sc_lv<64> > zext_ln41_fu_131_p1;
    sc_signal< sc_lv<64> > zext_ln46_fu_147_p1;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state2();
    void thread_ap_block_state4_pp1_stage0_iter0();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_empty_fu_116_p1();
    void thread_icmp_ln39_fu_120_p2();
    void thread_icmp_ln44_fu_136_p2();
    void thread_ii_fu_125_p2();
    void thread_jj_fu_141_p2();
    void thread_local_address0();
    void thread_local_ce0();
    void thread_local_we0();
    void thread_stream_in_V_TDATA_blk_n();
    void thread_stream_in_V_TREADY();
    void thread_stream_out_V_TDATA();
    void thread_stream_out_V_TDATA_blk_n();
    void thread_stream_out_V_TVALID();
    void thread_zext_ln41_fu_131_p1();
    void thread_zext_ln46_fu_147_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
