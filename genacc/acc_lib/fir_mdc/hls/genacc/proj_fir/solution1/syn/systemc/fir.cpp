// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> fir::ap_ST_fsm_state1 = "1";
const sc_lv<4> fir::ap_ST_fsm_state2 = "10";
const sc_lv<4> fir::ap_ST_fsm_state3 = "100";
const sc_lv<4> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_exec_1_fu_105 = new exec_1("grp_exec_1_fu_105");
    grp_exec_1_fu_105->ap_clk(ap_clk);
    grp_exec_1_fu_105->ap_rst(ap_rst_n_inv);
    grp_exec_1_fu_105->ap_start(grp_exec_1_fu_105_ap_start);
    grp_exec_1_fu_105->ap_done(grp_exec_1_fu_105_ap_done);
    grp_exec_1_fu_105->ap_idle(grp_exec_1_fu_105_ap_idle);
    grp_exec_1_fu_105->ap_ready(grp_exec_1_fu_105_ap_ready);
    grp_exec_1_fu_105->x_in_V_TDATA(x_V_TDATA_int);
    grp_exec_1_fu_105->x_in_V_TVALID(x_V_TVALID_int);
    grp_exec_1_fu_105->x_in_V_TREADY(grp_exec_1_fu_105_x_in_V_TREADY);
    grp_exec_1_fu_105->h_0_V_read(coeff_0_V);
    grp_exec_1_fu_105->ap_return_0(grp_exec_1_fu_105_ap_return_0);
    grp_exec_1_fu_105->ap_return_1(grp_exec_1_fu_105_ap_return_1);
    grp_exec_1_fu_105->x_in_V_TDATA_blk_n(grp_exec_1_fu_105_x_in_V_TDATA_blk_n);
    grp_exec_1_fu_105->ap_ce(grp_exec_1_fu_105_ap_ce);
    fir_mul_32s_32s_3bkb_U5 = new fir_mul_32s_32s_3bkb<1,2,32,32,32>("fir_mul_32s_32s_3bkb_U5");
    fir_mul_32s_32s_3bkb_U5->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U5->reset(ap_rst_n_inv);
    fir_mul_32s_32s_3bkb_U5->din0(s_x1_V_1);
    fir_mul_32s_32s_3bkb_U5->din1(coeff_1_V);
    fir_mul_32s_32s_3bkb_U5->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U5->dout(grp_fu_125_p2);
    fir_mul_32s_32s_3bkb_U6 = new fir_mul_32s_32s_3bkb<1,2,32,32,32>("fir_mul_32s_32s_3bkb_U6");
    fir_mul_32s_32s_3bkb_U6->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U6->reset(ap_rst_n_inv);
    fir_mul_32s_32s_3bkb_U6->din0(s_x1_V_2);
    fir_mul_32s_32s_3bkb_U6->din1(coeff_2_V);
    fir_mul_32s_32s_3bkb_U6->ce(grp_fu_139_ce);
    fir_mul_32s_32s_3bkb_U6->dout(grp_fu_139_p2);
    fir_mul_32s_32s_3bkb_U7 = new fir_mul_32s_32s_3bkb<1,2,32,32,32>("fir_mul_32s_32s_3bkb_U7");
    fir_mul_32s_32s_3bkb_U7->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U7->reset(ap_rst_n_inv);
    fir_mul_32s_32s_3bkb_U7->din0(s_x1_V_3);
    fir_mul_32s_32s_3bkb_U7->din1(coeff_3_V);
    fir_mul_32s_32s_3bkb_U7->ce(grp_fu_254_ce);
    fir_mul_32s_32s_3bkb_U7->dout(grp_fu_254_p2);
    regslice_both_x_V_U = new regslice_both<32>("regslice_both_x_V_U");
    regslice_both_x_V_U->ap_clk(ap_clk);
    regslice_both_x_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_x_V_U->data_in(x_V_TDATA);
    regslice_both_x_V_U->vld_in(x_V_TVALID);
    regslice_both_x_V_U->ack_in(regslice_both_x_V_U_ack_in);
    regslice_both_x_V_U->data_out(x_V_TDATA_int);
    regslice_both_x_V_U->vld_out(x_V_TVALID_int);
    regslice_both_x_V_U->ack_out(x_V_TREADY_int);
    regslice_both_x_V_U->apdone_blk(regslice_both_x_V_U_apdone_blk);
    regslice_both_y_V_U = new regslice_both<32>("regslice_both_y_V_U");
    regslice_both_y_V_U->ap_clk(ap_clk);
    regslice_both_y_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_y_V_U->data_in(s_y1_V_3);
    regslice_both_y_V_U->vld_in(y_V_TVALID_int);
    regslice_both_y_V_U->ack_in(y_V_TREADY_int);
    regslice_both_y_V_U->data_out(y_V_TDATA);
    regslice_both_y_V_U->vld_out(regslice_both_y_V_U_vld_out);
    regslice_both_y_V_U->ack_out(y_V_TREADY);
    regslice_both_y_V_U->apdone_blk(regslice_both_y_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln68_1_fu_213_p2);
    sensitive << ( s_y1_V_1 );
    sensitive << ( s_y0_V_2 );

    SC_METHOD(thread_add_ln68_2_fu_248_p2);
    sensitive << ( s_y1_V_2 );
    sensitive << ( s_y0_V_3 );

    SC_METHOD(thread_add_ln68_fu_176_p2);
    sensitive << ( s_y0_V_1 );
    sensitive << ( grp_exec_1_fu_105_ap_return_1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state2);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_exec_1_fu_105_ap_ce);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_V_TREADY_int );

    SC_METHOD(thread_grp_exec_1_fu_105_ap_start);
    sensitive << ( grp_exec_1_fu_105_ap_start_reg );

    SC_METHOD(thread_grp_fu_139_ce);
    sensitive << ( grp_exec_1_fu_105_x_in_V_TDATA_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_V_TREADY_int );

    SC_METHOD(thread_grp_fu_254_ce);
    sensitive << ( grp_exec_1_fu_105_x_in_V_TDATA_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_y_V_U_apdone_blk );
    sensitive << ( y_V_TREADY_int );

    SC_METHOD(thread_x_V_TDATA_blk_n);
    sensitive << ( grp_exec_1_fu_105_x_in_V_TDATA_blk_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_x_V_TREADY);
    sensitive << ( x_V_TVALID );
    sensitive << ( regslice_both_x_V_U_ack_in );

    SC_METHOD(thread_x_V_TREADY_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_exec_1_fu_105_x_in_V_TREADY );

    SC_METHOD(thread_y_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( y_V_TREADY_int );

    SC_METHOD(thread_y_V_TVALID);
    sensitive << ( regslice_both_y_V_U_vld_out );

    SC_METHOD(thread_y_V_TVALID_int);
    sensitive << ( grp_exec_1_fu_105_x_in_V_TDATA_blk_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( y_V_TREADY_int );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( grp_exec_1_fu_105_x_in_V_TDATA_blk_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( regslice_both_y_V_U_apdone_blk );
    sensitive << ( y_V_TREADY_int );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    s_x_V_1 = "00000000000000000000000000000000";
    s_x1_V_1 = "00000000000000000000000000000000";
    s_y0_V_1 = "00000000000000000000000000000000";
    s_y1_V_1 = "00000000000000000000000000000000";
    s_x_V_2 = "00000000000000000000000000000000";
    s_x1_V_2 = "00000000000000000000000000000000";
    s_y0_V_2 = "00000000000000000000000000000000";
    s_y1_V_2 = "00000000000000000000000000000000";
    s_x_V_3 = "00000000000000000000000000000000";
    s_x1_V_3 = "00000000000000000000000000000000";
    s_y0_V_3 = "00000000000000000000000000000000";
    s_y1_V_3 = "00000000000000000000000000000000";
    ap_CS_fsm = "0001";
    grp_exec_1_fu_105_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, x_V_TDATA, "(port)x_V_TDATA");
    sc_trace(mVcdFile, x_V_TVALID, "(port)x_V_TVALID");
    sc_trace(mVcdFile, x_V_TREADY, "(port)x_V_TREADY");
    sc_trace(mVcdFile, coeff_0_V, "(port)coeff_0_V");
    sc_trace(mVcdFile, coeff_1_V, "(port)coeff_1_V");
    sc_trace(mVcdFile, coeff_2_V, "(port)coeff_2_V");
    sc_trace(mVcdFile, coeff_3_V, "(port)coeff_3_V");
    sc_trace(mVcdFile, y_V_TDATA, "(port)y_V_TDATA");
    sc_trace(mVcdFile, y_V_TVALID, "(port)y_V_TVALID");
    sc_trace(mVcdFile, y_V_TREADY, "(port)y_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, s_x_V_1, "s_x_V_1");
    sc_trace(mVcdFile, s_x1_V_1, "s_x1_V_1");
    sc_trace(mVcdFile, s_y0_V_1, "s_y0_V_1");
    sc_trace(mVcdFile, s_y1_V_1, "s_y1_V_1");
    sc_trace(mVcdFile, s_x_V_2, "s_x_V_2");
    sc_trace(mVcdFile, s_x1_V_2, "s_x1_V_2");
    sc_trace(mVcdFile, s_y0_V_2, "s_y0_V_2");
    sc_trace(mVcdFile, s_y1_V_2, "s_y1_V_2");
    sc_trace(mVcdFile, s_x_V_3, "s_x_V_3");
    sc_trace(mVcdFile, s_x1_V_3, "s_x1_V_3");
    sc_trace(mVcdFile, s_y0_V_3, "s_y0_V_3");
    sc_trace(mVcdFile, s_y1_V_3, "s_y1_V_3");
    sc_trace(mVcdFile, grp_exec_1_fu_105_x_in_V_TDATA_blk_n, "grp_exec_1_fu_105_x_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, x_V_TDATA_blk_n, "x_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, y_V_TDATA_blk_n, "y_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, s_x1_V_1_load_reg_283, "s_x1_V_1_load_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_125_p2, "grp_fu_125_p2");
    sc_trace(mVcdFile, mul_ln68_reg_294, "mul_ln68_reg_294");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, s_x1_V_2_load_reg_299, "s_x1_V_2_load_reg_299");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_start, "grp_exec_1_fu_105_ap_start");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_done, "grp_exec_1_fu_105_ap_done");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_idle, "grp_exec_1_fu_105_ap_idle");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_ready, "grp_exec_1_fu_105_ap_ready");
    sc_trace(mVcdFile, grp_exec_1_fu_105_x_in_V_TREADY, "grp_exec_1_fu_105_x_in_V_TREADY");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_return_0, "grp_exec_1_fu_105_ap_return_0");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_return_1, "grp_exec_1_fu_105_ap_return_1");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_ce, "grp_exec_1_fu_105_ap_ce");
    sc_trace(mVcdFile, grp_exec_1_fu_105_ap_start_reg, "grp_exec_1_fu_105_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state2, "ap_NS_fsm_state2");
    sc_trace(mVcdFile, add_ln68_fu_176_p2, "add_ln68_fu_176_p2");
    sc_trace(mVcdFile, grp_fu_139_p2, "grp_fu_139_p2");
    sc_trace(mVcdFile, add_ln68_1_fu_213_p2, "add_ln68_1_fu_213_p2");
    sc_trace(mVcdFile, grp_fu_254_p2, "grp_fu_254_p2");
    sc_trace(mVcdFile, regslice_both_y_V_U_apdone_blk, "regslice_both_y_V_U_apdone_blk");
    sc_trace(mVcdFile, add_ln68_2_fu_248_p2, "add_ln68_2_fu_248_p2");
    sc_trace(mVcdFile, grp_fu_139_ce, "grp_fu_139_ce");
    sc_trace(mVcdFile, grp_fu_254_ce, "grp_fu_254_ce");
    sc_trace(mVcdFile, regslice_both_x_V_U_apdone_blk, "regslice_both_x_V_U_apdone_blk");
    sc_trace(mVcdFile, x_V_TDATA_int, "x_V_TDATA_int");
    sc_trace(mVcdFile, x_V_TVALID_int, "x_V_TVALID_int");
    sc_trace(mVcdFile, x_V_TREADY_int, "x_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_x_V_U_ack_in, "regslice_both_x_V_U_ack_in");
    sc_trace(mVcdFile, y_V_TVALID_int, "y_V_TVALID_int");
    sc_trace(mVcdFile, y_V_TREADY_int, "y_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_y_V_U_vld_out, "regslice_both_y_V_U_vld_out");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_exec_1_fu_105;
    delete fir_mul_32s_32s_3bkb_U5;
    delete fir_mul_32s_32s_3bkb_U6;
    delete fir_mul_32s_32s_3bkb_U7;
    delete regslice_both_x_V_U;
    delete regslice_both_y_V_U;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_exec_1_fu_105_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state2.read()))) {
            grp_exec_1_fu_105_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_exec_1_fu_105_ap_ready.read())) {
            grp_exec_1_fu_105_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mul_ln68_reg_294 = grp_fu_125_p2.read();
        s_x1_V_2 = s_x_V_2.read();
        s_x1_V_2_load_reg_299 = s_x1_V_2.read();
        s_x_V_2 = s_x1_V_1_load_reg_283.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read())))) {
        s_x1_V_1 = s_x_V_1.read();
        s_x1_V_3 = s_x_V_3.read();
        s_x_V_1 = grp_exec_1_fu_105_ap_return_0.read();
        s_x_V_3 = s_x1_V_2_load_reg_299.read();
        s_y0_V_1 = mul_ln68_reg_294.read();
        s_y0_V_2 = grp_fu_139_p2.read();
        s_y1_V_1 = add_ln68_fu_176_p2.read();
        s_y1_V_2 = add_ln68_1_fu_213_p2.read();
        s_y1_V_3 = add_ln68_2_fu_248_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        s_x1_V_1_load_reg_283 = s_x1_V_1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_y_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read())))) {
        s_y0_V_3 = grp_fu_254_p2.read();
    }
}

void fir::thread_add_ln68_1_fu_213_p2() {
    add_ln68_1_fu_213_p2 = (!s_y0_V_2.read().is_01() || !s_y1_V_1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(s_y0_V_2.read()) + sc_biguint<32>(s_y1_V_1.read()));
}

void fir::thread_add_ln68_2_fu_248_p2() {
    add_ln68_2_fu_248_p2 = (!s_y0_V_3.read().is_01() || !s_y1_V_2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(s_y0_V_3.read()) + sc_biguint<32>(s_y1_V_2.read()));
}

void fir::thread_add_ln68_fu_176_p2() {
    add_ln68_fu_176_p2 = (!s_y0_V_1.read().is_01() || !grp_exec_1_fu_105_ap_return_1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(s_y0_V_1.read()) + sc_biguint<32>(grp_exec_1_fu_105_ap_return_1.read()));
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_NS_fsm_state2() {
    ap_NS_fsm_state2 = ap_NS_fsm.read()[1];
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_grp_exec_1_fu_105_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(y_V_TREADY_int.read(), ap_const_logic_1)))) {
        grp_exec_1_fu_105_ap_ce = ap_const_logic_1;
    } else {
        grp_exec_1_fu_105_ap_ce = ap_const_logic_0;
    }
}

void fir::thread_grp_exec_1_fu_105_ap_start() {
    grp_exec_1_fu_105_ap_start = grp_exec_1_fu_105_ap_start_reg.read();
}

void fir::thread_grp_fu_139_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read()))))) {
        grp_fu_139_ce = ap_const_logic_1;
    } else {
        grp_fu_139_ce = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_254_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_y_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read()))))) {
        grp_fu_254_ce = ap_const_logic_1;
    } else {
        grp_fu_254_ce = ap_const_logic_0;
    }
}

void fir::thread_x_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_V_TDATA_blk_n = grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read();
    } else {
        x_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void fir::thread_x_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, x_V_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_x_V_U_ack_in.read()))) {
        x_V_TREADY = ap_const_logic_1;
    } else {
        x_V_TREADY = ap_const_logic_0;
    }
}

void fir::thread_x_V_TREADY_int() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_V_TREADY_int = grp_exec_1_fu_105_x_in_V_TREADY.read();
    } else {
        x_V_TREADY_int = ap_const_logic_0;
    }
}

void fir::thread_y_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        y_V_TDATA_blk_n = y_V_TREADY_int.read();
    } else {
        y_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void fir::thread_y_V_TVALID() {
    y_V_TVALID = regslice_both_y_V_U_vld_out.read();
}

void fir::thread_y_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read())))) {
        y_V_TVALID_int = ap_const_logic_1;
    } else {
        y_V_TVALID_int = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_exec_1_fu_105_x_in_V_TDATA_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_y_V_U_apdone_blk.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_V_TREADY_int.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V_TDATA\" :  \"" << x_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V_TVALID\" :  \"" << x_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"x_V_TREADY\" :  \"" << x_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_0_V\" :  \"" << coeff_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_1_V\" :  \"" << coeff_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_2_V\" :  \"" << coeff_2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"coeff_3_V\" :  \"" << coeff_3_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_TDATA\" :  \"" << y_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_TVALID\" :  \"" << y_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y_V_TREADY\" :  \"" << y_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

