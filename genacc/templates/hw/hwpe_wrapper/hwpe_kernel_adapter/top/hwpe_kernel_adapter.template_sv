/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * HWPE author: Francesco Conti <fconti@iis.ee.ethz.ch>
 * HWPE specialization tool: Gianluca Bellocchi <gianluca.bellocchi@unimore.it>
 *
 * Module: ${target}_kernel_adapter.sv
 * 
 */

import ${target}_package::*;

module ${target}_kernel_adapter (\

  // Global signals
  input  logic          clk_i,
  input  logic          rst_ni,
  input  logic          test_mode_i,

  ${streaming_kernel_intf()}

  % if custom_reg_num > 0:
  // Kernel parameters
    % for i in range (custom_reg_num):
  input logic [${custom_reg_dim[i]-1}:0] ${custom_reg_name[i]},
    % endfor 
  % endif

  // Control signals
  input  logic          start,
  input  logic          clear,

  // Flag signals
  output logic          done,
  output logic          idle,
  output logic          ready
);

  <%
  ############################################################
  ## Kernel interface -> Xilinx ap_ctrl_hs (refer to UG902) ##
  ############################################################
  %>

  % if is_ap_ctrl_hs is True:
  ${xil_ap_ctrl_hs_kernel_ctrl()}
  ${xil_ap_ctrl_hs_kernel_flags()}
  ${xil_ap_ctrl_hs_kernel_intf()}
  ${xil_ap_ctrl_hs_stream_strobes()}
  % endif

  <%
  #######################################
  ## Kernel interface -> MDC dataflow  ##
  #######################################
  %>

  % if is_mdc_dataflow is True:
  ${mdc_dataflow_kernel_ctrl()}
  ${mdc_dataflow_kernel_flags()}
  ${mdc_dataflow_counter_in()}
  ${mdc_dataflow_counter_out()}
  ${mdc_dataflow_kernel_intf()}
  ${mdc_dataflow_stream_strobes()}
  % endif

endmodule\

