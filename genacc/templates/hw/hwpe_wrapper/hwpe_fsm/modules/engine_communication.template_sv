<%
##################################################
## Library of components - Engine communication ##
##################################################
%>

<%
##################################################
## Engine communication - Initialize requests ##
##################################################
%>

<%def name="engine_init_cnt_limit()">\
\
  % for j in range (n_source):
    ctrl_engine_o.cnt_limit_${stream_out[j]}  = ctrl_i.cnt_limit_${stream_out[j]};
  % endfor
\
</%def>

<%
############################################
## Engine communication - Check cnt flags ##
############################################
%>

<%def name="engine_check_cnt_flags_v0()">\

<%
  # The following version takes advantage of the programmable
  # 'cnt_limit' parameter to decide how many engine runs will
  # wil trigger a state transition to terminate the accelerator
  # operation. An engine run completes when a 'done' transient
  # is generated by the engine itself. 'cnt_limit' is compared
  # to an output count flag (from the engine).
%>

  % for j in range (n_source):
    % if (j is not n_source - 1):
          flags_engine_i.cnt_${stream_out[j]} == ctrl_i.cnt_limit_${stream_out[j]} &
    % else:
          flags_engine_i.cnt_${stream_out[j]} == ctrl_i.cnt_limit_${stream_out[j]} \
    % endif
  % endfor

</%def>

<%def name="engine_check_cnt_flags_v1()">\

<%
  # This simpler version assumes that the completion
  # of an engine run should trigger a state transition 
  # to terminate the accelerator operation.
%>

          flags_engine_i.done == '1

</%def>