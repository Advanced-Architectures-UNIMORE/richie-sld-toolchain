/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * HWPE author: Francesco Conti <fconti@iis.ee.ethz.ch>
 * HWPE specialization tool: Gianluca Bellocchi <gianluca.bellocchi@unimore.it>
 *
 * Module: ${target}_engine.sv
 * 
 */

import ${target}_package::*;

module ${target}_engine (\

  // Global signals
  input  logic          clk_i,
  input  logic          rst_ni,
  input  logic          test_mode_i,

  ${streaming_engine_intf()}

  // Control channel
  input  ctrl_engine_t            ctrl_i,
  output flags_engine_t           flags_o
);

  /* Control signals */

  logic engine_start, engine_clear;

  assign engine_start = ctrl_i.start;
  assign engine_clear = ctrl_i.clear;

  /* Flag signals */

  logic engine_done, engine_idle, engine_ready;

  assign flags_o.done = engine_done;
  assign flags_o.idle = engine_idle;

  always_ff @(posedge clk_i or negedge rst_ni)
  begin: fsm_ready
    if(~rst_ni)
      flags_o.ready = 1'b0;
    else if(~(engine_ready | engine_idle))
      flags_o.ready = 1'b0;
    else
      flags_o.ready = 1'b1;
  end

  /* Count outputs */
  
  ${out_track_decl()}
  ${cnt_out_decl()}

  ${out_track_impl_DtypeFF()}
  ${cnt_out_FF_impl()}

  ${cnt_out_assign_to_fsm()}

  /* Kernel adapter */

  ${target}_kernel_adapter i_${target}_adapter (

    // Global signals
    .clk_i           ( clk_i            ), 
    .rst_ni          ( rst_ni           ),
    .test_mode_i     ( test_mode_i      ), 

    // Data streams
    ${streaming_kernel_intf()}

    % if custom_reg_num>0:
    // Kernel parameters
      % for i in range (custom_reg_num):
        % if custom_reg_isport[i]:
    .${custom_reg_name[i]}        ( ctrl_i.${custom_reg_name[i]}      ),
        % endif
      % endfor
    % endif 

    // Control signals
    .start           ( engine_start     ),
    .clear           ( engine_clear     ),

    // Flag signals
    .done            ( engine_done      ), 
    .idle            ( engine_idle      ), 
    .ready           ( engine_ready     )

  );

  // At the moment output strobe is always '1
  // All bytes of output streams are written
  // to TCDM
  always_comb
  begin
    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    ${stream_out[j]}_${k}_o.strb = '1;
        % endfor
      % else:
    ${stream_out[j]}_o.strb = '1;
      % endif
    % endfor 
  end

endmodule\

