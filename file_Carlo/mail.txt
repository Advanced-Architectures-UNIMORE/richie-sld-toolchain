Dear all,

please find here attached a draft for the wrapper hierarchy which has been discussed this morning 
(verilog, a picture and a reference waveform for control signals).

-

Basically, all the wrappers but the lowest one are equal:

    they take the lower level control signals (done and ready) and derive higher level ones by counting 
    max_lK of them (K is the wrapper level progressive ID), while lower level start and idle are derived 
    according to the same done and ready, and according to the start

-

The lowest level wrapper:

    counts the number of inputs (in0, ..., inN) to derive a ready signal according to the expected number 
    for each of them (max_in0, ..., max_inN)

    counts the number of outputs (out0, ..., outM) to derive a done signal according to the expected number 
    for each of them (max_out0, ..., max_outN)

    according to the done and ready, and considering the start, idle is also derived

The lowest level wrapper can be replaced with a module directly generated with Vivado HLS which embeds 
control signals (start, done, ready, idle).

Differently from the current wrapper of HWPE, cnt is not propagated to the control fsm, but only done is. 
Maybe, a local counter in the control fsm could be necessary, or counter values could be propagated if needed 
(e.g. for addressing purposes).

In the proposed solution, control signals are not differentiated from one level to another but they are 
re-generated, meaning that a level receives control signals (start, done, ready, idle) and derives new ones 
for the lower level. A choice could also be to propagate all control signals, differentiating them with names 
(e.g. start_lk, done_lk, ready_lk, idle_lk, start_lL, done_lL, ready_lL, idle_lL for levels K and L) and keeping one unique control interface for all the levels.
Modules are only drafts: they have not been tested and may contain errors (syntax ones and others).
For any comment or clarification, please let me know.