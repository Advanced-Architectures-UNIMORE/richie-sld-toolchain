// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "exec_1.h"
#include "fir_mul_32s_32s_3bkb.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > x_V_TDATA;
    sc_in< sc_logic > x_V_TVALID;
    sc_out< sc_logic > x_V_TREADY;
    sc_in< sc_lv<32> > coeff_0_V;
    sc_in< sc_lv<32> > coeff_1_V;
    sc_in< sc_lv<32> > coeff_2_V;
    sc_in< sc_lv<32> > coeff_3_V;
    sc_out< sc_lv<32> > y_V_TDATA;
    sc_out< sc_logic > y_V_TVALID;
    sc_in< sc_logic > y_V_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    exec_1* grp_exec_1_fu_105;
    fir_mul_32s_32s_3bkb<1,2,32,32,32>* fir_mul_32s_32s_3bkb_U5;
    fir_mul_32s_32s_3bkb<1,2,32,32,32>* fir_mul_32s_32s_3bkb_U6;
    fir_mul_32s_32s_3bkb<1,2,32,32,32>* fir_mul_32s_32s_3bkb_U7;
    regslice_both<32>* regslice_both_x_V_U;
    regslice_both<32>* regslice_both_y_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > s_x_V_1;
    sc_signal< sc_lv<32> > s_x1_V_1;
    sc_signal< sc_lv<32> > s_y0_V_1;
    sc_signal< sc_lv<32> > s_y1_V_1;
    sc_signal< sc_lv<32> > s_x_V_2;
    sc_signal< sc_lv<32> > s_x1_V_2;
    sc_signal< sc_lv<32> > s_y0_V_2;
    sc_signal< sc_lv<32> > s_y1_V_2;
    sc_signal< sc_lv<32> > s_x_V_3;
    sc_signal< sc_lv<32> > s_x1_V_3;
    sc_signal< sc_lv<32> > s_y0_V_3;
    sc_signal< sc_lv<32> > s_y1_V_3;
    sc_signal< sc_logic > grp_exec_1_fu_105_x_in_V_TDATA_blk_n;
    sc_signal< sc_logic > x_V_TDATA_blk_n;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > y_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > s_x1_V_1_load_reg_283;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > grp_fu_125_p2;
    sc_signal< sc_lv<32> > mul_ln68_reg_294;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > s_x1_V_2_load_reg_299;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_start;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_done;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_idle;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_ready;
    sc_signal< sc_logic > grp_exec_1_fu_105_x_in_V_TREADY;
    sc_signal< sc_lv<32> > grp_exec_1_fu_105_ap_return_0;
    sc_signal< sc_lv<32> > grp_exec_1_fu_105_ap_return_1;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_ce;
    sc_signal< sc_logic > grp_exec_1_fu_105_ap_start_reg;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_NS_fsm_state2;
    sc_signal< sc_lv<32> > add_ln68_fu_176_p2;
    sc_signal< sc_lv<32> > grp_fu_139_p2;
    sc_signal< sc_lv<32> > add_ln68_1_fu_213_p2;
    sc_signal< sc_lv<32> > grp_fu_254_p2;
    sc_signal< sc_logic > regslice_both_y_V_U_apdone_blk;
    sc_signal< sc_lv<32> > add_ln68_2_fu_248_p2;
    sc_signal< sc_logic > grp_fu_139_ce;
    sc_signal< sc_logic > grp_fu_254_ce;
    sc_signal< sc_logic > regslice_both_x_V_U_apdone_blk;
    sc_signal< sc_lv<32> > x_V_TDATA_int;
    sc_signal< sc_logic > x_V_TVALID_int;
    sc_signal< sc_logic > x_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_x_V_U_ack_in;
    sc_signal< sc_logic > y_V_TVALID_int;
    sc_signal< sc_logic > y_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_y_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln68_1_fu_213_p2();
    void thread_add_ln68_2_fu_248_p2();
    void thread_add_ln68_fu_176_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_NS_fsm_state2();
    void thread_ap_rst_n_inv();
    void thread_grp_exec_1_fu_105_ap_ce();
    void thread_grp_exec_1_fu_105_ap_start();
    void thread_grp_fu_139_ce();
    void thread_grp_fu_254_ce();
    void thread_x_V_TDATA_blk_n();
    void thread_x_V_TREADY();
    void thread_x_V_TREADY_int();
    void thread_y_V_TDATA_blk_n();
    void thread_y_V_TVALID();
    void thread_y_V_TVALID_int();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
