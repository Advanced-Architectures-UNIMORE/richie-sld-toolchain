-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_V_TVALID : IN STD_LOGIC;
    x_V_TREADY : OUT STD_LOGIC;
    coeff_0_V : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_2_V : IN STD_LOGIC_VECTOR (31 downto 0);
    coeff_3_V : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_TVALID : OUT STD_LOGIC;
    y_V_TREADY : IN STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=3,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=1307,HLS_SYN_LUT=370,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal s_x_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_x1_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y0_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y1_V_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_x_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_x1_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y0_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y1_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_x_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_x1_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y0_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_y1_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_exec_1_fu_105_x_in_V_TDATA_blk_n : STD_LOGIC;
    signal x_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_x1_V_1_load_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_x1_V_2_load_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exec_1_fu_105_ap_start : STD_LOGIC;
    signal grp_exec_1_fu_105_ap_done : STD_LOGIC;
    signal grp_exec_1_fu_105_ap_idle : STD_LOGIC;
    signal grp_exec_1_fu_105_ap_ready : STD_LOGIC;
    signal grp_exec_1_fu_105_x_in_V_TREADY : STD_LOGIC;
    signal grp_exec_1_fu_105_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exec_1_fu_105_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exec_1_fu_105_ap_ce : STD_LOGIC;
    signal grp_exec_1_fu_105_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal add_ln68_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_y_V_U_apdone_blk : STD_LOGIC;
    signal add_ln68_2_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_ce : STD_LOGIC;
    signal grp_fu_254_ce : STD_LOGIC;
    signal regslice_both_x_V_U_apdone_blk : STD_LOGIC;
    signal x_V_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_TVALID_int : STD_LOGIC;
    signal x_V_TREADY_int : STD_LOGIC;
    signal regslice_both_x_V_U_ack_in : STD_LOGIC;
    signal y_V_TVALID_int : STD_LOGIC;
    signal y_V_TREADY_int : STD_LOGIC;
    signal regslice_both_y_V_U_vld_out : STD_LOGIC;

    component exec_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        x_in_V_TVALID : IN STD_LOGIC;
        x_in_V_TREADY : OUT STD_LOGIC;
        h_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_in_V_TDATA_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component fir_mul_32s_32s_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_exec_1_fu_105 : component exec_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exec_1_fu_105_ap_start,
        ap_done => grp_exec_1_fu_105_ap_done,
        ap_idle => grp_exec_1_fu_105_ap_idle,
        ap_ready => grp_exec_1_fu_105_ap_ready,
        x_in_V_TDATA => x_V_TDATA_int,
        x_in_V_TVALID => x_V_TVALID_int,
        x_in_V_TREADY => grp_exec_1_fu_105_x_in_V_TREADY,
        h_0_V_read => coeff_0_V,
        ap_return_0 => grp_exec_1_fu_105_ap_return_0,
        ap_return_1 => grp_exec_1_fu_105_ap_return_1,
        x_in_V_TDATA_blk_n => grp_exec_1_fu_105_x_in_V_TDATA_blk_n,
        ap_ce => grp_exec_1_fu_105_ap_ce);

    fir_mul_32s_32s_3bkb_U5 : component fir_mul_32s_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_x1_V_1,
        din1 => coeff_1_V,
        ce => ap_const_logic_1,
        dout => grp_fu_125_p2);

    fir_mul_32s_32s_3bkb_U6 : component fir_mul_32s_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_x1_V_2,
        din1 => coeff_2_V,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p2);

    fir_mul_32s_32s_3bkb_U7 : component fir_mul_32s_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_x1_V_3,
        din1 => coeff_3_V,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    regslice_both_x_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_V_TDATA,
        vld_in => x_V_TVALID,
        ack_in => regslice_both_x_V_U_ack_in,
        data_out => x_V_TDATA_int,
        vld_out => x_V_TVALID_int,
        ack_out => x_V_TREADY_int,
        apdone_blk => regslice_both_x_V_U_apdone_blk);

    regslice_both_y_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_y1_V_3,
        vld_in => y_V_TVALID_int,
        ack_in => y_V_TREADY_int,
        data_out => y_V_TDATA,
        vld_out => regslice_both_y_V_U_vld_out,
        ack_out => y_V_TREADY,
        apdone_blk => regslice_both_y_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_exec_1_fu_105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exec_1_fu_105_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_NS_fsm_state2))) then 
                    grp_exec_1_fu_105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exec_1_fu_105_ap_ready = ap_const_logic_1)) then 
                    grp_exec_1_fu_105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln68_reg_294 <= grp_fu_125_p2;
                s_x1_V_2 <= s_x_V_2;
                s_x1_V_2_load_reg_299 <= s_x1_V_2;
                s_x_V_2 <= s_x1_V_1_load_reg_283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_exec_1_fu_105_x_in_V_TDATA_blk_n = ap_const_logic_0) or (y_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                s_x1_V_1 <= s_x_V_1;
                s_x1_V_3 <= s_x_V_3;
                s_x_V_1 <= grp_exec_1_fu_105_ap_return_0;
                s_x_V_3 <= s_x1_V_2_load_reg_299;
                s_y0_V_1 <= mul_ln68_reg_294;
                s_y0_V_2 <= grp_fu_139_p2;
                s_y1_V_1 <= add_ln68_fu_176_p2;
                s_y1_V_2 <= add_ln68_1_fu_213_p2;
                s_y1_V_3 <= add_ln68_2_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                s_x1_V_1_load_reg_283 <= s_x1_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((y_V_TREADY_int = ap_const_logic_0) or (regslice_both_y_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                s_y0_V_3 <= grp_fu_254_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (grp_exec_1_fu_105_x_in_V_TDATA_blk_n, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_y_V_U_apdone_blk, y_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((grp_exec_1_fu_105_x_in_V_TDATA_blk_n = ap_const_logic_0) or (y_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((y_V_TREADY_int = ap_const_logic_0) or (regslice_both_y_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln68_1_fu_213_p2 <= std_logic_vector(unsigned(s_y0_V_2) + unsigned(s_y1_V_1));
    add_ln68_2_fu_248_p2 <= std_logic_vector(unsigned(s_y0_V_3) + unsigned(s_y1_V_2));
    add_ln68_fu_176_p2 <= std_logic_vector(unsigned(s_y0_V_1) + unsigned(grp_exec_1_fu_105_ap_return_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_exec_1_fu_105_ap_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, y_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((y_V_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_exec_1_fu_105_ap_ce <= ap_const_logic_1;
        else 
            grp_exec_1_fu_105_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_exec_1_fu_105_ap_start <= grp_exec_1_fu_105_ap_start_reg;

    grp_fu_139_ce_assign_proc : process(grp_exec_1_fu_105_x_in_V_TDATA_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state2, y_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((grp_exec_1_fu_105_x_in_V_TDATA_blk_n = ap_const_logic_0) or (y_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_139_ce <= ap_const_logic_1;
        else 
            grp_fu_139_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_254_ce_assign_proc : process(grp_exec_1_fu_105_x_in_V_TDATA_blk_n, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_y_V_U_apdone_blk, y_V_TREADY_int)
    begin
        if (((not(((y_V_TREADY_int = ap_const_logic_0) or (regslice_both_y_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((grp_exec_1_fu_105_x_in_V_TDATA_blk_n = ap_const_logic_0) or (y_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;


    x_V_TDATA_blk_n_assign_proc : process(grp_exec_1_fu_105_x_in_V_TDATA_blk_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_V_TDATA_blk_n <= grp_exec_1_fu_105_x_in_V_TDATA_blk_n;
        else 
            x_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_V_TREADY_assign_proc : process(x_V_TVALID, regslice_both_x_V_U_ack_in)
    begin
        if (((regslice_both_x_V_U_ack_in = ap_const_logic_1) and (x_V_TVALID = ap_const_logic_1))) then 
            x_V_TREADY <= ap_const_logic_1;
        else 
            x_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    x_V_TREADY_int_assign_proc : process(ap_CS_fsm_state3, grp_exec_1_fu_105_x_in_V_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_V_TREADY_int <= grp_exec_1_fu_105_x_in_V_TREADY;
        else 
            x_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    y_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, y_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            y_V_TDATA_blk_n <= y_V_TREADY_int;
        else 
            y_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_V_TVALID <= regslice_both_y_V_U_vld_out;

    y_V_TVALID_int_assign_proc : process(grp_exec_1_fu_105_x_in_V_TDATA_blk_n, ap_CS_fsm_state3, y_V_TREADY_int)
    begin
        if ((not(((grp_exec_1_fu_105_x_in_V_TDATA_blk_n = ap_const_logic_0) or (y_V_TREADY_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            y_V_TVALID_int <= ap_const_logic_1;
        else 
            y_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

end behav;
