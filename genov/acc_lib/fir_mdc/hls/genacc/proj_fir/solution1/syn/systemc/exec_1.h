// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _exec_1_HH_
#define _exec_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_mul_32s_32s_3bkb.h"

namespace ap_rtl {

struct exec_1 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x_in_V_TDATA;
    sc_in< sc_logic > x_in_V_TVALID;
    sc_out< sc_logic > x_in_V_TREADY;
    sc_in< sc_lv<32> > h_0_V_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_logic > x_in_V_TDATA_blk_n;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    exec_1(sc_module_name name);
    SC_HAS_PROCESS(exec_1);

    ~exec_1();

    sc_trace_file* mVcdFile;

    fir_mul_32s_32s_3bkb<1,2,32,32,32>* fir_mul_32s_32s_3bkb_U1;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > s_x1_V_0;
    sc_signal< sc_lv<32> > s_x_V_0;
    sc_signal< sc_lv<32> > s_y1_V_0;
    sc_signal< sc_lv<32> > s_y0_V_0;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > s_x1_V_0_load_reg_102;
    sc_signal< sc_lv<32> > grp_fu_44_p2;
    sc_signal< sc_logic > grp_fu_44_ce;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_grp_fu_44_ce();
    void thread_x_in_V_TDATA_blk_n();
    void thread_x_in_V_TREADY();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
