// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_filter,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.715600,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=928,HLS_SYN_LUT=778,HLS_VERSION=2019_2_1}" *)

module fir_filter (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_TDATA,
        x_V_TVALID,
        x_V_TREADY,
        y_V_TDATA,
        y_V_TVALID,
        y_V_TREADY,
        c_0_V,
        c_1_V,
        c_2_V,
        c_3_V,
        c_4_V,
        c_5_V,
        c_6_V,
        c_7_V,
        c_8_V,
        c_9_V,
        c_10_V,
        c_11_V,
        c_12_V,
        c_13_V,
        c_14_V,
        c_15_V
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] x_V_TDATA;
input   x_V_TVALID;
output   x_V_TREADY;
output  [47:0] y_V_TDATA;
output   y_V_TVALID;
input   y_V_TREADY;
input  [17:0] c_0_V;
input  [17:0] c_1_V;
input  [17:0] c_2_V;
input  [17:0] c_3_V;
input  [17:0] c_4_V;
input  [17:0] c_5_V;
input  [17:0] c_6_V;
input  [17:0] c_7_V;
input  [17:0] c_8_V;
input  [17:0] c_9_V;
input  [17:0] c_10_V;
input  [17:0] c_11_V;
input  [17:0] c_12_V;
input  [17:0] c_13_V;
input  [17:0] c_14_V;
input  [17:0] c_15_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [17:0] shift_reg_V_14;
reg  signed [17:0] shift_reg_V_13;
reg  signed [17:0] shift_reg_V_12;
reg  signed [17:0] shift_reg_V_11;
reg  signed [17:0] shift_reg_V_10;
reg  signed [17:0] shift_reg_V_9;
reg  signed [17:0] shift_reg_V_8;
reg  signed [17:0] shift_reg_V_7;
reg  signed [17:0] shift_reg_V_6;
reg  signed [17:0] shift_reg_V_5;
reg  signed [17:0] shift_reg_V_4;
reg  signed [17:0] shift_reg_V_3;
reg  signed [17:0] shift_reg_V_2;
reg  signed [17:0] shift_reg_V_1;
reg  signed [17:0] shift_reg_V_0;
reg    x_V_TDATA_blk_n;
reg    y_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [35:0] mul_ln1118_fu_810_p2;
reg  signed [35:0] mul_ln1118_reg_906;
reg    ap_block_state1;
wire  signed [35:0] mul_ln1118_1_fu_816_p2;
reg  signed [35:0] mul_ln1118_1_reg_911;
wire  signed [35:0] mul_ln1118_2_fu_822_p2;
reg  signed [35:0] mul_ln1118_2_reg_916;
wire  signed [35:0] mul_ln1118_3_fu_828_p2;
reg  signed [35:0] mul_ln1118_3_reg_921;
wire  signed [35:0] mul_ln1118_4_fu_834_p2;
reg  signed [35:0] mul_ln1118_4_reg_926;
wire  signed [35:0] mul_ln1118_5_fu_840_p2;
reg  signed [35:0] mul_ln1118_5_reg_931;
wire  signed [35:0] mul_ln1118_6_fu_846_p2;
reg  signed [35:0] mul_ln1118_6_reg_936;
wire  signed [35:0] mul_ln1118_7_fu_852_p2;
reg  signed [35:0] mul_ln1118_7_reg_941;
wire  signed [35:0] mul_ln1118_8_fu_858_p2;
reg  signed [35:0] mul_ln1118_8_reg_946;
wire  signed [35:0] mul_ln1118_9_fu_864_p2;
reg  signed [35:0] mul_ln1118_9_reg_951;
wire  signed [35:0] mul_ln1118_10_fu_870_p2;
reg  signed [35:0] mul_ln1118_10_reg_956;
wire  signed [35:0] mul_ln1118_11_fu_876_p2;
reg  signed [35:0] mul_ln1118_11_reg_961;
wire  signed [35:0] mul_ln1118_12_fu_882_p2;
reg  signed [35:0] mul_ln1118_12_reg_966;
wire  signed [35:0] mul_ln1118_13_fu_888_p2;
reg  signed [35:0] mul_ln1118_13_reg_971;
wire  signed [35:0] mul_ln1118_14_fu_894_p2;
reg  signed [35:0] mul_ln1118_14_reg_976;
wire  signed [35:0] mul_ln1118_15_fu_900_p2;
reg  signed [35:0] mul_ln1118_15_reg_981;
wire   [42:0] add_ln703_6_fu_721_p2;
reg   [42:0] add_ln703_6_reg_986;
wire    ap_CS_fsm_state2;
wire   [42:0] add_ln703_13_fu_787_p2;
reg   [42:0] add_ln703_13_reg_991;
wire  signed [17:0] trunc_ln203_fu_467_p1;
wire   [39:0] shl_ln_fu_485_p3;
wire   [39:0] shl_ln728_1_fu_496_p3;
wire   [39:0] shl_ln728_2_fu_507_p3;
wire   [39:0] shl_ln728_3_fu_518_p3;
wire   [39:0] shl_ln728_4_fu_529_p3;
wire   [39:0] shl_ln728_5_fu_540_p3;
wire   [39:0] shl_ln728_6_fu_551_p3;
wire   [39:0] shl_ln728_7_fu_562_p3;
wire   [39:0] shl_ln728_8_fu_573_p3;
wire   [39:0] shl_ln728_9_fu_584_p3;
wire   [39:0] shl_ln728_s_fu_595_p3;
wire   [39:0] shl_ln728_10_fu_606_p3;
wire   [39:0] shl_ln728_11_fu_617_p3;
wire   [39:0] shl_ln728_12_fu_628_p3;
wire   [39:0] shl_ln728_13_fu_639_p3;
wire   [39:0] shl_ln728_14_fu_650_p3;
wire  signed [40:0] sext_ln728_fu_492_p1;
wire  signed [40:0] sext_ln728_1_fu_503_p1;
wire   [40:0] add_ln703_fu_661_p2;
wire  signed [40:0] sext_ln728_2_fu_514_p1;
wire  signed [40:0] sext_ln728_3_fu_525_p1;
wire   [40:0] add_ln703_1_fu_671_p2;
wire  signed [41:0] sext_ln703_1_fu_677_p1;
wire  signed [41:0] sext_ln703_fu_667_p1;
wire   [41:0] add_ln703_2_fu_681_p2;
wire  signed [40:0] sext_ln728_4_fu_536_p1;
wire  signed [40:0] sext_ln728_5_fu_547_p1;
wire   [40:0] add_ln703_3_fu_691_p2;
wire  signed [40:0] sext_ln728_6_fu_558_p1;
wire  signed [40:0] sext_ln728_7_fu_569_p1;
wire   [40:0] add_ln703_4_fu_701_p2;
wire  signed [41:0] sext_ln703_4_fu_707_p1;
wire  signed [41:0] sext_ln703_3_fu_697_p1;
wire   [41:0] add_ln703_5_fu_711_p2;
wire  signed [42:0] sext_ln703_5_fu_717_p1;
wire  signed [42:0] sext_ln703_2_fu_687_p1;
wire  signed [40:0] sext_ln728_8_fu_580_p1;
wire  signed [40:0] sext_ln728_9_fu_591_p1;
wire   [40:0] add_ln703_7_fu_727_p2;
wire  signed [40:0] sext_ln728_10_fu_602_p1;
wire  signed [40:0] sext_ln728_11_fu_613_p1;
wire   [40:0] add_ln703_8_fu_737_p2;
wire  signed [41:0] sext_ln703_8_fu_743_p1;
wire  signed [41:0] sext_ln703_7_fu_733_p1;
wire   [41:0] add_ln703_9_fu_747_p2;
wire  signed [40:0] sext_ln728_12_fu_624_p1;
wire  signed [40:0] sext_ln728_13_fu_635_p1;
wire   [40:0] add_ln703_10_fu_757_p2;
wire  signed [40:0] sext_ln728_14_fu_646_p1;
wire  signed [40:0] sext_ln728_15_fu_657_p1;
wire   [40:0] add_ln703_11_fu_767_p2;
wire  signed [41:0] sext_ln703_11_fu_773_p1;
wire  signed [41:0] sext_ln703_10_fu_763_p1;
wire   [41:0] add_ln703_12_fu_777_p2;
wire  signed [42:0] sext_ln703_12_fu_783_p1;
wire  signed [42:0] sext_ln703_9_fu_753_p1;
wire  signed [43:0] sext_ln703_13_fu_796_p1;
wire  signed [43:0] sext_ln703_6_fu_793_p1;
wire   [43:0] add_ln703_14_fu_799_p2;
wire    regslice_both_y_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_x_V_U_apdone_blk;
wire   [23:0] x_V_TDATA_int;
wire    x_V_TVALID_int;
reg    x_V_TREADY_int;
wire    regslice_both_x_V_U_ack_in;
wire   [47:0] y_V_TDATA_int;
reg    y_V_TVALID_int;
wire    y_V_TREADY_int;
wire    regslice_both_y_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 shift_reg_V_14 = 18'd0;
#0 shift_reg_V_13 = 18'd0;
#0 shift_reg_V_12 = 18'd0;
#0 shift_reg_V_11 = 18'd0;
#0 shift_reg_V_10 = 18'd0;
#0 shift_reg_V_9 = 18'd0;
#0 shift_reg_V_8 = 18'd0;
#0 shift_reg_V_7 = 18'd0;
#0 shift_reg_V_6 = 18'd0;
#0 shift_reg_V_5 = 18'd0;
#0 shift_reg_V_4 = 18'd0;
#0 shift_reg_V_3 = 18'd0;
#0 shift_reg_V_2 = 18'd0;
#0 shift_reg_V_1 = 18'd0;
#0 shift_reg_V_0 = 18'd0;
end

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U1(
    .din0(shift_reg_V_14),
    .din1(c_15_V),
    .dout(mul_ln1118_fu_810_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U2(
    .din0(shift_reg_V_13),
    .din1(c_14_V),
    .dout(mul_ln1118_1_fu_816_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U3(
    .din0(shift_reg_V_12),
    .din1(c_13_V),
    .dout(mul_ln1118_2_fu_822_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U4(
    .din0(shift_reg_V_11),
    .din1(c_12_V),
    .dout(mul_ln1118_3_fu_828_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U5(
    .din0(shift_reg_V_10),
    .din1(c_11_V),
    .dout(mul_ln1118_4_fu_834_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U6(
    .din0(shift_reg_V_9),
    .din1(c_10_V),
    .dout(mul_ln1118_5_fu_840_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U7(
    .din0(shift_reg_V_8),
    .din1(c_9_V),
    .dout(mul_ln1118_6_fu_846_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U8(
    .din0(shift_reg_V_7),
    .din1(c_8_V),
    .dout(mul_ln1118_7_fu_852_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U9(
    .din0(shift_reg_V_6),
    .din1(c_7_V),
    .dout(mul_ln1118_8_fu_858_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U10(
    .din0(shift_reg_V_5),
    .din1(c_6_V),
    .dout(mul_ln1118_9_fu_864_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U11(
    .din0(shift_reg_V_4),
    .din1(c_5_V),
    .dout(mul_ln1118_10_fu_870_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U12(
    .din0(shift_reg_V_3),
    .din1(c_4_V),
    .dout(mul_ln1118_11_fu_876_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U13(
    .din0(shift_reg_V_2),
    .din1(c_3_V),
    .dout(mul_ln1118_12_fu_882_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U14(
    .din0(shift_reg_V_1),
    .din1(c_2_V),
    .dout(mul_ln1118_13_fu_888_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U15(
    .din0(shift_reg_V_0),
    .din1(c_1_V),
    .dout(mul_ln1118_14_fu_894_p2)
);

fir_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
fir_filter_mul_mubkb_U16(
    .din0(trunc_ln203_fu_467_p1),
    .din1(c_0_V),
    .dout(mul_ln1118_15_fu_900_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_x_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_V_TDATA),
    .vld_in(x_V_TVALID),
    .ack_in(regslice_both_x_V_U_ack_in),
    .data_out(x_V_TDATA_int),
    .vld_out(x_V_TVALID_int),
    .ack_out(x_V_TREADY_int),
    .apdone_blk(regslice_both_x_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 48 ))
regslice_both_y_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_V_TDATA_int),
    .vld_in(y_V_TVALID_int),
    .ack_in(y_V_TREADY_int),
    .data_out(y_V_TDATA),
    .vld_out(regslice_both_y_V_U_vld_out),
    .ack_out(y_V_TREADY),
    .apdone_blk(regslice_both_y_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln703_13_reg_991[42 : 4] <= add_ln703_13_fu_787_p2[42 : 4];
        add_ln703_6_reg_986[42 : 4] <= add_ln703_6_fu_721_p2[42 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((~((x_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln1118_10_reg_956 <= mul_ln1118_10_fu_870_p2;
        mul_ln1118_11_reg_961 <= mul_ln1118_11_fu_876_p2;
        mul_ln1118_12_reg_966 <= mul_ln1118_12_fu_882_p2;
        mul_ln1118_13_reg_971 <= mul_ln1118_13_fu_888_p2;
        mul_ln1118_14_reg_976 <= mul_ln1118_14_fu_894_p2;
        mul_ln1118_15_reg_981 <= mul_ln1118_15_fu_900_p2;
        mul_ln1118_1_reg_911 <= mul_ln1118_1_fu_816_p2;
        mul_ln1118_2_reg_916 <= mul_ln1118_2_fu_822_p2;
        mul_ln1118_3_reg_921 <= mul_ln1118_3_fu_828_p2;
        mul_ln1118_4_reg_926 <= mul_ln1118_4_fu_834_p2;
        mul_ln1118_5_reg_931 <= mul_ln1118_5_fu_840_p2;
        mul_ln1118_6_reg_936 <= mul_ln1118_6_fu_846_p2;
        mul_ln1118_7_reg_941 <= mul_ln1118_7_fu_852_p2;
        mul_ln1118_8_reg_946 <= mul_ln1118_8_fu_858_p2;
        mul_ln1118_9_reg_951 <= mul_ln1118_9_fu_864_p2;
        mul_ln1118_reg_906 <= mul_ln1118_fu_810_p2;
        shift_reg_V_0 <= trunc_ln203_fu_467_p1;
        shift_reg_V_1 <= shift_reg_V_0;
        shift_reg_V_10 <= shift_reg_V_9;
        shift_reg_V_11 <= shift_reg_V_10;
        shift_reg_V_12 <= shift_reg_V_11;
        shift_reg_V_13 <= shift_reg_V_12;
        shift_reg_V_14 <= shift_reg_V_13;
        shift_reg_V_2 <= shift_reg_V_1;
        shift_reg_V_3 <= shift_reg_V_2;
        shift_reg_V_4 <= shift_reg_V_3;
        shift_reg_V_5 <= shift_reg_V_4;
        shift_reg_V_6 <= shift_reg_V_5;
        shift_reg_V_7 <= shift_reg_V_6;
        shift_reg_V_8 <= shift_reg_V_7;
        shift_reg_V_9 <= shift_reg_V_8;
    end
end

always @ (*) begin
    if ((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_V_TDATA_blk_n = x_V_TVALID_int;
    end else begin
        x_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_x_V_U_ack_in == 1'b1) & (x_V_TVALID == 1'b1))) begin
        x_V_TREADY = 1'b1;
    end else begin
        x_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((x_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_V_TREADY_int = 1'b1;
    end else begin
        x_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        y_V_TDATA_blk_n = y_V_TREADY_int;
    end else begin
        y_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((y_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_V_TVALID_int = 1'b1;
    end else begin
        y_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((x_V_TVALID_int == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((y_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_10_fu_757_p2 = ($signed(sext_ln728_12_fu_624_p1) + $signed(sext_ln728_13_fu_635_p1));

assign add_ln703_11_fu_767_p2 = ($signed(sext_ln728_14_fu_646_p1) + $signed(sext_ln728_15_fu_657_p1));

assign add_ln703_12_fu_777_p2 = ($signed(sext_ln703_11_fu_773_p1) + $signed(sext_ln703_10_fu_763_p1));

assign add_ln703_13_fu_787_p2 = ($signed(sext_ln703_12_fu_783_p1) + $signed(sext_ln703_9_fu_753_p1));

assign add_ln703_14_fu_799_p2 = ($signed(sext_ln703_13_fu_796_p1) + $signed(sext_ln703_6_fu_793_p1));

assign add_ln703_1_fu_671_p2 = ($signed(sext_ln728_2_fu_514_p1) + $signed(sext_ln728_3_fu_525_p1));

assign add_ln703_2_fu_681_p2 = ($signed(sext_ln703_1_fu_677_p1) + $signed(sext_ln703_fu_667_p1));

assign add_ln703_3_fu_691_p2 = ($signed(sext_ln728_4_fu_536_p1) + $signed(sext_ln728_5_fu_547_p1));

assign add_ln703_4_fu_701_p2 = ($signed(sext_ln728_6_fu_558_p1) + $signed(sext_ln728_7_fu_569_p1));

assign add_ln703_5_fu_711_p2 = ($signed(sext_ln703_4_fu_707_p1) + $signed(sext_ln703_3_fu_697_p1));

assign add_ln703_6_fu_721_p2 = ($signed(sext_ln703_5_fu_717_p1) + $signed(sext_ln703_2_fu_687_p1));

assign add_ln703_7_fu_727_p2 = ($signed(sext_ln728_8_fu_580_p1) + $signed(sext_ln728_9_fu_591_p1));

assign add_ln703_8_fu_737_p2 = ($signed(sext_ln728_10_fu_602_p1) + $signed(sext_ln728_11_fu_613_p1));

assign add_ln703_9_fu_747_p2 = ($signed(sext_ln703_8_fu_743_p1) + $signed(sext_ln703_7_fu_733_p1));

assign add_ln703_fu_661_p2 = ($signed(sext_ln728_fu_492_p1) + $signed(sext_ln728_1_fu_503_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((x_V_TVALID_int == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign sext_ln703_10_fu_763_p1 = $signed(add_ln703_10_fu_757_p2);

assign sext_ln703_11_fu_773_p1 = $signed(add_ln703_11_fu_767_p2);

assign sext_ln703_12_fu_783_p1 = $signed(add_ln703_12_fu_777_p2);

assign sext_ln703_13_fu_796_p1 = $signed(add_ln703_13_reg_991);

assign sext_ln703_1_fu_677_p1 = $signed(add_ln703_1_fu_671_p2);

assign sext_ln703_2_fu_687_p1 = $signed(add_ln703_2_fu_681_p2);

assign sext_ln703_3_fu_697_p1 = $signed(add_ln703_3_fu_691_p2);

assign sext_ln703_4_fu_707_p1 = $signed(add_ln703_4_fu_701_p2);

assign sext_ln703_5_fu_717_p1 = $signed(add_ln703_5_fu_711_p2);

assign sext_ln703_6_fu_793_p1 = $signed(add_ln703_6_reg_986);

assign sext_ln703_7_fu_733_p1 = $signed(add_ln703_7_fu_727_p2);

assign sext_ln703_8_fu_743_p1 = $signed(add_ln703_8_fu_737_p2);

assign sext_ln703_9_fu_753_p1 = $signed(add_ln703_9_fu_747_p2);

assign sext_ln703_fu_667_p1 = $signed(add_ln703_fu_661_p2);

assign sext_ln728_10_fu_602_p1 = $signed(shl_ln728_s_fu_595_p3);

assign sext_ln728_11_fu_613_p1 = $signed(shl_ln728_10_fu_606_p3);

assign sext_ln728_12_fu_624_p1 = $signed(shl_ln728_11_fu_617_p3);

assign sext_ln728_13_fu_635_p1 = $signed(shl_ln728_12_fu_628_p3);

assign sext_ln728_14_fu_646_p1 = $signed(shl_ln728_13_fu_639_p3);

assign sext_ln728_15_fu_657_p1 = $signed(shl_ln728_14_fu_650_p3);

assign sext_ln728_1_fu_503_p1 = $signed(shl_ln728_1_fu_496_p3);

assign sext_ln728_2_fu_514_p1 = $signed(shl_ln728_2_fu_507_p3);

assign sext_ln728_3_fu_525_p1 = $signed(shl_ln728_3_fu_518_p3);

assign sext_ln728_4_fu_536_p1 = $signed(shl_ln728_4_fu_529_p3);

assign sext_ln728_5_fu_547_p1 = $signed(shl_ln728_5_fu_540_p3);

assign sext_ln728_6_fu_558_p1 = $signed(shl_ln728_6_fu_551_p3);

assign sext_ln728_7_fu_569_p1 = $signed(shl_ln728_7_fu_562_p3);

assign sext_ln728_8_fu_580_p1 = $signed(shl_ln728_8_fu_573_p3);

assign sext_ln728_9_fu_591_p1 = $signed(shl_ln728_9_fu_584_p3);

assign sext_ln728_fu_492_p1 = $signed(shl_ln_fu_485_p3);

assign shl_ln728_10_fu_606_p3 = {{mul_ln1118_11_reg_961}, {4'd0}};

assign shl_ln728_11_fu_617_p3 = {{mul_ln1118_12_reg_966}, {4'd0}};

assign shl_ln728_12_fu_628_p3 = {{mul_ln1118_13_reg_971}, {4'd0}};

assign shl_ln728_13_fu_639_p3 = {{mul_ln1118_14_reg_976}, {4'd0}};

assign shl_ln728_14_fu_650_p3 = {{mul_ln1118_15_reg_981}, {4'd0}};

assign shl_ln728_1_fu_496_p3 = {{mul_ln1118_1_reg_911}, {4'd0}};

assign shl_ln728_2_fu_507_p3 = {{mul_ln1118_2_reg_916}, {4'd0}};

assign shl_ln728_3_fu_518_p3 = {{mul_ln1118_3_reg_921}, {4'd0}};

assign shl_ln728_4_fu_529_p3 = {{mul_ln1118_4_reg_926}, {4'd0}};

assign shl_ln728_5_fu_540_p3 = {{mul_ln1118_5_reg_931}, {4'd0}};

assign shl_ln728_6_fu_551_p3 = {{mul_ln1118_6_reg_936}, {4'd0}};

assign shl_ln728_7_fu_562_p3 = {{mul_ln1118_7_reg_941}, {4'd0}};

assign shl_ln728_8_fu_573_p3 = {{mul_ln1118_8_reg_946}, {4'd0}};

assign shl_ln728_9_fu_584_p3 = {{mul_ln1118_9_reg_951}, {4'd0}};

assign shl_ln728_s_fu_595_p3 = {{mul_ln1118_10_reg_956}, {4'd0}};

assign shl_ln_fu_485_p3 = {{mul_ln1118_reg_906}, {4'd0}};

assign trunc_ln203_fu_467_p1 = x_V_TDATA_int[17:0];

assign y_V_TDATA_int = $signed(add_ln703_14_fu_799_p2);

assign y_V_TVALID = regslice_both_y_V_U_vld_out;

always @ (posedge ap_clk) begin
    add_ln703_6_reg_986[3:0] <= 4'b0000;
    add_ln703_13_reg_991[3:0] <= 4'b0000;
end

endmodule //fir_filter
