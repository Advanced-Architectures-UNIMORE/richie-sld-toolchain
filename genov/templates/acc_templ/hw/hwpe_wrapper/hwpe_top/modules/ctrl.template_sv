<%
#####################################
## Library of components - Control ##
#####################################
%>

<%
######################################
## Control - Number of IO registers ##
######################################
%>

<%
  # IO registers - What?
  # To this category grasp a number of classes of HWPE registers
  # that are required to to support the operations of the accelerated 
  # kernel. To this end, these registered are accessible by the cluster
  # cores that can thus execute R/W operations. These tipically include
  # standard and custom registers, as well those pertaining to programmability
  # of the streamer (e.g. address generator and TCDM master port addresses).
%>

<%def name="ctrl_n_io_regs()">\

<%
  # The methodology to calculate the number of IO registers is similar to the
  # offset calculation in the "hwpe_package" module. Basically, the registers
  # information that is specified by the user in the input specification file
  # is analyzed to gather the total amount of required entities. A "n_io_regs"
  # counter is incremented up to the final value that will be instantiated in 
  # the rendered SystemVerilog module.
%>

<%
  # Initialize n_io_regs counter 
  n_io_regs = 0
%>

<%
  # Counting standard registers

  # these do not vary with the number of source streams: 
  #     "nb_iter", "linestride", "tilestride"
  n_io_regs += std_reg_num - 1 

  # "cnt_limit" on the other side is parametrized on the number of source streams 
  # it is used in the FSM to know how many engine "done" events terminate kernel execution
  for j in range (n_source):
    n_io_regs += 1 
  endfor
  
%>

<%
  # Counting custom registers
  n_io_regs += custom_reg_num
%>

<%
  # Counting address generator registers - Input streams

  # Each data port is associated to an address generator that
  # maps streams to TCDM addresses. To define an address are
  # required num_regs_per_port parameters to be defined.

  num_regs_per_port = 9

  # In case interface partitioning is employed, additional
  # parameters are added up to define the partitioned ports 
  # offset and the data step. The latter is otherwise hardwired.

  num_regs_per_port_parallel = 10

  for i in range (n_sink):
    if (addr_gen_in_isprogr[i]):
      if (is_parallel_in[i]):
        n_io_regs += num_regs_per_port_parallel
      else:
        n_io_regs += num_regs_per_port
      endif
    endif
  endfor
%>

<%
  # Counting address generator registers - Output streams

  # Each data port is associated to an address generator that
  # maps streams to TCDM addresses. To define an address are
  # required num_regs_per_port parameters to be defined.

  num_regs_per_port = 9

  # In case interface partitioning is employed, additional
  # parameters are added up to define the partitioned ports 
  # offset and the data step. The latter is otherwise hardwired.

  num_regs_per_port_parallel = 10

  for j in range (n_source):
    if (addr_gen_out_isprogr[j]):
      if (is_parallel_out[j]):
        n_io_regs += num_regs_per_port_parallel
      else:
        n_io_regs += num_regs_per_port
      endif
    endif
  endfor
%>

<%
  # Counting TCDM
  n_io_regs += n_sink + n_source
%>

<%
  # Instantiate at RTL-level
%>

    .N_IO_REGS ( ${n_io_regs} ),

</%def>