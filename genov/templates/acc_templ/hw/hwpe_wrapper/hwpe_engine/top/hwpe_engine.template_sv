/*
 * HWPE: Francesco Conti <fconti@iis.ee.ethz.ch>
 *
 * Copyright (C) 2018 ETH Zurich, University of Bologna
 * Copyright and related rights are licensed under the Solderpad Hardware
 * License, Version 0.51 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
 * or agreed to in writing, software, hardware and materials distributed under
 * this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * HWPE author: Francesco Conti <fconti@iis.ee.ethz.ch>
 * HWPE specialization tool: Gianluca Bellocchi <gianluca.bellocchi@unimore.it>
 *
 * Module: ${target}_engine.sv
 * 
 */

import ${target}_package::*;

module ${target}_engine (\

  // Global signals
  input  logic          clk_i,
  input  logic          rst_ni,
  input  logic          test_mode_i,

  ${streaming_engine_intf()}

  // Control channel
  input  ctrl_engine_t            ctrl_i,
  output flags_engine_t           flags_o
);

  <%
  # Re-map control and flags in case the kernel interface 
  # is built exploting specific design methodologies.
  %>

  % if design_type is 'hls':
  ${map_engine_ctrl_v1_hls()}
  ${map_engine_flags_v1_hls()}
  % endif

  <%
  # Instantiate blocks to count the outputs and feedback 
  # the FSM unit about the state of engine operations.
  %>

  /* Count outputs */
  
  ${out_track_decl()}
  ${cnt_out_decl()}

  ${out_track_impl_DtypeFF()}
  ${cnt_out_FF_impl()}

  ${cnt_out_assign_to_fsm()}

  <%
  # Instantiate kernel adapter. This layer is to 
  # flexibly target different type of kernels that
  # may be designed with HDL, HLS, etc.
  %>

  /* Kernel adapter */

  ${target}_kernel_adapter i_${target}_adapter (

    // Global signals
    .clk_i           ( clk_i            ), 
    .rst_ni          ( rst_ni           ),
    .test_mode_i     ( test_mode_i      ), 

    <%
    # Data streams
    %>
    
    ${streaming_kernel_adapter_intf()}

    <%
    ################################################
    ## Kernel adapater interface -> PULP standard ##
    ################################################
    %>

    % if design_type is 'hdl':
    ${pulp_std_kernel_adapter_ctrl()}
    ${pulp_std_kernel_adapter_flags()}
    % endif

    <%
    #####################################################################
    ## Kernel adapater interface -> Xilinx ap_ctrl_hs (refer to UG902) ##
    #####################################################################
    %>

    % if design_type is 'hls':
      % if is_ap_ctrl_hs is True:
    ${xil_ap_ctrl_hs_kernel_adapter_custom_regs()}
    ${xil_ap_ctrl_hs_kernel_adapter_ctrl()}
    ${xil_ap_ctrl_hs_kernel_adapter_flags()}
      % endif
    % endif

    <%
    ################################################
    ## Kernel adapater interface -> MDC dataflow  ##
    ################################################
    %>

    % if design_type is 'hls':
      % if is_mdc_dataflow is True:
    ${mdc_dataflow_kernel_adapter_custom_regs()}
    ${mdc_dataflow_kernel_adapter_ctrl()}
    ${mdc_dataflow_kernel_adapter_flags()}
      % endif
    % endif

  );

  // At the moment output strobe is always '1
  // All bytes of output streams are written
  // to TCDM
  always_comb
  begin
    % for j in range (n_source):
      % if (is_parallel_out[j]):
        % for k in range (out_parallelism_factor[j]):
    ${stream_out[j]}_${k}_o.strb = '1;
        % endfor
      % else:
    ${stream_out[j]}_o.strb = '1;
      % endif
    % endfor 
  end

endmodule\

