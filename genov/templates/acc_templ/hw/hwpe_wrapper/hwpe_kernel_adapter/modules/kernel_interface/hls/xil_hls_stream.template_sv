<%
##################################################
## Kernel interface - Xilinx hls::stream object ##
##################################################
%>

<%
########################################
## Kernel interface - Kernel controls ##
########################################
%>

<%def name="xil_hls_stream_kernel_ctrl()">\

  // Input stream controls
  % for i in range (n_sink):
  logic [3:0] ${stream_in[i]}_i_TKEEP;
  logic [3:0] ${stream_in[i]}_i_TSTRB;
  logic ${stream_in[i]}_i_TUSER;
  logic ${stream_in[i]}_i_TLAST;
  logic ${stream_in[i]}_i_TID;
  logic ${stream_in[i]}_i_TDEST;

  logic unsigned [31:0] cnt_last_${stream_in[i]};

  assign ${stream_in[i]}_i_TKEEP = 4'b1111;
  assign ${stream_in[i]}_i_TSTRB = '0;
  assign ${stream_in[i]}_i_TUSER = '1;
  assign ${stream_in[i]}_i_TID   = '1;
  assign ${stream_in[i]}_i_TDEST = '0;

  // generate input last
  always_ff @(posedge clk_i or negedge rst_ni)
  begin: engine_cnt_img_in
    if((~rst_ni) | ctrl_i.start) begin
      cnt_last_${stream_in[i]} = '0;
    end
    else if(ctrl_i.start) begin
      cnt_last_${stream_in[i]} = '0;
    end
    else if(${stream_in[i]}_i_TLAST) begin
      cnt_last_${stream_in[i]} = '0;
    end
    else if ((${stream_in[i]}.valid) & (${stream_in[i]}.ready)) begin
      cnt_last_${stream_in[i]} = cnt_last_${stream_in[i]} + 1;
    end
    else begin
      cnt_last_${stream_in[i]} = cnt_last_${stream_in[i]};
    end
  end

  assign ${stream_in[i]}_i_TLAST = (cnt_last_${stream_in[i]}==ctrl_i.packet_size_${stream_in[i]}) ? 1 : 0;
  % endfor  

  // Output stream controls
  % for j in range (n_source):
  logic [3:0] ${stream_out[j]}_o_TKEEP;
  logic [3:0] ${stream_out[j]}_o_TSTRB;
  logic ${stream_out[j]}_o_TUSER;
  logic ${stream_out[j]}_o_TLAST;
  logic ${stream_out[j]}_o_TID;
  logic ${stream_out[j]}_o_TDEST;

  assign flags_o.last[${j}] = ${stream_out[j]}_o_TLAST;
  assign ${stream_out[j]}_o.strb = ${stream_out[j]}_o_TSTRB;
  % endfor

</%def>

<%
#####################################
## Kernel interface - Kernel flags ##
#####################################
%>

<%def name="xil_hls_stream_kernel_flags()">\

</%def>

<%
############################################################
## Kernel interface - Xilinx hls::stream kernel interface ##
############################################################
%>

<%def name="xil_hls_stream_kernel_intf()">\

  /* ${target} kernel interface. */

  ${target} i_${target} (
    // Global signals.
    .ap_clk       ( clk_i            ),
    .ap_rst_n     ( rst_ni           ),

    // Sink ports
    % for i in range (n_sink):
    .${stream_in[i]}_TDATA  ( ${stream_in[i]}_i.data  ),
    .${stream_in[i]}_TVALID ( ${stream_in[i]}_i.valid ),
    .${stream_in[i]}_TREADY ( ${stream_in[i]}_i.ready ),

    .${stream_in[i]}_TKEEP  ( ${stream_in[i]}_i_TKEEP ),
    .${stream_in[i]}_TSTRB  ( ${stream_in[i]}_i_TSTRB ),
    .${stream_in[i]}_TUSER  ( ${stream_in[i]}_i_TUSER ),
    .${stream_in[i]}_TLAST  ( ${stream_in[i]}_i_TLAST ),
    .${stream_in[i]}_TID    ( ${stream_in[i]}_i_TID   ),
    .${stream_in[i]}_TDEST  ( ${stream_in[i]}_i_TDEST ),
    % endfor  

    // Source ports
    % for j in range (n_source):
    .${stream_out[j]}_TDATA  ( ${stream_out[j]}_o.data  ),
    .${stream_out[j]}_TVALID ( ${stream_out[j]}_o.valid ),
    .${stream_out[j]}_TREADY ( ${stream_out[j]}_o.ready ),
    
    .${stream_out[j]}_TKEEP  ( ${stream_out[j]}_o_TKEEP ),
    .${stream_out[j]}_TSTRB  ( ${stream_out[j]}_o_TSTRB ),
    .${stream_out[j]}_TUSER  ( ${stream_out[j]}_o_TUSER ),
    .${stream_out[j]}_TLAST  ( ${stream_out[j]}_o_TLAST ),
    .${stream_out[j]}_TID    ( ${stream_out[j]}_o_TID   ),
    .${stream_out[j]}_TDEST  ( ${stream_out[j]}_o_TDEST ),
    % endfor

    % if custom_reg_num>0:
    // Kernel parameters
      % for i in range (custom_reg_num):
        % if custom_reg_isport[i]:
    .${custom_reg_name[i]}        ( ${custom_reg_name[i]} ),
        % endif
      % endfor
    % endif 

    // Control signals.
    .ap_start      ( ctrl_i.start             ),
    .ap_done       ( flags_o.done             ),
    .ap_idle       ( flags_o.idle             ),
    .ap_ready      ( flags_o.ready            )
  );

</%def>

<%
################################################
## Kernel interface - Generate stream strobes ##
################################################
%>

<%def name="xil_hls_stream_stream_strobes()">\

</%def>

