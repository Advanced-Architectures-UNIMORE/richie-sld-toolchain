<%
# =====================================================================
# Project:      Overlay templates
# Title:        shared_lic.template_sv
# Description:  Accelerator interface - Shared logarithmic interconnect
#
# $Date:        29.12.2021
#
# Generator:    genov
# =====================================================================
#
# Copyright (C) 2021 University of Modena and Reggio Emilia.
#
# Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
#
# =====================================================================
%>

<%
# =====================================================================
# Title:        shared_lic_cl_intf
# Type:         Template API
# Description:  Interface to PULP-based overlay cluster. Definition of 
#               module interface to the shared LIC inside an overlay 
#               cluster.
# =====================================================================
%>

<%def name="shared_lic_cl_intf(cl_offset)">\

  <%
    # Count number of wrappers

    n_acc_cl = len(cl_acc_names[cl_offset])
  %>

  module shared_lic_cl_intf
  #(
    // Cluster
    parameter NB_CORES = 2,
    parameter ID_WIDTH = 8,

    // Accelerators
    localparam int NB_HWPE = N_HWPE,

    // Master ports
    % for i in range(n_acc_cl):
    localparam int NB_HWPE_PORTS_${i}   = N_HWPE_PORTS_${i},
    % endfor
    localparam int NB_HWPE_PORTS_TOTAL  = N_HWPE_PORTS_TOTAL,

    // Other params
    parameter N_DMA = 4,
    parameter N_EXT = 4,
    parameter N_MEM = 16,
    parameter N_MASTER_PORT = 4,
    parameter DEFAULT_DW = 32,
    parameter DEFAULT_AW = 32,
    parameter DEFAULT_BW = 8,
    parameter DEFAULT_WW = 10,
    parameter AWH = DEFAULT_AW
  )
  (
    input  logic                                        clk,
    input  logic                                        rst_n,
    input  logic                                        test_mode,

    XBAR_TCDM_BUS.Master                                hwacc_xbar_master[NB_HWPE_PORTS_TOTAL-1:0],
    XBAR_PERIPH_BUS.Slave                               hwacc_cfg_slave[NB_HWPE-1:0],
    
    output logic [NB_HWPE-1:0][NB_CORES-1:0][1:0]       evt_o,
    output logic                                        busy_o
  );

</%def>

<%
# =====================================================================
# Title:        shared_lic_hwpe_wrapper_intf
# Type:         Template API
# Description:  Interface to HWPE-based accelerator wrapper. Instantiation 
#               of HWPE-based accelerator wrapper(-s) connected to the 
#               shared LIC inside an overlay cluster.
# =====================================================================
%>

<%def name="shared_lic_hwpe_wrapper_intf(cl_offset)">\

  <%
    # Count number of wrappers

    n_acc_cl = len(cl_acc_names[cl_offset])
  %>

  % for i in range(n_acc_cl):
    % if cl_acc_protocols[cl_offset][i] == "hwpe":

      <%
        # Determine accelerator offset

        acc_offset = i
      %>

    /* ---------------------------------------------------------- */

    /* Interface to HWPE-based accelerator wrapper #${acc_offset}. */

    ${shared_lic_mst_idx(cl_offset, acc_offset)}

    logic [N_MASTER_PORT-1:0]           tcdm_req;
    logic [N_MASTER_PORT-1:0]           tcdm_gnt;
    logic [N_MASTER_PORT-1:0] [32-1:0]  tcdm_add;
    logic [N_MASTER_PORT-1:0]           tcdm_type;
    logic [N_MASTER_PORT-1:0] [4 -1:0]  tcdm_be;
    logic [N_MASTER_PORT-1:0] [32-1:0]  tcdm_wdata;
    logic [N_MASTER_PORT-1:0] [32-1:0]  tcdm_r_rdata;
    logic [N_MASTER_PORT-1:0]           tcdm_r_valid;


    ${cl_acc_names[cl_offset][acc_offset]}_top_wrap #( 
      .N_CORES          ( N_CORES ),
      .MP               ( N_MASTER_PORT ),
      .ID               ( ID_WIDTH )
    ) i_hwpe_top_wrap (
      .clk_i          ( clk                       ),
      .rst_ni         ( rst_n                     ),
      .test_mode_i    ( test_mode                 ),
      .tcdm_add       ( tcdm_add                  ), // address
      .tcdm_be        ( tcdm_be                   ), // byte enable
      .tcdm_data      ( tcdm_wdata                ), // write data
      .tcdm_gnt       ( tcdm_gnt                  ), // grant
      .tcdm_wen       ( tcdm_type                 ), // write enable
      .tcdm_req       ( tcdm_req                  ), // request
      .tcdm_r_data    ( tcdm_r_rdata              ), // read data
      .tcdm_r_valid   ( tcdm_r_valid              ), // read valid
      .periph_add     ( hwacc_cfg_slave.add       ),  // address
      .periph_be      ( hwacc_cfg_slave.be        ),  // byte enable
      .periph_data    ( hwacc_cfg_slave.wdata     ),  // write data
      .periph_gnt     ( hwacc_cfg_slave.gnt       ),  // grant
      .periph_wen     ( hwacc_cfg_slave.wen       ),  // write enable
      .periph_req     ( hwacc_cfg_slave.req       ),  // request
      .periph_id      ( hwacc_cfg_slave.id        ),  // write id
      .periph_r_data  ( hwacc_cfg_slave.r_rdata   ),  // read data
      .periph_r_valid ( hwacc_cfg_slave.r_valid   ),  // read valid
      .periph_r_id    ( hwacc_cfg_slave.r_id      ),  // read id
      .evt_o          ( evt_o                     )   // event
    );

    assign busy_o = 1'b1;

    % endif
  % endfor

    genvar i;
    generate
      for (i=0;i<N_MASTER_PORT;i++) begin : hwacc_binding
        assign hwacc_xbar_master[i].req   = tcdm_req   [i];
        assign hwacc_xbar_master[i].add   = tcdm_add   [i];
        assign hwacc_xbar_master[i].wen   = tcdm_type  [i];
        assign hwacc_xbar_master[i].wdata = tcdm_wdata [i];
        assign hwacc_xbar_master[i].be    = tcdm_be    [i];
        // response channel
        assign tcdm_gnt     [i] = hwacc_xbar_master[i].gnt;
        assign tcdm_r_rdata [i] = hwacc_xbar_master[i].r_rdata;
        assign tcdm_r_valid [i] = hwacc_xbar_master[i].r_valid;
      end
    endgenerate

  endmodule

</%def>\

<%
# =====================================================================
# Title:        shared_lic_mst_idx
# Type:         Template API
# Description:  Definition and initialization of shared LIC port indices  
#               associated with clustered HWPE-based accelerator wrapper(-s).
#               This is because the master ports are wrapped into an array
#               "hwacc_xbar_master[NB_HWPE_PORTS_TOTAL-1:0]" that is input
#               to the accelerator interface. The latter subsequently needs
#               to distribute the data ports to each accelerator wrapper.
#               This is accomplished using the indices defined below.
# =====================================================================
%>

<%def name="shared_lic_mst_idx(cl_offset, acc_offset)">\

  <%
    is_first_hwpe = True

    str_H = ""
    str_L = ""
  %>

  <%
    # Scan all clustered accelerators till the current one
  %>

  % for i in range(acc_offset+1):

    <%
      # Only HWPE-based wrappers are currently supported
    %>

    % if cl_acc_protocols[cl_offset][i] == "hwpe":

      <%
        # Construction of the string defining the indices
      %>

      % if is_first_hwpe is True:
        <%
          is_first_hwpe = False

          str_H = "NB_HWPE_PORTS_" + str(i) + " - 1"
          str_L = "0"
        %>
      % else:
        <%
          str_H = "NB_HWPE_PORTS_" + str(i) + " + " + str_H
        %>

        <%
          str_L = "NB_HWPE_PORTS_" + str(i-1) + " + " + str_L
        %>
      % endif
    % endif
  % endfor

  <%
    # Definition and initialization of shared LIC port indices
  %>

    parameter mst_idx_${acc_offset}_H = ${str_H};
    parameter mst_idx_${acc_offset}_L = ${str_L};
    
      
</%def>\