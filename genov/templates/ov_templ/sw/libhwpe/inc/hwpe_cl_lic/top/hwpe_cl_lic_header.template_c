<%
# =====================================================================
# Project:       LibHWPE
# Title:         hwpe_cl_lic_header.template_c
# Description:   Definition of Software APIs for Host and PULP.
# Date:          13.7.2022
# ===================================================================== */
#
# Copyright (C) 2022 University of Modena and Reggio Emilia.
#
# Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
%>

<%
  # Wrapper dependencies 
  accelerator_id = extra_param_0
%>

/* =====================================================================
 * Project:      LibHWPE
 * Title:        hwpe_cl${cl_id}_lic${accelerator_id}
 * Description:  Definition of APIs for ${cl_lic_acc_names[accelerator_id]}.
 *
 * $Date:        13.7.2022
 * ===================================================================== */
/*
 * Copyright (C) 2022 University of Modena and Reggio Emilia.
 *
 * Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
 *
 */

#ifndef __HWPE_CL${cl_id}_LIC${accelerator_id}_API_H__
#define __HWPE_CL${cl_id}_LIC${accelerator_id}_API_H__

#include <stdint.h>

/* Include HERO library. */
#include <hero-target.h>

#include <common_structs/def_struct_hwpe_common.h>
#include <common_structs/def_struct_hwpe_${cl_lic_acc_names[accelerator_id]}.h>

/* Initialization */

void arov_cl${cl_id}_lic${accelerator_id}_init(${cl_lic_acc_names[accelerator_id]}_wrapper_struct *wrapper);

/* Activation */

int arov_cl${cl_id}_lic${accelerator_id}_activate();

/* Programming */

void arov_cl${cl_id}_lic${accelerator_id}_program(${cl_lic_acc_names[accelerator_id]}_wrapper_struct *wrapper);

/* Data memory interaction */

void arov_cl${cl_id}_lic${accelerator_id}_update_buffer_addr(${cl_lic_acc_names[accelerator_id]}_wrapper_struct *wrapper);

/* Processing */

void arov_cl${cl_id}_lic${accelerator_id}_compute();

/* Synchronization */

void arov_cl${cl_id}_lic${accelerator_id}_wait();

/* Deactivation */

void arov_cl${cl_id}_lic${accelerator_id}_free();

/* 
 * The following code is currently not used.
 */

// void ${cl_lic_acc_names[accelerator_id]}_init_addr_gen(${cl_lic_acc_names[accelerator_id]}_stream_struct *stream);
// int ${cl_lic_acc_names[accelerator_id]}_activate(${cl_lic_acc_names[accelerator_id]}_ctrl_struct *ctrl);

// void ${cl_lic_acc_names[accelerator_id]}_set_std_regs(
% for i in range (acc_wr_n_sink):
//     hwpe_stream_struct *${acc_wr_stream_in[i]},
% endfor
% for j in range (acc_wr_n_source):
//     hwpe_stream_struct *${acc_wr_stream_out[j]},
% endfor
//     ${cl_lic_acc_names[accelerator_id]}_ctrl_struct *ctrl
// );
// void ${cl_lic_acc_names[accelerator_id]}_set_custom_regs(${cl_lic_acc_names[accelerator_id]}_ctrl_struct *ctrl); 

% for i in range (acc_wr_n_sink):
// void ${cl_lic_acc_names[accelerator_id]}_set_buffer_${acc_wr_stream_in[i]}(hwpe_stream_struct *${acc_wr_stream_in[i]});
% endfor
% for j in range (acc_wr_n_source):
// void ${cl_lic_acc_names[accelerator_id]}_set_buffer_${acc_wr_stream_out[j]}(hwpe_stream_struct *${acc_wr_stream_out[j]});
% endfor
// void ${cl_lic_acc_names[accelerator_id]}_compute();
// void ${cl_lic_acc_names[accelerator_id]}_wait();
// void ${cl_lic_acc_names[accelerator_id]}_disable();

// void ${cl_lic_acc_names[accelerator_id]}_wrapper_l1free(${cl_lic_acc_names[accelerator_id]}_wrapper_struct* a);
// void ${cl_lic_acc_names[accelerator_id]}_wrapper_l2free(${cl_lic_acc_names[accelerator_id]}_wrapper_struct* a);

// void ${cl_lic_acc_names[accelerator_id]}_stream_l1free(${cl_lic_acc_names[accelerator_id]}_stream_struct* a);
// void ${cl_lic_acc_names[accelerator_id]}_stream_l2free(${cl_lic_acc_names[accelerator_id]}_stream_struct* a);

// void ${cl_lic_acc_names[accelerator_id]}_ctrl_l1free(${cl_lic_acc_names[accelerator_id]}_ctrl_struct* a);
// void ${cl_lic_acc_names[accelerator_id]}_ctrl_l2free(${cl_lic_acc_names[accelerator_id]}_ctrl_struct* a);

#endif