<%
# =====================================================================
# Project:       LibAROV
# Title:         arov_target_header.template_c
# Description:   Definition of Software APIs for Host and PULP.
# Date:          13.7.2022
# ===================================================================== */
#
# Copyright (C) 2022 University of Modena and Reggio Emilia.
#
# Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
%>

<%
    # Extra parameters
    list_cl_lic = extra_param_0
    list_cl_hci = extra_param_1

    # Get accelerator designs
    acc_design_names = []

    # Start by inspecting the accelerators 
    # connected to the LIC of each cluster
    for i in range(n_clusters):
        cl_lic_acc_names = list_cl_lic[i][1]
        for n in cl_lic_acc_names:
            if n not in acc_design_names:
                acc_design_names.append(n)

    # Then check the accelerators connected 
    # to the HCI of each cluster
    for i in range(n_clusters):
        cl_hci_acc_names = list_cl_hci[i][1]
        for n in cl_hci_acc_names:
            if n not in acc_design_names:
                acc_design_names.append(n)
%>

/* =====================================================================
 * Project:      LibAROV
 * Title:        arov-target.h
 * Description:  Definition of APIs for the accelerator-rich system.
 *
 * $Date:        13.7.2022
 * ===================================================================== */
/*
 * Copyright (C) 2022 University of Modena and Reggio Emilia.
 *
 * Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
 *
 */

#ifndef __AROV_API_H__
#define __AROV_API_H__

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

/* Hardware accelerators */

% for i in range(len(acc_design_names)):
#include <common_structs/def_struct_hwpe_${acc_design_names[i]}.h>
% endfor

// If LLVM, use our address space support, otherwise fall back to bit-compatible
// data types.
#if defined(__llvm__)
#   define AROV_DEVICE_PTR __device arov_struct*
#else
#   define AROV_DEVICE_PTR arov_struct*
#endif

/* Definition - Types */

typedef struct arov_struct arov_struct;

/* Definition - Structs */

struct arov_struct {

% for i in range(n_clusters):

    <%
        # Determine cluster ID

        cluster_id = i

        # Count number of wrappers

        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>

    /* Accelerators - Cluster ${cluster_id} */

    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
    ${cl_lic_acc_names[accelerator_id]}_wrapper_struct ${cl_lic_acc_names[accelerator_id]}_${cluster_id}_${accelerator_id};
    % endfor
% endfor

};

void arov_init(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
int arov_activate(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
void arov_program(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
void arov_update_buffer_addr(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
void arov_compute(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
void arov_wait(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);
void arov_free(AROV_DEVICE_PTR accelerators, const int cluster_id, const int accelerator_id);

#endif