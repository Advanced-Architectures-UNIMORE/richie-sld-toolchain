<%
# =====================================================================
# Project:       LibAROV
# Title:         arov_target_pulp.template_c
# Description:   The LibHwpe class recalls all the the templates 
#                compliant with the generation of the software libraries
#                for HWPE wrappers.
#
# Date:          13.7.2022
# ===================================================================== */
#
# Copyright (C) 2022 University of Modena and Reggio Emilia.
#
# Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
%>

<%
    # Extra parameters
    list_cl_lic = extra_param_0
    list_cl_hci = extra_param_1
%>

/* =====================================================================
 * Project:      LibAROV
 * Title:        arov-target.c
 * Description:  Software APIs for accelerator-rich system.
 *
 * $Date:        13.7.2022
 * ===================================================================== */
/*
 * Copyright (C) 2022 University of Modena and Reggio Emilia.
 *
 * Author: Gianluca Bellocchi, University of Modena and Reggio Emilia.
 *
 */

#include <arov-target.h>

% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
#include <libhwpe/hwpe_cl${cluster_id}_lic${accelerator_id}.h> \
    % endfor
% endfor


void arov_init(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){

    /* Decide which hardware accelerator to initialize */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_init(&(arov->${cl_lic_acc_names[accelerator_id]}_${cluster_id}_${accelerator_id})); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_init>\n");
        }
    }
% endfor
        
};

int arov_activate(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){

    /* Decide which hardware accelerator to activate */

    int offload_id;

% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: offload_id = arov_cl${cluster_id}_lic${accelerator_id}_activate(); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_activate>\n");
        }
    }
% endfor


    return offload_id;        
};

void arov_program(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){
    
    /* Decide which hardware accelerator to program */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_program(&(arov->${cl_lic_acc_names[accelerator_id]}_${cluster_id}_${accelerator_id})); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_program>\n");
        }
    }
% endfor
        
};

void arov_update_buffer_addr(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){
    
    /* Decide which hardware accelerator to update with new buffer addresses */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_update_buffer_addr(&(arov->${cl_lic_acc_names[accelerator_id]}_${cluster_id}_${accelerator_id})); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_update_buffer_addr>\n");
        }
    }
% endfor
        
};

void arov_compute(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){
    
    /* Decide which hardware accelerator to execute */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_compute(); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_compute>\n");
        }
    }
% endfor
  
};

void arov_wait(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){
    
    /* Decide which hardware accelerator to wait for */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_wait(); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_wait>\n");
        }
    }
% endfor
      
};

void arov_free(AROV_DEVICE_PTR arov, const int cluster_id, const int accelerator_id){
    
    /* Decide which hardware accelerator to disable */
    
% for i in range(n_clusters):
    <%
        # Determine cluster ID

        cluster_id = i

        # List of accelerator names
        cl_lic_acc_names = list_cl_lic[i][1]
        cl_hci_acc_names = list_cl_hci[i][1]

        # Count number of wrappers

        n_acc_cl = len(cl_lic_acc_names) + len(cl_hci_acc_names)
    %>
    if(cluster_id == ${cluster_id}){
        switch (accelerator_id){
    % for j in range(n_acc_cl):
        <%
            # Determine accelerator ID

            accelerator_id = j
        %>
	        case ${accelerator_id}: arov_cl${cluster_id}_lic${accelerator_id}_free(); break; \
    % endfor
            
            default: printf("Error: No matching case for <arov_free>\n");
        }
    }
% endfor
        
};