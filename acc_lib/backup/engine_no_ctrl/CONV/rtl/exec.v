// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x1_in_V_TDATA,
        x1_in_V_TVALID,
        x1_in_V_TREADY,
        x2_in_V_TDATA,
        x2_in_V_TVALID,
        x2_in_V_TREADY,
        x1_in_past_V,
        x2_in_past_V,
        k11_V,
        k21_V,
        k12_V,
        k22_V,
        y_conv_V_TDATA,
        y_conv_V_TVALID,
        y_conv_V_TREADY,
        x1_in_V_TDATA_blk_n,
        x2_in_V_TDATA_blk_n,
        y_conv_V_TDATA_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x1_in_V_TDATA;
input   x1_in_V_TVALID;
output   x1_in_V_TREADY;
input  [31:0] x2_in_V_TDATA;
input   x2_in_V_TVALID;
output   x2_in_V_TREADY;
input  [31:0] x1_in_past_V;
input  [31:0] x2_in_past_V;
input  [31:0] k11_V;
input  [31:0] k21_V;
input  [31:0] k12_V;
input  [31:0] k22_V;
output  [31:0] y_conv_V_TDATA;
output   y_conv_V_TVALID;
input   y_conv_V_TREADY;
output   x1_in_V_TDATA_blk_n;
output   x2_in_V_TDATA_blk_n;
output   y_conv_V_TDATA_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x1_in_V_TREADY;
reg x2_in_V_TREADY;
reg y_conv_V_TVALID;
reg x1_in_V_TDATA_blk_n;
reg x2_in_V_TDATA_blk_n;
reg y_conv_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire  signed [31:0] mul_ln68_fu_89_p0;
wire  signed [31:0] mul_ln68_fu_89_p1;
wire  signed [31:0] mul_ln68_1_fu_95_p0;
wire  signed [31:0] mul_ln68_1_fu_95_p1;
wire  signed [31:0] mul_ln68_2_fu_101_p0;
wire  signed [31:0] mul_ln68_2_fu_101_p1;
wire  signed [31:0] mul_ln68_3_fu_107_p0;
wire  signed [31:0] mul_ln68_3_fu_107_p1;
wire   [31:0] mul_ln68_3_fu_107_p2;
wire   [31:0] mul_ln68_2_fu_101_p2;
wire   [31:0] mul_ln68_fu_89_p2;
wire   [31:0] mul_ln68_1_fu_95_p2;
wire   [31:0] add_ln68_1_fu_119_p2;
wire   [31:0] add_ln68_fu_113_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (y_conv_V_TREADY == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (y_conv_V_TREADY == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x1_in_V_TDATA_blk_n = x1_in_V_TVALID;
    end else begin
        x1_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (y_conv_V_TREADY == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        x1_in_V_TREADY = 1'b1;
    end else begin
        x1_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x2_in_V_TDATA_blk_n = x2_in_V_TVALID;
    end else begin
        x2_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (y_conv_V_TREADY == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        x2_in_V_TREADY = 1'b1;
    end else begin
        x2_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_conv_V_TDATA_blk_n = y_conv_V_TREADY;
    end else begin
        y_conv_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (y_conv_V_TREADY == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        y_conv_V_TVALID = 1'b1;
    end else begin
        y_conv_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_1_fu_119_p2 = (mul_ln68_fu_89_p2 + mul_ln68_1_fu_95_p2);

assign add_ln68_fu_113_p2 = (mul_ln68_3_fu_107_p2 + mul_ln68_2_fu_101_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (x2_in_V_TVALID == 1'b0) | (x1_in_V_TVALID == 1'b0));
end

assign mul_ln68_1_fu_95_p0 = k22_V;

assign mul_ln68_1_fu_95_p1 = x2_in_past_V;

assign mul_ln68_1_fu_95_p2 = ($signed(mul_ln68_1_fu_95_p0) * $signed(mul_ln68_1_fu_95_p1));

assign mul_ln68_2_fu_101_p0 = k11_V;

assign mul_ln68_2_fu_101_p1 = x1_in_V_TDATA;

assign mul_ln68_2_fu_101_p2 = ($signed(mul_ln68_2_fu_101_p0) * $signed(mul_ln68_2_fu_101_p1));

assign mul_ln68_3_fu_107_p0 = k21_V;

assign mul_ln68_3_fu_107_p1 = x2_in_V_TDATA;

assign mul_ln68_3_fu_107_p2 = ($signed(mul_ln68_3_fu_107_p0) * $signed(mul_ln68_3_fu_107_p1));

assign mul_ln68_fu_89_p0 = k12_V;

assign mul_ln68_fu_89_p1 = x1_in_past_V;

assign mul_ln68_fu_89_p2 = ($signed(mul_ln68_fu_89_p0) * $signed(mul_ln68_fu_89_p1));

assign y_conv_V_TDATA = (add_ln68_1_fu_119_p2 + add_ln68_fu_113_p2);

endmodule //exec
