// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doConv,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.803000,HLS_SYN_LAT=1219,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=120,HLS_SYN_LUT=484,HLS_VERSION=2019_2}" *)

module CONV (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TREADY,
        kernel_TDATA,
        kernel_TVALID,
        kernel_TREADY
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_pp1_stage0 = 12'd1024;
parameter    ap_ST_fsm_state14 = 12'd2048;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
output  [31:0] outstream_TDATA;
output   outstream_TVALID;
input   outstream_TREADY;
input  [31:0] kernel_TDATA;
input   kernel_TVALID;
output   kernel_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg instream_TREADY;
reg kernel_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    instream_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln54_fu_433_p2;
reg    outstream_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln54_reg_557;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln54_reg_557_pp1_iter1_reg;
reg    kernel_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_238_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [10:0] idxpixel_0_reg_222;
wire   [7:0] p_kernel_q1;
reg   [7:0] reg_233;
wire    ap_CS_fsm_state8;
wire   [7:0] p_kernel_q0;
wire    ap_CS_fsm_state9;
wire   [1:0] i_fu_244_p2;
reg   [1:0] i_reg_481;
reg    ap_block_state2;
wire  signed [4:0] sub_ln36_fu_266_p2;
reg  signed [4:0] sub_ln36_reg_486;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [8:0] add_ln84_fu_328_p2;
reg   [8:0] add_ln84_reg_512;
wire    ap_CS_fsm_state7;
wire   [9:0] add_ln84_2_fu_355_p2;
reg   [9:0] add_ln84_2_reg_522;
wire   [8:0] add_ln84_3_fu_369_p2;
reg   [8:0] add_ln84_3_reg_547;
wire  signed [15:0] sext_ln84_16_fu_429_p1;
reg  signed [15:0] sext_ln84_16_reg_552;
wire    ap_CS_fsm_state10;
reg    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
reg    ap_block_state12_io;
wire    ap_block_state13_pp1_stage0_iter2;
reg    ap_block_state13_io;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] idxpixel_fu_439_p2;
wire   [14:0] select_ln91_fu_459_p3;
reg   [14:0] select_ln91_reg_566;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg   [3:0] p_kernel_address0;
reg    p_kernel_ce0;
reg    p_kernel_we0;
reg   [7:0] p_kernel_d0;
reg   [3:0] p_kernel_address1;
reg    p_kernel_ce1;
reg   [1:0] i_0_reg_211;
wire   [63:0] zext_ln36_fu_276_p1;
wire   [63:0] zext_ln36_1_fu_295_p1;
wire   [63:0] zext_ln36_2_fu_310_p1;
reg    ap_block_pp1_stage0_01001;
wire   [7:0] trunc_ln36_fu_281_p1;
wire   [7:0] trunc_ln36_1_fu_300_p1;
wire   [7:0] trunc_ln36_2_fu_315_p1;
wire   [3:0] shl_ln_fu_254_p3;
wire   [4:0] zext_ln36_3_fu_262_p1;
wire   [4:0] zext_ln33_fu_250_p1;
wire  signed [31:0] sext_ln36_fu_272_p1;
wire   [4:0] add_ln36_fu_286_p2;
wire  signed [31:0] sext_ln36_1_fu_291_p1;
wire   [4:0] add_ln36_1_fu_305_p2;
wire  signed [8:0] sext_ln84_fu_320_p1;
wire  signed [8:0] sext_ln84_1_fu_324_p1;
wire  signed [8:0] sext_ln84_2_fu_334_p1;
wire  signed [8:0] sext_ln84_3_fu_338_p1;
wire   [8:0] add_ln84_1_fu_345_p2;
wire  signed [9:0] sext_ln84_10_fu_351_p1;
wire  signed [9:0] sext_ln84_9_fu_342_p1;
wire  signed [8:0] sext_ln84_4_fu_361_p1;
wire  signed [8:0] sext_ln84_5_fu_365_p1;
wire  signed [8:0] sext_ln84_7_fu_379_p1;
wire  signed [8:0] sext_ln84_8_fu_383_p1;
wire   [8:0] add_ln84_4_fu_393_p2;
wire  signed [9:0] sext_ln84_13_fu_399_p1;
wire  signed [9:0] sext_ln84_6_fu_375_p1;
wire   [9:0] add_ln84_5_fu_403_p2;
wire  signed [10:0] sext_ln84_14_fu_409_p1;
wire  signed [10:0] sext_ln84_12_fu_390_p1;
wire   [10:0] add_ln84_6_fu_413_p2;
wire  signed [11:0] sext_ln84_15_fu_419_p1;
wire  signed [11:0] sext_ln84_11_fu_387_p1;
wire   [11:0] add_ln84_7_fu_423_p2;
wire  signed [15:0] mul_ln84_fu_471_p2;
wire   [0:0] tmp_2_fu_452_p3;
wire   [14:0] trunc_ln91_fu_449_p1;
wire  signed [15:0] mul_ln84_fu_471_p0;
wire  signed [11:0] mul_ln84_fu_471_p1;
wire    ap_CS_fsm_state14;
wire    regslice_both_outstream_U_apdone_blk;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_instream_U_apdone_blk;
wire   [31:0] instream_TDATA_int;
wire    instream_TVALID_int;
reg    instream_TREADY_int;
wire    regslice_both_instream_U_ack_in;
wire   [31:0] outstream_TDATA_int;
reg    outstream_TVALID_int;
wire    outstream_TREADY_int;
wire    regslice_both_outstream_U_vld_out;
wire    regslice_both_kernel_U_apdone_blk;
wire   [31:0] kernel_TDATA_int;
wire    kernel_TVALID_int;
reg    kernel_TREADY_int;
wire    regslice_both_kernel_U_ack_in;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

doConv_p_kernel #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
p_kernel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_kernel_address0),
    .ce0(p_kernel_ce0),
    .we0(p_kernel_we0),
    .d0(p_kernel_d0),
    .q0(p_kernel_q0),
    .address1(p_kernel_address1),
    .ce1(p_kernel_ce1),
    .q1(p_kernel_q1)
);

doConv_mul_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 16 ))
doConv_mul_mul_16bkb_U1(
    .din0(mul_ln84_fu_471_p0),
    .din1(mul_ln84_fu_471_p1),
    .dout(mul_ln84_fu_471_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_instream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(instream_TDATA),
    .vld_in(instream_TVALID),
    .ack_in(regslice_both_instream_U_ack_in),
    .data_out(instream_TDATA_int),
    .vld_out(instream_TVALID_int),
    .ack_out(instream_TREADY_int),
    .apdone_blk(regslice_both_instream_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_outstream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outstream_TDATA_int),
    .vld_in(outstream_TVALID_int),
    .ack_in(outstream_TREADY_int),
    .data_out(outstream_TDATA),
    .vld_out(regslice_both_outstream_U_vld_out),
    .ack_out(outstream_TREADY),
    .apdone_blk(regslice_both_outstream_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_kernel_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(kernel_TDATA),
    .vld_in(kernel_TVALID),
    .ack_in(regslice_both_kernel_U_ack_in),
    .data_out(kernel_TDATA_int),
    .vld_out(kernel_TVALID_int),
    .ack_out(kernel_TREADY_int),
    .apdone_blk(regslice_both_kernel_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state11)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_211 <= i_reg_481;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        idxpixel_0_reg_222 <= 11'd0;
    end else if (((icmp_ln54_fu_433_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        idxpixel_0_reg_222 <= idxpixel_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_233 <= p_kernel_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_233 <= p_kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln84_2_reg_522 <= add_ln84_2_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln84_3_reg_547 <= add_ln84_3_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln84_reg_512 <= add_ln84_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_481 <= i_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln54_reg_557 <= icmp_ln54_fu_433_p2;
        icmp_ln54_reg_557_pp1_iter1_reg <= icmp_ln54_reg_557;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln91_reg_566 <= select_ln91_fu_459_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sext_ln84_16_reg_552 <= sext_ln84_16_fu_429_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (icmp_ln33_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln36_reg_486 <= sub_ln36_fu_266_p2;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_433_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_outstream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_outstream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_433_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        instream_TDATA_blk_n = instream_TVALID_int;
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_instream_U_ack_in == 1'b1) & (instream_TVALID == 1'b1))) begin
        instream_TREADY = 1'b1;
    end else begin
        instream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_433_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        instream_TREADY_int = 1'b1;
    end else begin
        instream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln33_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_TDATA_blk_n = kernel_TVALID_int;
    end else begin
        kernel_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_kernel_U_ack_in == 1'b1) & (kernel_TVALID == 1'b1))) begin
        kernel_TREADY = 1'b1;
    end else begin
        kernel_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (icmp_ln33_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        kernel_TREADY_int = 1'b1;
    end else begin
        kernel_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln54_reg_557_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln54_reg_557 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        outstream_TDATA_blk_n = outstream_TREADY_int;
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_557 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        outstream_TVALID_int = 1'b1;
    end else begin
        outstream_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_kernel_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_kernel_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_kernel_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_kernel_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_kernel_address0 = zext_ln36_2_fu_310_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_kernel_address0 = zext_ln36_1_fu_295_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_kernel_address0 = zext_ln36_fu_276_p1;
    end else begin
        p_kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_kernel_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_kernel_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_kernel_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_kernel_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_kernel_address1 = 64'd1;
    end else begin
        p_kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        p_kernel_ce0 = 1'b1;
    end else begin
        p_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        p_kernel_ce1 = 1'b1;
    end else begin
        p_kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_kernel_d0 = trunc_ln36_2_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_kernel_d0 = trunc_ln36_1_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_kernel_d0 = trunc_ln36_fu_281_p1;
    end else begin
        p_kernel_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (icmp_ln33_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        p_kernel_we0 = 1'b1;
    end else begin
        p_kernel_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (icmp_ln33_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0)) & (icmp_ln33_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((kernel_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln54_fu_433_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln54_fu_433_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((regslice_both_outstream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_305_p2 = ($signed(5'd2) + $signed(sub_ln36_reg_486));

assign add_ln36_fu_286_p2 = ($signed(5'd1) + $signed(sub_ln36_reg_486));

assign add_ln84_1_fu_345_p2 = ($signed(sext_ln84_2_fu_334_p1) + $signed(sext_ln84_3_fu_338_p1));

assign add_ln84_2_fu_355_p2 = ($signed(sext_ln84_10_fu_351_p1) + $signed(sext_ln84_9_fu_342_p1));

assign add_ln84_3_fu_369_p2 = ($signed(sext_ln84_4_fu_361_p1) + $signed(sext_ln84_5_fu_365_p1));

assign add_ln84_4_fu_393_p2 = ($signed(sext_ln84_7_fu_379_p1) + $signed(sext_ln84_8_fu_383_p1));

assign add_ln84_5_fu_403_p2 = ($signed(sext_ln84_13_fu_399_p1) + $signed(sext_ln84_6_fu_375_p1));

assign add_ln84_6_fu_413_p2 = ($signed(sext_ln84_14_fu_409_p1) + $signed(sext_ln84_12_fu_390_p1));

assign add_ln84_7_fu_423_p2 = ($signed(sext_ln84_15_fu_419_p1) + $signed(sext_ln84_11_fu_387_p1));

assign add_ln84_fu_328_p2 = ($signed(sext_ln84_fu_320_p1) + $signed(sext_ln84_1_fu_324_p1));

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln54_fu_433_p2 == 1'd0) & (instream_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln54_fu_433_p2 == 1'd0) & (instream_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln54_fu_433_p2 == 1'd0) & (instream_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter0 = ((icmp_ln54_fu_433_p2 == 1'd0) & (instream_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((icmp_ln54_reg_557 == 1'd0) & (outstream_TREADY_int == 1'b0));
end

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((icmp_ln54_reg_557_pp1_iter1_reg == 1'd0) & (outstream_TREADY_int == 1'b0));
end

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((icmp_ln33_fu_238_p2 == 1'd0) & (kernel_TVALID_int == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_244_p2 = (i_0_reg_211 + 2'd1);

assign icmp_ln33_fu_238_p2 = ((i_0_reg_211 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_433_p2 = ((idxpixel_0_reg_222 == 11'd1200) ? 1'b1 : 1'b0);

assign idxpixel_fu_439_p2 = (idxpixel_0_reg_222 + 11'd1);

assign mul_ln84_fu_471_p0 = instream_TDATA_int[15:0];

assign mul_ln84_fu_471_p1 = sext_ln84_16_reg_552;

assign outstream_TDATA_int = select_ln91_reg_566;

assign outstream_TVALID = regslice_both_outstream_U_vld_out;

assign select_ln91_fu_459_p3 = ((tmp_2_fu_452_p3[0:0] === 1'b1) ? 15'd0 : trunc_ln91_fu_449_p1);

assign sext_ln36_1_fu_291_p1 = $signed(add_ln36_fu_286_p2);

assign sext_ln36_fu_272_p1 = sub_ln36_fu_266_p2;

assign sext_ln84_10_fu_351_p1 = $signed(add_ln84_1_fu_345_p2);

assign sext_ln84_11_fu_387_p1 = $signed(add_ln84_2_reg_522);

assign sext_ln84_12_fu_390_p1 = $signed(add_ln84_3_reg_547);

assign sext_ln84_13_fu_399_p1 = $signed(add_ln84_4_fu_393_p2);

assign sext_ln84_14_fu_409_p1 = $signed(add_ln84_5_fu_403_p2);

assign sext_ln84_15_fu_419_p1 = $signed(add_ln84_6_fu_413_p2);

assign sext_ln84_16_fu_429_p1 = $signed(add_ln84_7_fu_423_p2);

assign sext_ln84_1_fu_324_p1 = $signed(p_kernel_q1);

assign sext_ln84_2_fu_334_p1 = $signed(p_kernel_q1);

assign sext_ln84_3_fu_338_p1 = $signed(p_kernel_q0);

assign sext_ln84_4_fu_361_p1 = $signed(reg_233);

assign sext_ln84_5_fu_365_p1 = $signed(p_kernel_q1);

assign sext_ln84_6_fu_375_p1 = $signed(reg_233);

assign sext_ln84_7_fu_379_p1 = $signed(p_kernel_q1);

assign sext_ln84_8_fu_383_p1 = $signed(p_kernel_q0);

assign sext_ln84_9_fu_342_p1 = $signed(add_ln84_reg_512);

assign sext_ln84_fu_320_p1 = $signed(p_kernel_q0);

assign shl_ln_fu_254_p3 = {{i_0_reg_211}, {2'd0}};

assign sub_ln36_fu_266_p2 = (zext_ln36_3_fu_262_p1 - zext_ln33_fu_250_p1);

assign tmp_2_fu_452_p3 = mul_ln84_fu_471_p2[32'd15];

assign trunc_ln36_1_fu_300_p1 = kernel_TDATA_int[7:0];

assign trunc_ln36_2_fu_315_p1 = kernel_TDATA_int[7:0];

assign trunc_ln36_fu_281_p1 = kernel_TDATA_int[7:0];

assign trunc_ln91_fu_449_p1 = mul_ln84_fu_471_p2[14:0];

assign zext_ln33_fu_250_p1 = i_0_reg_211;

assign zext_ln36_1_fu_295_p1 = $unsigned(sext_ln36_1_fu_291_p1);

assign zext_ln36_2_fu_310_p1 = add_ln36_1_fu_305_p2;

assign zext_ln36_3_fu_262_p1 = shl_ln_fu_254_p3;

assign zext_ln36_fu_276_p1 = $unsigned(sext_ln36_fu_272_p1);

endmodule //doConv
