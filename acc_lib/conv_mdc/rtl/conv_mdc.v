// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CONV,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.167000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=3,HLS_SYN_LUT=251,HLS_VERSION=2019_2}" *)

module conv_mdc (
        ap_clk,
        ap_rst_n,
        x1_V_TDATA,
        x1_V_TVALID,
        x1_V_TREADY,
        x2_V_TDATA,
        x2_V_TVALID,
        x2_V_TREADY,
        x1_p_V,
        x2_p_V,
        k11_V,
        k21_V,
        k12_V,
        k22_V,
        y_V_TDATA,
        y_V_TVALID,
        y_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] x1_V_TDATA;
input   x1_V_TVALID;
output   x1_V_TREADY;
input  [31:0] x2_V_TDATA;
input   x2_V_TVALID;
output   x2_V_TREADY;
input  [31:0] x1_p_V;
input  [31:0] x2_p_V;
input  [31:0] k11_V;
input  [31:0] k21_V;
input  [31:0] k12_V;
input  [31:0] k22_V;
output  [31:0] y_V_TDATA;
output   y_V_TVALID;
input   y_V_TREADY;

reg x1_V_TREADY;
reg x2_V_TREADY;

 reg    ap_rst_n_inv;
reg    x1_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    x2_V_TDATA_blk_n;
wire    call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n;
reg    y_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_y_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    call_ln72_exec_fu_94_ap_start;
wire    call_ln72_exec_fu_94_ap_done;
wire    call_ln72_exec_fu_94_ap_idle;
wire    call_ln72_exec_fu_94_ap_ready;
wire    call_ln72_exec_fu_94_x1_in_V_TREADY;
wire    call_ln72_exec_fu_94_x2_in_V_TREADY;
wire   [31:0] call_ln72_exec_fu_94_y_conv_V_TDATA;
wire    call_ln72_exec_fu_94_y_conv_V_TVALID;
wire    call_ln72_exec_fu_94_y_conv_V_TREADY;
wire    call_ln72_exec_fu_94_x1_in_V_TDATA_blk_n;
wire    call_ln72_exec_fu_94_x2_in_V_TDATA_blk_n;
reg    call_ln72_exec_fu_94_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call23;
reg    ap_block_state2_pp0_stage0_iter1_ignore_call23;
reg    ap_block_pp0_stage0_11001_ignoreCallOp11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_x1_V_U_apdone_blk;
wire   [31:0] x1_V_TDATA_int;
wire    x1_V_TVALID_int;
reg    x1_V_TREADY_int;
wire    regslice_both_x1_V_U_ack_in;
wire    regslice_both_x2_V_U_apdone_blk;
wire   [31:0] x2_V_TDATA_int;
wire    x2_V_TVALID_int;
reg    x2_V_TREADY_int;
wire    regslice_both_x2_V_U_ack_in;
wire    y_V_TREADY_int;
wire    regslice_both_y_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

exec call_ln72_exec_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(call_ln72_exec_fu_94_ap_start),
    .ap_done(call_ln72_exec_fu_94_ap_done),
    .ap_idle(call_ln72_exec_fu_94_ap_idle),
    .ap_ready(call_ln72_exec_fu_94_ap_ready),
    .x1_in_V_TDATA(x1_V_TDATA_int),
    .x1_in_V_TVALID(1'b1),
    .x1_in_V_TREADY(call_ln72_exec_fu_94_x1_in_V_TREADY),
    .x2_in_V_TDATA(x2_V_TDATA_int),
    .x2_in_V_TVALID(1'b1),
    .x2_in_V_TREADY(call_ln72_exec_fu_94_x2_in_V_TREADY),
    .x1_in_past_V(x1_p_V),
    .x2_in_past_V(x2_p_V),
    .k11_V(k11_V),
    .k21_V(k21_V),
    .k12_V(k12_V),
    .k22_V(k22_V),
    .y_conv_V_TDATA(call_ln72_exec_fu_94_y_conv_V_TDATA),
    .y_conv_V_TVALID(call_ln72_exec_fu_94_y_conv_V_TVALID),
    .y_conv_V_TREADY(call_ln72_exec_fu_94_y_conv_V_TREADY),
    .x1_in_V_TDATA_blk_n(call_ln72_exec_fu_94_x1_in_V_TDATA_blk_n),
    .x2_in_V_TDATA_blk_n(call_ln72_exec_fu_94_x2_in_V_TDATA_blk_n),
    .y_conv_V_TDATA_blk_n(call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n),
    .ap_ce(call_ln72_exec_fu_94_ap_ce)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_x1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x1_V_TDATA),
    .vld_in(x1_V_TVALID),
    .ack_in(regslice_both_x1_V_U_ack_in),
    .data_out(x1_V_TDATA_int),
    .vld_out(x1_V_TVALID_int),
    .ack_out(x1_V_TREADY_int),
    .apdone_blk(regslice_both_x1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_x2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x2_V_TDATA),
    .vld_in(x2_V_TVALID),
    .ack_in(regslice_both_x2_V_U_ack_in),
    .data_out(x2_V_TDATA_int),
    .vld_out(x2_V_TVALID_int),
    .ack_out(x2_V_TREADY_int),
    .apdone_blk(regslice_both_x2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(call_ln72_exec_fu_94_y_conv_V_TDATA),
    .vld_in(call_ln72_exec_fu_94_y_conv_V_TVALID),
    .ack_in(y_V_TREADY_int),
    .data_out(y_V_TDATA),
    .vld_out(regslice_both_y_V_U_vld_out),
    .ack_out(y_V_TREADY),
    .apdone_blk(regslice_both_y_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        call_ln72_exec_fu_94_ap_ce = 1'b1;
    end else begin
        call_ln72_exec_fu_94_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        call_ln72_exec_fu_94_ap_start = 1'b1;
    end else begin
        call_ln72_exec_fu_94_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x1_V_TDATA_blk_n = x1_V_TVALID_int;
    end else begin
        x1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((x1_V_TVALID == 1'b1) & (regslice_both_x1_V_U_ack_in == 1'b1))) begin
        x1_V_TREADY = 1'b1;
    end else begin
        x1_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x1_V_TREADY_int = 1'b1;
    end else begin
        x1_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x2_V_TDATA_blk_n = x2_V_TVALID_int;
    end else begin
        x2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_x2_V_U_ack_in == 1'b1) & (x2_V_TVALID == 1'b1))) begin
        x2_V_TREADY = 1'b1;
    end else begin
        x2_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x2_V_TREADY_int = 1'b1;
    end else begin
        x2_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_TDATA_blk_n = call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n;
    end else begin
        y_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((regslice_both_y_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n == 1'b0) | (x2_V_TVALID_int == 1'b0) | (x1_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp11 = (((regslice_both_y_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((x2_V_TVALID_int == 1'b0) | (x1_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((regslice_both_y_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n == 1'b0) | (x2_V_TVALID_int == 1'b0) | (x1_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((call_ln72_exec_fu_94_y_conv_V_TDATA_blk_n == 1'b0) | (x2_V_TVALID_int == 1'b0) | (x1_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call23 = ((x2_V_TVALID_int == 1'b0) | (x1_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (regslice_both_y_V_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_ignore_call23 = (regslice_both_y_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign call_ln72_exec_fu_94_y_conv_V_TREADY = (y_V_TREADY_int & ap_CS_fsm_pp0_stage0);

assign y_V_TVALID = regslice_both_y_V_U_vld_out;

endmodule //CONV
