// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loop_x_y_yaw_proc66 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_0_V1_din,
        inStream_0_V1_full_n,
        inStream_0_V1_write,
        yaw_TDATA,
        yaw_TVALID,
        yaw_TREADY,
        i1_0,
        y_TDATA,
        y_TVALID,
        y_TREADY,
        x_TDATA,
        x_TVALID,
        x_TREADY,
        inStream_1_V2_din,
        inStream_1_V2_full_n,
        inStream_1_V2_write,
        inStream_2_V3_din,
        inStream_2_V3_full_n,
        inStream_2_V3_write,
        inStream_3_V4_din,
        inStream_3_V4_full_n,
        inStream_3_V4_write,
        inStream_4_V5_din,
        inStream_4_V5_full_n,
        inStream_4_V5_write,
        orig_x,
        orig_y,
        map_width,
        map_height,
        map_resolution,
        maxRange,
        i1_0_out_din,
        i1_0_out_full_n,
        i1_0_out_write,
        orig_x_out_din,
        orig_x_out_full_n,
        orig_x_out_write,
        orig_y_out_din,
        orig_y_out_full_n,
        orig_y_out_write,
        map_width_out_din,
        map_width_out_full_n,
        map_width_out_write,
        map_height_out_din,
        map_height_out_full_n,
        map_height_out_write,
        map_resolution_out_din,
        map_resolution_out_full_n,
        map_resolution_out_write,
        maxRange_out_din,
        maxRange_out_full_n,
        maxRange_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [31:0] inStream_0_V1_din;
input   inStream_0_V1_full_n;
output   inStream_0_V1_write;
input  [31:0] yaw_TDATA;
input   yaw_TVALID;
output   yaw_TREADY;
input  [15:0] i1_0;
input  [31:0] y_TDATA;
input   y_TVALID;
output   y_TREADY;
input  [31:0] x_TDATA;
input   x_TVALID;
output   x_TREADY;
output  [31:0] inStream_1_V2_din;
input   inStream_1_V2_full_n;
output   inStream_1_V2_write;
output  [31:0] inStream_2_V3_din;
input   inStream_2_V3_full_n;
output   inStream_2_V3_write;
output  [31:0] inStream_3_V4_din;
input   inStream_3_V4_full_n;
output   inStream_3_V4_write;
output  [31:0] inStream_4_V5_din;
input   inStream_4_V5_full_n;
output   inStream_4_V5_write;
input  [31:0] orig_x;
input  [31:0] orig_y;
input  [31:0] map_width;
input  [31:0] map_height;
input  [31:0] map_resolution;
input  [31:0] maxRange;
output  [15:0] i1_0_out_din;
input   i1_0_out_full_n;
output   i1_0_out_write;
output  [31:0] orig_x_out_din;
input   orig_x_out_full_n;
output   orig_x_out_write;
output  [31:0] orig_y_out_din;
input   orig_y_out_full_n;
output   orig_y_out_write;
output  [31:0] map_width_out_din;
input   map_width_out_full_n;
output   map_width_out_write;
output  [31:0] map_height_out_din;
input   map_height_out_full_n;
output   map_height_out_write;
output  [31:0] map_resolution_out_din;
input   map_resolution_out_full_n;
output   map_resolution_out_write;
output  [31:0] maxRange_out_din;
input   maxRange_out_full_n;
output   maxRange_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[31:0] inStream_0_V1_din;
reg inStream_0_V1_write;
reg yaw_TREADY;
reg y_TREADY;
reg x_TREADY;
reg[31:0] inStream_1_V2_din;
reg inStream_1_V2_write;
reg[31:0] inStream_2_V3_din;
reg inStream_2_V3_write;
reg[31:0] inStream_3_V4_din;
reg inStream_3_V4_write;
reg[31:0] inStream_4_V5_din;
reg inStream_4_V5_write;
reg i1_0_out_write;
reg orig_x_out_write;
reg orig_y_out_write;
reg map_width_out_write;
reg map_height_out_write;
reg map_resolution_out_write;
reg maxRange_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_0_V1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [2:0] select_ln171_reg_471;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln168_reg_462;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    yaw_TDATA_blk_n;
reg    y_TDATA_blk_n;
reg    x_TDATA_blk_n;
reg    inStream_1_V2_blk_n;
reg    inStream_2_V3_blk_n;
reg    inStream_3_V4_blk_n;
reg    inStream_4_V5_blk_n;
reg    i1_0_out_blk_n;
reg    orig_x_out_blk_n;
reg    orig_y_out_blk_n;
reg    map_width_out_blk_n;
reg    map_height_out_blk_n;
reg    map_resolution_out_blk_n;
reg    maxRange_out_blk_n;
reg   [6:0] indvar_flatten_reg_409;
reg   [2:0] p3_0_i_i_i_reg_420;
wire   [0:0] icmp_ln168_fu_431_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op84_write_state5;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln168_fu_437_p2;
reg   [6:0] add_ln168_reg_466;
wire   [2:0] select_ln171_fu_449_p3;
reg   [31:0] tmp_2_reg_476;
reg    ap_predicate_op53_write_state4;
reg    ap_predicate_op54_write_state4;
reg    ap_predicate_op55_write_state4;
reg    ap_predicate_op56_write_state4;
reg    ap_predicate_op57_write_state4;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [2:0] p_fu_457_p2;
reg   [2:0] p_reg_485;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_413_p4;
reg   [2:0] ap_phi_mux_p3_0_i_i_i_phi_fu_424_p4;
reg    ap_predicate_op45_write_state3;
reg    ap_predicate_op46_write_state3;
reg    ap_predicate_op47_write_state3;
reg    ap_predicate_op48_write_state3;
reg    ap_predicate_op49_write_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln171_fu_443_p2;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_462 == 1'd0))) begin
        indvar_flatten_reg_409 <= add_ln168_reg_466;
    end else if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_409 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_462 == 1'd0))) begin
        p3_0_i_i_i_reg_420 <= p_reg_485;
    end else if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p3_0_i_i_i_reg_420 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln168_reg_466 <= add_ln168_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln168_reg_462 <= icmp_ln168_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0))) begin
        p_reg_485 <= p_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_fu_431_p2 == 1'd0))) begin
        select_ln171_reg_471 <= select_ln171_fu_449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0))) begin
        tmp_2_reg_476 <= yaw_TDATA;
    end
end

always @ (*) begin
    if ((icmp_ln168_fu_431_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_413_p4 = add_ln168_reg_466;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_413_p4 = indvar_flatten_reg_409;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_p3_0_i_i_i_phi_fu_424_p4 = p_reg_485;
    end else begin
        ap_phi_mux_p3_0_i_i_i_phi_fu_424_p4 = p3_0_i_i_i_reg_420;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_out_blk_n = i1_0_out_full_n;
    end else begin
        i1_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_out_write = 1'b1;
    end else begin
        i1_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (select_ln171_reg_471 == 3'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        inStream_0_V1_blk_n = inStream_0_V1_full_n;
    end else begin
        inStream_0_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd0))) begin
        inStream_0_V1_din = tmp_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op56_write_state4 == 1'b1))) begin
        inStream_0_V1_din = y_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op48_write_state3 == 1'b1))) begin
        inStream_0_V1_din = x_TDATA;
    end else begin
        inStream_0_V1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op48_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op56_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd0)))) begin
        inStream_0_V1_write = 1'b1;
    end else begin
        inStream_0_V1_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (select_ln171_reg_471 == 3'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        inStream_1_V2_blk_n = inStream_1_V2_full_n;
    end else begin
        inStream_1_V2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd1))) begin
        inStream_1_V2_din = tmp_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op55_write_state4 == 1'b1))) begin
        inStream_1_V2_din = y_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op47_write_state3 == 1'b1))) begin
        inStream_1_V2_din = x_TDATA;
    end else begin
        inStream_1_V2_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op47_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op55_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd1)))) begin
        inStream_1_V2_write = 1'b1;
    end else begin
        inStream_1_V2_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (select_ln171_reg_471 == 3'd2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd2) & (1'b0 == ap_block_pp0_stage0)))) begin
        inStream_2_V3_blk_n = inStream_2_V3_full_n;
    end else begin
        inStream_2_V3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd2))) begin
        inStream_2_V3_din = tmp_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op54_write_state4 == 1'b1))) begin
        inStream_2_V3_din = y_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op46_write_state3 == 1'b1))) begin
        inStream_2_V3_din = x_TDATA;
    end else begin
        inStream_2_V3_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op46_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op54_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd2)))) begin
        inStream_2_V3_write = 1'b1;
    end else begin
        inStream_2_V3_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (select_ln171_reg_471 == 3'd3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd3) & (1'b0 == ap_block_pp0_stage0)))) begin
        inStream_3_V4_blk_n = inStream_3_V4_full_n;
    end else begin
        inStream_3_V4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd3))) begin
        inStream_3_V4_din = tmp_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op53_write_state4 == 1'b1))) begin
        inStream_3_V4_din = y_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op45_write_state3 == 1'b1))) begin
        inStream_3_V4_din = x_TDATA;
    end else begin
        inStream_3_V4_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op45_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op53_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln171_reg_471 == 3'd3)))) begin
        inStream_3_V4_write = 1'b1;
    end else begin
        inStream_3_V4_write = 1'b0;
    end
end

always @ (*) begin
    if (((~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0)) | (~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | (~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        inStream_4_V5_blk_n = inStream_4_V5_full_n;
    end else begin
        inStream_4_V5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op84_write_state5 == 1'b1))) begin
        inStream_4_V5_din = tmp_2_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op57_write_state4 == 1'b1))) begin
        inStream_4_V5_din = y_TDATA;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op49_write_state3 == 1'b1))) begin
        inStream_4_V5_din = x_TDATA;
    end else begin
        inStream_4_V5_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op49_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op57_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op84_write_state5 == 1'b1)))) begin
        inStream_4_V5_write = 1'b1;
    end else begin
        inStream_4_V5_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_height_out_blk_n = map_height_out_full_n;
    end else begin
        map_height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_height_out_write = 1'b1;
    end else begin
        map_height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_resolution_out_blk_n = map_resolution_out_full_n;
    end else begin
        map_resolution_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_resolution_out_write = 1'b1;
    end else begin
        map_resolution_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_width_out_blk_n = map_width_out_full_n;
    end else begin
        map_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_width_out_write = 1'b1;
    end else begin
        map_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxRange_out_blk_n = maxRange_out_full_n;
    end else begin
        maxRange_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxRange_out_write = 1'b1;
    end else begin
        maxRange_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_x_out_blk_n = orig_x_out_full_n;
    end else begin
        orig_x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_x_out_write = 1'b1;
    end else begin
        orig_x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_y_out_blk_n = orig_y_out_full_n;
    end else begin
        orig_y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_y_out_write = 1'b1;
    end else begin
        orig_y_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln168_reg_462 == 1'd0))) begin
        x_TDATA_blk_n = x_TVALID;
    end else begin
        x_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln168_reg_462 == 1'd0))) begin
        x_TREADY = 1'b1;
    end else begin
        x_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2))) begin
        y_TDATA_blk_n = y_TVALID;
    end else begin
        y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0))) begin
        y_TREADY = 1'b1;
    end else begin
        y_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0) & (1'b0 == ap_block_pp0_stage2))) begin
        yaw_TDATA_blk_n = yaw_TVALID;
    end else begin
        yaw_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln168_reg_462 == 1'd0))) begin
        yaw_TREADY = 1'b1;
    end else begin
        yaw_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln168_fu_431_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln168_fu_431_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_fu_437_p2 = (ap_phi_mux_indvar_flatten_phi_fu_413_p4 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op84_write_state5 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (select_ln171_reg_471 == 3'd3)) | ((inStream_2_V3_full_n == 1'b0) & (select_ln171_reg_471 == 3'd2)) | ((inStream_1_V2_full_n == 1'b0) & (select_ln171_reg_471 == 3'd1)) | ((inStream_0_V1_full_n == 1'b0) & (select_ln171_reg_471 == 3'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op84_write_state5 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (select_ln171_reg_471 == 3'd3)) | ((inStream_2_V3_full_n == 1'b0) & (select_ln171_reg_471 == 3'd2)) | ((inStream_1_V2_full_n == 1'b0) & (select_ln171_reg_471 == 3'd1)) | ((inStream_0_V1_full_n == 1'b0) & (select_ln171_reg_471 == 3'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op84_write_state5 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (select_ln171_reg_471 == 3'd3)) | ((inStream_2_V3_full_n == 1'b0) & (select_ln171_reg_471 == 3'd2)) | ((inStream_1_V2_full_n == 1'b0) & (select_ln171_reg_471 == 3'd1)) | ((inStream_0_V1_full_n == 1'b0) & (select_ln171_reg_471 == 3'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op49_write_state3 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op48_write_state3 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op47_write_state3 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((x_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op49_write_state3 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op48_write_state3 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op47_write_state3 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((x_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op49_write_state3 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op48_write_state3 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op47_write_state3 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((x_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op56_write_state4 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op55_write_state4 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op54_write_state4 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op53_write_state4 == 1'b1)) | ((yaw_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)) | ((y_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op56_write_state4 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op55_write_state4 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op54_write_state4 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op53_write_state4 == 1'b1)) | ((yaw_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)) | ((y_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op56_write_state4 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op55_write_state4 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op54_write_state4 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op53_write_state4 == 1'b1)) | ((yaw_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)) | ((y_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((map_resolution_out_full_n == 1'b0) | (map_height_out_full_n == 1'b0) | (map_width_out_full_n == 1'b0) | (orig_y_out_full_n == 1'b0) | (orig_x_out_full_n == 1'b0) | (i1_0_out_full_n == 1'b0) | (real_start == 1'b0) | (maxRange_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op49_write_state3 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op48_write_state3 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op47_write_state3 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((x_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)) | ((inStream_0_V1_full_n == 1'b0) & (ap_predicate_op56_write_state4 == 1'b1)) | ((inStream_1_V2_full_n == 1'b0) & (ap_predicate_op55_write_state4 == 1'b1)) | ((inStream_2_V3_full_n == 1'b0) & (ap_predicate_op54_write_state4 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (ap_predicate_op53_write_state4 == 1'b1)) | ((yaw_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)) | ((y_TVALID == 1'b0) & (icmp_ln168_reg_462 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((inStream_4_V5_full_n == 1'b0) & (ap_predicate_op84_write_state5 == 1'b1)) | ((inStream_3_V4_full_n == 1'b0) & (select_ln171_reg_471 == 3'd3)) | ((inStream_2_V3_full_n == 1'b0) & (select_ln171_reg_471 == 3'd2)) | ((inStream_1_V2_full_n == 1'b0) & (select_ln171_reg_471 == 3'd1)) | ((inStream_0_V1_full_n == 1'b0) & (select_ln171_reg_471 == 3'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op45_write_state3 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd3));
end

always @ (*) begin
    ap_predicate_op46_write_state3 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd2));
end

always @ (*) begin
    ap_predicate_op47_write_state3 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd1));
end

always @ (*) begin
    ap_predicate_op48_write_state3 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd0));
end

always @ (*) begin
    ap_predicate_op49_write_state3 = (~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0) & (icmp_ln168_reg_462 == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_write_state4 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd3));
end

always @ (*) begin
    ap_predicate_op54_write_state4 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd2));
end

always @ (*) begin
    ap_predicate_op55_write_state4 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd1));
end

always @ (*) begin
    ap_predicate_op56_write_state4 = ((icmp_ln168_reg_462 == 1'd0) & (select_ln171_reg_471 == 3'd0));
end

always @ (*) begin
    ap_predicate_op57_write_state4 = (~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0) & (icmp_ln168_reg_462 == 1'd0));
end

always @ (*) begin
    ap_predicate_op84_write_state5 = (~(select_ln171_reg_471 == 3'd3) & ~(select_ln171_reg_471 == 3'd2) & ~(select_ln171_reg_471 == 3'd1) & ~(select_ln171_reg_471 == 3'd0));
end

assign ap_ready = internal_ap_ready;

assign i1_0_out_din = i1_0;

assign icmp_ln168_fu_431_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_413_p4 == 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_443_p2 = ((ap_phi_mux_p3_0_i_i_i_phi_fu_424_p4 == 3'd5) ? 1'b1 : 1'b0);

assign map_height_out_din = map_height;

assign map_resolution_out_din = map_resolution;

assign map_width_out_din = map_width;

assign maxRange_out_din = maxRange;

assign orig_x_out_din = orig_x;

assign orig_y_out_din = orig_y;

assign p_fu_457_p2 = (select_ln171_reg_471 + 3'd1);

assign select_ln171_fu_449_p3 = ((icmp_ln171_fu_443_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_p3_0_i_i_i_phi_fu_424_p4);

assign start_out = real_start;

endmodule //loop_x_y_yaw_proc66
