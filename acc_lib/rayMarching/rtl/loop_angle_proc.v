// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loop_angle_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inStream_0_V_dout,
        inStream_0_V_empty_n,
        inStream_0_V_read,
        p_distMap_0_address0,
        p_distMap_0_ce0,
        p_distMap_0_q0,
        orig_x_dout,
        orig_x_empty_n,
        orig_x_read,
        orig_y_dout,
        orig_y_empty_n,
        orig_y_read,
        map_width_dout,
        map_width_empty_n,
        map_width_read,
        map_height_dout,
        map_height_empty_n,
        map_height_read,
        map_resolution_dout,
        map_resolution_empty_n,
        map_resolution_read,
        maxRange_dout,
        maxRange_empty_n,
        maxRange_read,
        inStream_1_V_dout,
        inStream_1_V_empty_n,
        inStream_1_V_read,
        p_distMap_1_address0,
        p_distMap_1_ce0,
        p_distMap_1_q0,
        inStream_2_V_dout,
        inStream_2_V_empty_n,
        inStream_2_V_read,
        p_distMap_2_address0,
        p_distMap_2_ce0,
        p_distMap_2_q0,
        inStream_3_V_dout,
        inStream_3_V_empty_n,
        inStream_3_V_read,
        p_distMap_3_address0,
        p_distMap_3_ce0,
        p_distMap_3_q0,
        inStream_4_V_dout,
        inStream_4_V_empty_n,
        inStream_4_V_read,
        p_distMap_4_address0,
        p_distMap_4_ce0,
        p_distMap_4_q0,
        outputStream_V_din,
        outputStream_V_full_n,
        outputStream_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] inStream_0_V_dout;
input   inStream_0_V_empty_n;
output   inStream_0_V_read;
output  [17:0] p_distMap_0_address0;
output   p_distMap_0_ce0;
input  [31:0] p_distMap_0_q0;
input  [31:0] orig_x_dout;
input   orig_x_empty_n;
output   orig_x_read;
input  [31:0] orig_y_dout;
input   orig_y_empty_n;
output   orig_y_read;
input  [31:0] map_width_dout;
input   map_width_empty_n;
output   map_width_read;
input  [31:0] map_height_dout;
input   map_height_empty_n;
output   map_height_read;
input  [31:0] map_resolution_dout;
input   map_resolution_empty_n;
output   map_resolution_read;
input  [31:0] maxRange_dout;
input   maxRange_empty_n;
output   maxRange_read;
input  [31:0] inStream_1_V_dout;
input   inStream_1_V_empty_n;
output   inStream_1_V_read;
output  [17:0] p_distMap_1_address0;
output   p_distMap_1_ce0;
input  [31:0] p_distMap_1_q0;
input  [31:0] inStream_2_V_dout;
input   inStream_2_V_empty_n;
output   inStream_2_V_read;
output  [17:0] p_distMap_2_address0;
output   p_distMap_2_ce0;
input  [31:0] p_distMap_2_q0;
input  [31:0] inStream_3_V_dout;
input   inStream_3_V_empty_n;
output   inStream_3_V_read;
output  [17:0] p_distMap_3_address0;
output   p_distMap_3_ce0;
input  [31:0] p_distMap_3_q0;
input  [31:0] inStream_4_V_dout;
input   inStream_4_V_empty_n;
output   inStream_4_V_read;
output  [17:0] p_distMap_4_address0;
output   p_distMap_4_ce0;
input  [31:0] p_distMap_4_q0;
output  [31:0] outputStream_V_din;
input   outputStream_V_full_n;
output   outputStream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_0_V_read;
reg orig_x_read;
reg orig_y_read;
reg map_width_read;
reg map_height_read;
reg map_resolution_read;
reg maxRange_read;
reg inStream_1_V_read;
reg inStream_2_V_read;
reg inStream_3_V_read;
reg inStream_4_V_read;
reg[31:0] outputStream_V_din;
reg outputStream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStream_0_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln186_fu_375_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    orig_x_blk_n;
reg    orig_y_blk_n;
reg    map_width_blk_n;
reg    map_height_blk_n;
reg    map_resolution_blk_n;
reg    maxRange_blk_n;
reg    inStream_1_V_blk_n;
reg    inStream_2_V_blk_n;
reg    inStream_3_V_blk_n;
reg    inStream_4_V_blk_n;
reg    outputStream_V_blk_n;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln209_reg_566;
wire    ap_CS_fsm_state6;
reg   [0:0] icmp_ln209_1_reg_590;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln209_2_reg_594;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln209_3_reg_598;
reg   [31:0] orig_x_read_reg_436;
reg    ap_block_state1;
reg   [31:0] orig_y_read_reg_445;
reg   [31:0] map_width_read_reg_454;
reg   [31:0] map_height_read_reg_463;
reg   [31:0] map_resolution_read_reg_472;
reg   [31:0] maxRange_read_reg_481;
reg   [31:0] tmp_reg_493;
reg    ap_block_state2;
reg   [31:0] tmp_4_reg_498;
reg   [31:0] tmp_6_reg_503;
reg   [31:0] tmp_8_reg_508;
reg   [31:0] tmp_10_reg_513;
reg   [31:0] tmp_3_reg_518;
reg    ap_block_state3;
reg   [31:0] tmp_5_reg_523;
wire   [10:0] add_ln200_fu_381_p2;
reg   [10:0] add_ln200_reg_528;
reg   [31:0] tmp_7_reg_533;
wire   [10:0] add_ln200_1_fu_388_p2;
reg   [10:0] add_ln200_1_reg_538;
reg   [31:0] tmp_9_reg_544;
wire   [10:0] add_ln200_2_fu_395_p2;
reg   [10:0] add_ln200_2_reg_549;
reg   [31:0] tmp_11_reg_555;
wire   [10:0] add_ln200_3_fu_402_p2;
reg   [10:0] add_ln200_3_reg_560;
wire   [0:0] icmp_ln209_fu_409_p2;
wire   [31:0] grp_computeRay_fu_311_ap_return;
reg   [31:0] p_ray_1_reg_570;
reg    ap_block_state4;
wire    grp_computeRay_fu_293_ap_ready;
wire    grp_computeRay_fu_293_ap_done;
wire    grp_computeRay_fu_311_ap_ready;
wire    grp_computeRay_fu_311_ap_done;
wire    grp_computeRay_fu_327_ap_ready;
wire    grp_computeRay_fu_327_ap_done;
wire    grp_computeRay_fu_343_ap_ready;
wire    grp_computeRay_fu_343_ap_done;
wire    grp_computeRay_fu_359_ap_ready;
wire    grp_computeRay_fu_359_ap_done;
reg    ap_block_state4_on_subcall_done;
wire   [31:0] grp_computeRay_fu_327_ap_return;
reg   [31:0] p_ray_2_reg_575;
wire   [31:0] grp_computeRay_fu_343_ap_return;
reg   [31:0] p_ray_3_reg_580;
wire   [31:0] grp_computeRay_fu_359_ap_return;
reg   [31:0] p_ray_4_reg_585;
wire   [0:0] icmp_ln209_1_fu_415_p2;
reg    ap_block_state5;
wire   [0:0] icmp_ln209_2_fu_420_p2;
reg    ap_block_state6;
wire   [0:0] icmp_ln209_3_fu_425_p2;
reg    ap_block_state7;
wire   [10:0] j_fu_430_p2;
reg    ap_block_state8;
wire    grp_computeRay_fu_293_ap_start;
wire    grp_computeRay_fu_293_ap_idle;
wire   [17:0] grp_computeRay_fu_293_p_distMap_address0;
wire    grp_computeRay_fu_293_p_distMap_ce0;
wire   [31:0] grp_computeRay_fu_293_ap_return;
wire    grp_computeRay_fu_311_ap_start;
wire    grp_computeRay_fu_311_ap_idle;
wire   [17:0] grp_computeRay_fu_311_p_distMap_address0;
wire    grp_computeRay_fu_311_p_distMap_ce0;
wire    grp_computeRay_fu_327_ap_start;
wire    grp_computeRay_fu_327_ap_idle;
wire   [17:0] grp_computeRay_fu_327_p_distMap_address0;
wire    grp_computeRay_fu_327_p_distMap_ce0;
wire    grp_computeRay_fu_343_ap_start;
wire    grp_computeRay_fu_343_ap_idle;
wire   [17:0] grp_computeRay_fu_343_p_distMap_address0;
wire    grp_computeRay_fu_343_p_distMap_ce0;
wire    grp_computeRay_fu_359_ap_start;
wire    grp_computeRay_fu_359_ap_idle;
wire   [17:0] grp_computeRay_fu_359_p_distMap_address0;
wire    grp_computeRay_fu_359_p_distMap_ce0;
reg   [10:0] j4_0_i_reg_281;
reg    grp_computeRay_fu_293_ap_start_reg;
reg    ap_block_state3_ignore_call4;
reg    grp_computeRay_fu_311_ap_start_reg;
reg    ap_block_state3_ignore_call9;
reg    grp_computeRay_fu_327_ap_start_reg;
reg    ap_block_state3_ignore_call14;
reg    grp_computeRay_fu_343_ap_start_reg;
reg    ap_block_state3_ignore_call19;
reg    grp_computeRay_fu_359_ap_start_reg;
reg    ap_block_state3_ignore_call24;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 grp_computeRay_fu_293_ap_start_reg = 1'b0;
#0 grp_computeRay_fu_311_ap_start_reg = 1'b0;
#0 grp_computeRay_fu_327_ap_start_reg = 1'b0;
#0 grp_computeRay_fu_343_ap_start_reg = 1'b0;
#0 grp_computeRay_fu_359_ap_start_reg = 1'b0;
end

computeRay grp_computeRay_fu_293(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeRay_fu_293_ap_start),
    .ap_done(grp_computeRay_fu_293_ap_done),
    .ap_idle(grp_computeRay_fu_293_ap_idle),
    .ap_ready(grp_computeRay_fu_293_ap_ready),
    .p_distMap_address0(grp_computeRay_fu_293_p_distMap_address0),
    .p_distMap_ce0(grp_computeRay_fu_293_p_distMap_ce0),
    .p_distMap_q0(p_distMap_0_q0),
    .orig_x(orig_x_read_reg_436),
    .orig_y(orig_y_read_reg_445),
    .ray(j4_0_i_reg_281),
    .x(tmp_reg_493),
    .y(tmp_3_reg_518),
    .map_width(map_width_read_reg_454),
    .map_height(map_height_read_reg_463),
    .map_resolution(map_resolution_read_reg_472),
    .maxRange(maxRange_read_reg_481),
    .ap_return(grp_computeRay_fu_293_ap_return)
);

computeRay grp_computeRay_fu_311(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeRay_fu_311_ap_start),
    .ap_done(grp_computeRay_fu_311_ap_done),
    .ap_idle(grp_computeRay_fu_311_ap_idle),
    .ap_ready(grp_computeRay_fu_311_ap_ready),
    .p_distMap_address0(grp_computeRay_fu_311_p_distMap_address0),
    .p_distMap_ce0(grp_computeRay_fu_311_p_distMap_ce0),
    .p_distMap_q0(p_distMap_1_q0),
    .orig_x(orig_x_read_reg_436),
    .orig_y(orig_y_read_reg_445),
    .ray(add_ln200_reg_528),
    .x(tmp_4_reg_498),
    .y(tmp_5_reg_523),
    .map_width(map_width_read_reg_454),
    .map_height(map_height_read_reg_463),
    .map_resolution(map_resolution_read_reg_472),
    .maxRange(maxRange_read_reg_481),
    .ap_return(grp_computeRay_fu_311_ap_return)
);

computeRay grp_computeRay_fu_327(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeRay_fu_327_ap_start),
    .ap_done(grp_computeRay_fu_327_ap_done),
    .ap_idle(grp_computeRay_fu_327_ap_idle),
    .ap_ready(grp_computeRay_fu_327_ap_ready),
    .p_distMap_address0(grp_computeRay_fu_327_p_distMap_address0),
    .p_distMap_ce0(grp_computeRay_fu_327_p_distMap_ce0),
    .p_distMap_q0(p_distMap_2_q0),
    .orig_x(orig_x_read_reg_436),
    .orig_y(orig_y_read_reg_445),
    .ray(add_ln200_1_reg_538),
    .x(tmp_6_reg_503),
    .y(tmp_7_reg_533),
    .map_width(map_width_read_reg_454),
    .map_height(map_height_read_reg_463),
    .map_resolution(map_resolution_read_reg_472),
    .maxRange(maxRange_read_reg_481),
    .ap_return(grp_computeRay_fu_327_ap_return)
);

computeRay grp_computeRay_fu_343(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeRay_fu_343_ap_start),
    .ap_done(grp_computeRay_fu_343_ap_done),
    .ap_idle(grp_computeRay_fu_343_ap_idle),
    .ap_ready(grp_computeRay_fu_343_ap_ready),
    .p_distMap_address0(grp_computeRay_fu_343_p_distMap_address0),
    .p_distMap_ce0(grp_computeRay_fu_343_p_distMap_ce0),
    .p_distMap_q0(p_distMap_3_q0),
    .orig_x(orig_x_read_reg_436),
    .orig_y(orig_y_read_reg_445),
    .ray(add_ln200_2_reg_549),
    .x(tmp_8_reg_508),
    .y(tmp_9_reg_544),
    .map_width(map_width_read_reg_454),
    .map_height(map_height_read_reg_463),
    .map_resolution(map_resolution_read_reg_472),
    .maxRange(maxRange_read_reg_481),
    .ap_return(grp_computeRay_fu_343_ap_return)
);

computeRay grp_computeRay_fu_359(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeRay_fu_359_ap_start),
    .ap_done(grp_computeRay_fu_359_ap_done),
    .ap_idle(grp_computeRay_fu_359_ap_idle),
    .ap_ready(grp_computeRay_fu_359_ap_ready),
    .p_distMap_address0(grp_computeRay_fu_359_p_distMap_address0),
    .p_distMap_ce0(grp_computeRay_fu_359_p_distMap_ce0),
    .p_distMap_q0(p_distMap_4_q0),
    .orig_x(orig_x_read_reg_436),
    .orig_y(orig_y_read_reg_445),
    .ray(add_ln200_3_reg_560),
    .x(tmp_10_reg_513),
    .y(tmp_11_reg_555),
    .map_width(map_width_read_reg_454),
    .map_height(map_height_read_reg_463),
    .map_resolution(map_resolution_read_reg_472),
    .maxRange(maxRange_read_reg_481),
    .ap_return(grp_computeRay_fu_359_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeRay_fu_293_ap_start_reg <= 1'b0;
    end else begin
        if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_computeRay_fu_293_ap_start_reg <= 1'b1;
        end else if ((grp_computeRay_fu_293_ap_ready == 1'b1)) begin
            grp_computeRay_fu_293_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeRay_fu_311_ap_start_reg <= 1'b0;
    end else begin
        if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_computeRay_fu_311_ap_start_reg <= 1'b1;
        end else if ((grp_computeRay_fu_311_ap_ready == 1'b1)) begin
            grp_computeRay_fu_311_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeRay_fu_327_ap_start_reg <= 1'b0;
    end else begin
        if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_computeRay_fu_327_ap_start_reg <= 1'b1;
        end else if ((grp_computeRay_fu_327_ap_ready == 1'b1)) begin
            grp_computeRay_fu_327_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeRay_fu_343_ap_start_reg <= 1'b0;
    end else begin
        if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_computeRay_fu_343_ap_start_reg <= 1'b1;
        end else if ((grp_computeRay_fu_343_ap_ready == 1'b1)) begin
            grp_computeRay_fu_343_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeRay_fu_359_ap_start_reg <= 1'b0;
    end else begin
        if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_computeRay_fu_359_ap_start_reg <= 1'b1;
        end else if ((grp_computeRay_fu_359_ap_ready == 1'b1)) begin
            grp_computeRay_fu_359_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j4_0_i_reg_281 <= 11'd0;
    end else if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_3_reg_598 == 1'd1)) & (1'b1 == ap_CS_fsm_state8))) begin
        j4_0_i_reg_281 <= j_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln200_1_reg_538 <= add_ln200_1_fu_388_p2;
        add_ln200_2_reg_549 <= add_ln200_2_fu_395_p2;
        add_ln200_3_reg_560 <= add_ln200_3_fu_402_p2;
        add_ln200_reg_528 <= add_ln200_fu_381_p2;
        icmp_ln209_reg_566 <= icmp_ln209_fu_409_p2;
        tmp_11_reg_555 <= inStream_4_V_dout;
        tmp_3_reg_518 <= inStream_0_V_dout;
        tmp_5_reg_523 <= inStream_1_V_dout;
        tmp_7_reg_533 <= inStream_2_V_dout;
        tmp_9_reg_544 <= inStream_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_reg_566 == 1'd1)) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln209_1_reg_590 <= icmp_ln209_1_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_1_reg_590 == 1'd1)) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln209_2_reg_594 <= icmp_ln209_2_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_2_reg_594 == 1'd1)) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln209_3_reg_598 <= icmp_ln209_3_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_height_read_reg_463 <= map_height_dout;
        map_resolution_read_reg_472 <= map_resolution_dout;
        map_width_read_reg_454 <= map_width_dout;
        maxRange_read_reg_481 <= maxRange_dout;
        orig_x_read_reg_436 <= orig_x_dout;
        orig_y_read_reg_445 <= orig_y_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4))) begin
        p_ray_1_reg_570 <= grp_computeRay_fu_311_ap_return;
        p_ray_2_reg_575 <= grp_computeRay_fu_327_ap_return;
        p_ray_3_reg_580 <= grp_computeRay_fu_343_ap_return;
        p_ray_4_reg_585 <= grp_computeRay_fu_359_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1))) begin
        tmp_10_reg_513 <= inStream_4_V_dout;
        tmp_4_reg_498 <= inStream_1_V_dout;
        tmp_6_reg_503 <= inStream_2_V_dout;
        tmp_8_reg_508 <= inStream_3_V_dout;
        tmp_reg_493 <= inStream_0_V_dout;
    end
end

always @ (*) begin
    if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_0_V_blk_n = inStream_0_V_empty_n;
    end else begin
        inStream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_0_V_read = 1'b1;
    end else begin
        inStream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_1_V_blk_n = inStream_1_V_empty_n;
    end else begin
        inStream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_1_V_read = 1'b1;
    end else begin
        inStream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_2_V_blk_n = inStream_2_V_empty_n;
    end else begin
        inStream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_2_V_read = 1'b1;
    end else begin
        inStream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_3_V_blk_n = inStream_3_V_empty_n;
    end else begin
        inStream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_3_V_read = 1'b1;
    end else begin
        inStream_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_4_V_blk_n = inStream_4_V_empty_n;
    end else begin
        inStream_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1)))) begin
        inStream_4_V_read = 1'b1;
    end else begin
        inStream_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_height_blk_n = map_height_empty_n;
    end else begin
        map_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_height_read = 1'b1;
    end else begin
        map_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_resolution_blk_n = map_resolution_empty_n;
    end else begin
        map_resolution_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_resolution_read = 1'b1;
    end else begin
        map_resolution_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_width_blk_n = map_width_empty_n;
    end else begin
        map_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        map_width_read = 1'b1;
    end else begin
        map_width_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxRange_blk_n = maxRange_empty_n;
    end else begin
        maxRange_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maxRange_read = 1'b1;
    end else begin
        maxRange_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_x_blk_n = orig_x_empty_n;
    end else begin
        orig_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_x_read = 1'b1;
    end else begin
        orig_x_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_y_blk_n = orig_y_empty_n;
    end else begin
        orig_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        orig_y_read = 1'b1;
    end else begin
        orig_y_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln209_3_reg_598 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln209_2_reg_594 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln209_1_reg_590 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln209_reg_566 == 1'd1)))) begin
        outputStream_V_blk_n = outputStream_V_full_n;
    end else begin
        outputStream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_3_reg_598 == 1'd1)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln209_3_reg_598 == 1'd1))) begin
        outputStream_V_din = p_ray_4_reg_585;
    end else if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_2_reg_594 == 1'd1)) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln209_2_reg_594 == 1'd1))) begin
        outputStream_V_din = p_ray_3_reg_580;
    end else if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_1_reg_590 == 1'd1)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln209_1_reg_590 == 1'd1))) begin
        outputStream_V_din = p_ray_2_reg_575;
    end else if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_reg_566 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln209_reg_566 == 1'd1))) begin
        outputStream_V_din = p_ray_1_reg_570;
    end else if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4))) begin
        outputStream_V_din = grp_computeRay_fu_293_ap_return;
    end else begin
        outputStream_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_3_reg_598 == 1'd1)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln209_3_reg_598 == 1'd1)) | (~((outputStream_V_full_n == 1'b0) & (icmp_ln209_2_reg_594 == 1'd1)) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln209_2_reg_594 == 1'd1)) | (~((outputStream_V_full_n == 1'b0) & (icmp_ln209_1_reg_590 == 1'd1)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln209_1_reg_590 == 1'd1)) | (~((outputStream_V_full_n == 1'b0) & (icmp_ln209_reg_566 == 1'd1)) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln209_reg_566 == 1'd1)) | (~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4)))) begin
        outputStream_V_write = 1'b1;
    end else begin
        outputStream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1))) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln186_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0) | (1'b1 == ap_block_state4_on_subcall_done)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_reg_566 == 1'd1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_1_reg_590 == 1'd1)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_2_reg_594 == 1'd1)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((outputStream_V_full_n == 1'b0) & (icmp_ln209_3_reg_598 == 1'd1)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln200_1_fu_388_p2 = (j4_0_i_reg_281 + 11'd36);

assign add_ln200_2_fu_395_p2 = (j4_0_i_reg_281 + 11'd54);

assign add_ln200_3_fu_402_p2 = (j4_0_i_reg_281 + 11'd72);

assign add_ln200_fu_381_p2 = (j4_0_i_reg_281 + 11'd18);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((maxRange_empty_n == 1'b0) | (map_resolution_empty_n == 1'b0) | (map_height_empty_n == 1'b0) | (map_width_empty_n == 1'b0) | (orig_y_empty_n == 1'b0) | (orig_x_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((inStream_4_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_3_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_2_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_1_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)) | ((inStream_0_V_empty_n == 1'b0) & (icmp_ln186_fu_375_p2 == 1'd1)));
end

always @ (*) begin
    ap_block_state3 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call14 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call19 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call24 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call4 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call9 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((inStream_4_V_empty_n == 1'b0) | (inStream_3_V_empty_n == 1'b0) | (inStream_2_V_empty_n == 1'b0) | (inStream_1_V_empty_n == 1'b0) | (inStream_0_V_empty_n == 1'b0) | (outputStream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_computeRay_fu_359_ap_done == 1'b0) | (grp_computeRay_fu_343_ap_done == 1'b0) | (grp_computeRay_fu_327_ap_done == 1'b0) | (grp_computeRay_fu_311_ap_done == 1'b0) | (grp_computeRay_fu_293_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((outputStream_V_full_n == 1'b0) & (icmp_ln209_reg_566 == 1'd1));
end

always @ (*) begin
    ap_block_state6 = ((outputStream_V_full_n == 1'b0) & (icmp_ln209_1_reg_590 == 1'd1));
end

always @ (*) begin
    ap_block_state7 = ((outputStream_V_full_n == 1'b0) & (icmp_ln209_2_reg_594 == 1'd1));
end

always @ (*) begin
    ap_block_state8 = ((outputStream_V_full_n == 1'b0) & (icmp_ln209_3_reg_598 == 1'd1));
end

assign grp_computeRay_fu_293_ap_start = grp_computeRay_fu_293_ap_start_reg;

assign grp_computeRay_fu_311_ap_start = grp_computeRay_fu_311_ap_start_reg;

assign grp_computeRay_fu_327_ap_start = grp_computeRay_fu_327_ap_start_reg;

assign grp_computeRay_fu_343_ap_start = grp_computeRay_fu_343_ap_start_reg;

assign grp_computeRay_fu_359_ap_start = grp_computeRay_fu_359_ap_start_reg;

assign icmp_ln186_fu_375_p2 = ((j4_0_i_reg_281 < 11'd1081) ? 1'b1 : 1'b0);

assign icmp_ln209_1_fu_415_p2 = ((add_ln200_1_reg_538 < 11'd1081) ? 1'b1 : 1'b0);

assign icmp_ln209_2_fu_420_p2 = ((add_ln200_2_reg_549 < 11'd1081) ? 1'b1 : 1'b0);

assign icmp_ln209_3_fu_425_p2 = ((add_ln200_3_reg_560 < 11'd1081) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_409_p2 = ((add_ln200_fu_381_p2 < 11'd1081) ? 1'b1 : 1'b0);

assign j_fu_430_p2 = (j4_0_i_reg_281 + 11'd90);

assign p_distMap_0_address0 = grp_computeRay_fu_293_p_distMap_address0;

assign p_distMap_0_ce0 = grp_computeRay_fu_293_p_distMap_ce0;

assign p_distMap_1_address0 = grp_computeRay_fu_311_p_distMap_address0;

assign p_distMap_1_ce0 = grp_computeRay_fu_311_p_distMap_ce0;

assign p_distMap_2_address0 = grp_computeRay_fu_327_p_distMap_address0;

assign p_distMap_2_ce0 = grp_computeRay_fu_327_p_distMap_ce0;

assign p_distMap_3_address0 = grp_computeRay_fu_343_p_distMap_address0;

assign p_distMap_3_ce0 = grp_computeRay_fu_343_p_distMap_ce0;

assign p_distMap_4_address0 = grp_computeRay_fu_359_p_distMap_address0;

assign p_distMap_4_ce0 = grp_computeRay_fu_359_p_distMap_ce0;

endmodule //loop_angle_proc
