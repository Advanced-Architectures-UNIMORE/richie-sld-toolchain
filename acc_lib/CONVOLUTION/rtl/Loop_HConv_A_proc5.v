// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_HConv_A_proc5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_V_TDATA,
        src_V_TVALID,
        src_V_TREADY,
        filter_coeffs_0,
        filter_coeffs_1,
        filter_coeffs_2,
        filter_coeffs_3,
        filter_coeffs_4,
        filter_coeffs_5,
        filter_coeffs_6,
        filter_coeffs_7,
        filter_coeffs_8,
        filter_coeffs_9,
        filter_coeffs_10,
        hconv_V_din,
        hconv_V_full_n,
        hconv_V_write,
        filter_coeffs_0_out_din,
        filter_coeffs_0_out_full_n,
        filter_coeffs_0_out_write,
        filter_coeffs_1_out_din,
        filter_coeffs_1_out_full_n,
        filter_coeffs_1_out_write,
        filter_coeffs_2_out_din,
        filter_coeffs_2_out_full_n,
        filter_coeffs_2_out_write,
        filter_coeffs_3_out_din,
        filter_coeffs_3_out_full_n,
        filter_coeffs_3_out_write,
        filter_coeffs_4_out_din,
        filter_coeffs_4_out_full_n,
        filter_coeffs_4_out_write,
        filter_coeffs_5_out_din,
        filter_coeffs_5_out_full_n,
        filter_coeffs_5_out_write,
        filter_coeffs_6_out_din,
        filter_coeffs_6_out_full_n,
        filter_coeffs_6_out_write,
        filter_coeffs_7_out_din,
        filter_coeffs_7_out_full_n,
        filter_coeffs_7_out_write,
        filter_coeffs_8_out_din,
        filter_coeffs_8_out_full_n,
        filter_coeffs_8_out_write,
        filter_coeffs_9_out_din,
        filter_coeffs_9_out_full_n,
        filter_coeffs_9_out_write,
        filter_coeffs_10_out_din,
        filter_coeffs_10_out_full_n,
        filter_coeffs_10_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] src_V_TDATA;
input   src_V_TVALID;
output   src_V_TREADY;
input  [31:0] filter_coeffs_0;
input  [31:0] filter_coeffs_1;
input  [31:0] filter_coeffs_2;
input  [31:0] filter_coeffs_3;
input  [31:0] filter_coeffs_4;
input  [31:0] filter_coeffs_5;
input  [31:0] filter_coeffs_6;
input  [31:0] filter_coeffs_7;
input  [31:0] filter_coeffs_8;
input  [31:0] filter_coeffs_9;
input  [31:0] filter_coeffs_10;
output  [31:0] hconv_V_din;
input   hconv_V_full_n;
output   hconv_V_write;
output  [31:0] filter_coeffs_0_out_din;
input   filter_coeffs_0_out_full_n;
output   filter_coeffs_0_out_write;
output  [31:0] filter_coeffs_1_out_din;
input   filter_coeffs_1_out_full_n;
output   filter_coeffs_1_out_write;
output  [31:0] filter_coeffs_2_out_din;
input   filter_coeffs_2_out_full_n;
output   filter_coeffs_2_out_write;
output  [31:0] filter_coeffs_3_out_din;
input   filter_coeffs_3_out_full_n;
output   filter_coeffs_3_out_write;
output  [31:0] filter_coeffs_4_out_din;
input   filter_coeffs_4_out_full_n;
output   filter_coeffs_4_out_write;
output  [31:0] filter_coeffs_5_out_din;
input   filter_coeffs_5_out_full_n;
output   filter_coeffs_5_out_write;
output  [31:0] filter_coeffs_6_out_din;
input   filter_coeffs_6_out_full_n;
output   filter_coeffs_6_out_write;
output  [31:0] filter_coeffs_7_out_din;
input   filter_coeffs_7_out_full_n;
output   filter_coeffs_7_out_write;
output  [31:0] filter_coeffs_8_out_din;
input   filter_coeffs_8_out_full_n;
output   filter_coeffs_8_out_write;
output  [31:0] filter_coeffs_9_out_din;
input   filter_coeffs_9_out_full_n;
output   filter_coeffs_9_out_write;
output  [31:0] filter_coeffs_10_out_din;
input   filter_coeffs_10_out_full_n;
output   filter_coeffs_10_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_V_TREADY;
reg hconv_V_write;
reg filter_coeffs_0_out_write;
reg filter_coeffs_1_out_write;
reg filter_coeffs_2_out_write;
reg filter_coeffs_3_out_write;
reg filter_coeffs_4_out_write;
reg filter_coeffs_5_out_write;
reg filter_coeffs_6_out_write;
reg filter_coeffs_7_out_write;
reg filter_coeffs_8_out_write;
reg filter_coeffs_9_out_write;
reg filter_coeffs_10_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln179_fu_371_p2;
reg    hconv_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln196_reg_715;
reg    filter_coeffs_0_out_blk_n;
reg    filter_coeffs_1_out_blk_n;
reg    filter_coeffs_2_out_blk_n;
reg    filter_coeffs_3_out_blk_n;
reg    filter_coeffs_4_out_blk_n;
reg    filter_coeffs_5_out_blk_n;
reg    filter_coeffs_6_out_blk_n;
reg    filter_coeffs_7_out_blk_n;
reg    filter_coeffs_8_out_blk_n;
reg    filter_coeffs_9_out_blk_n;
reg    filter_coeffs_10_out_blk_n;
reg   [16:0] indvar_flatten_reg_319;
reg   [8:0] row_0_i_i_i_reg_330;
reg    ap_block_state1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [16:0] add_ln179_fu_377_p2;
wire   [31:0] add_ln193_fu_500_p2;
reg   [31:0] add_ln193_reg_700;
wire   [31:0] add_ln193_2_fu_512_p2;
reg   [31:0] add_ln193_2_reg_705;
wire   [31:0] add_ln193_8_fu_542_p2;
reg   [31:0] add_ln193_8_reg_710;
wire   [0:0] icmp_ln196_fu_548_p2;
wire   [8:0] row_fu_559_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] hwin_1_1_i_fu_112;
reg   [31:0] hwin_1_fu_116;
reg   [31:0] hwin_2_fu_120;
reg   [31:0] hwin_3_fu_124;
reg   [31:0] hwin_4_fu_128;
reg   [31:0] hwin_5_fu_132;
reg   [31:0] hwin_6_fu_136;
reg   [31:0] hwin_7_fu_140;
reg   [31:0] hwin_8_fu_144;
reg   [31:0] hwin_9_fu_148;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln181_fu_431_p2;
wire  signed [31:0] mul_ln193_fu_445_p0;
wire  signed [31:0] mul_ln193_fu_445_p1;
wire  signed [31:0] mul_ln193_1_fu_450_p0;
wire  signed [31:0] mul_ln193_1_fu_450_p1;
wire  signed [31:0] mul_ln193_2_fu_455_p0;
wire  signed [31:0] mul_ln193_2_fu_455_p1;
wire  signed [31:0] mul_ln193_3_fu_460_p0;
wire  signed [31:0] mul_ln193_3_fu_460_p1;
wire  signed [31:0] mul_ln193_4_fu_465_p0;
wire  signed [31:0] mul_ln193_4_fu_465_p1;
wire  signed [31:0] mul_ln193_5_fu_470_p0;
wire  signed [31:0] mul_ln193_5_fu_470_p1;
wire  signed [31:0] mul_ln193_6_fu_475_p0;
wire  signed [31:0] mul_ln193_6_fu_475_p1;
wire  signed [31:0] mul_ln193_7_fu_480_p0;
wire  signed [31:0] mul_ln193_7_fu_480_p1;
wire  signed [31:0] mul_ln193_8_fu_485_p0;
wire  signed [31:0] mul_ln193_8_fu_485_p1;
wire  signed [31:0] mul_ln193_9_fu_490_p0;
wire  signed [31:0] mul_ln193_9_fu_490_p1;
wire  signed [31:0] mul_ln193_10_fu_495_p0;
wire  signed [31:0] mul_ln193_10_fu_495_p1;
wire   [31:0] mul_ln193_fu_445_p2;
wire   [31:0] mul_ln193_1_fu_450_p2;
wire   [31:0] mul_ln193_3_fu_460_p2;
wire   [31:0] mul_ln193_4_fu_465_p2;
wire   [31:0] add_ln193_1_fu_506_p2;
wire   [31:0] mul_ln193_2_fu_455_p2;
wire   [31:0] mul_ln193_6_fu_475_p2;
wire   [31:0] mul_ln193_7_fu_480_p2;
wire   [31:0] add_ln193_4_fu_518_p2;
wire   [31:0] mul_ln193_5_fu_470_p2;
wire   [31:0] mul_ln193_9_fu_490_p2;
wire   [31:0] mul_ln193_10_fu_495_p2;
wire   [31:0] add_ln193_6_fu_530_p2;
wire   [31:0] mul_ln193_8_fu_485_p2;
wire   [31:0] add_ln193_7_fu_536_p2;
wire   [31:0] add_ln193_5_fu_524_p2;
wire   [8:0] select_ln181_fu_437_p3;
wire   [31:0] add_ln193_3_fu_565_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_src_V_U_apdone_blk;
wire   [31:0] src_V_TDATA_int;
wire    src_V_TVALID_int;
reg    src_V_TREADY_int;
wire    regslice_both_src_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_src_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(src_V_TDATA),
    .vld_in(src_V_TVALID),
    .ack_in(regslice_both_src_V_U_ack_in),
    .data_out(src_V_TDATA_int),
    .vld_out(src_V_TVALID_int),
    .ack_out(src_V_TREADY_int),
    .apdone_blk(regslice_both_src_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0))) begin
        indvar_flatten_reg_319 <= add_ln179_fu_377_p2;
    end else if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_319 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0))) begin
        row_0_i_i_i_reg_330 <= row_fu_559_p2;
    end else if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_0_i_i_i_reg_330 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0))) begin
        add_ln193_2_reg_705 <= add_ln193_2_fu_512_p2;
        add_ln193_8_reg_710 <= add_ln193_8_fu_542_p2;
        add_ln193_reg_700 <= add_ln193_fu_500_p2;
        icmp_ln196_reg_715 <= icmp_ln196_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hwin_1_1_i_fu_112 <= hwin_1_fu_116;
        hwin_1_fu_116 <= hwin_2_fu_120;
        hwin_2_fu_120 <= hwin_3_fu_124;
        hwin_3_fu_124 <= hwin_4_fu_128;
        hwin_4_fu_128 <= hwin_5_fu_132;
        hwin_5_fu_132 <= hwin_6_fu_136;
        hwin_6_fu_136 <= hwin_7_fu_140;
        hwin_7_fu_140 <= hwin_8_fu_144;
        hwin_8_fu_144 <= hwin_9_fu_148;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0))) begin
        hwin_9_fu_148 <= src_V_TDATA_int;
    end
end

always @ (*) begin
    if ((icmp_ln179_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_0_out_blk_n = filter_coeffs_0_out_full_n;
    end else begin
        filter_coeffs_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_0_out_write = 1'b1;
    end else begin
        filter_coeffs_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_10_out_blk_n = filter_coeffs_10_out_full_n;
    end else begin
        filter_coeffs_10_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_10_out_write = 1'b1;
    end else begin
        filter_coeffs_10_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_1_out_blk_n = filter_coeffs_1_out_full_n;
    end else begin
        filter_coeffs_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_1_out_write = 1'b1;
    end else begin
        filter_coeffs_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_2_out_blk_n = filter_coeffs_2_out_full_n;
    end else begin
        filter_coeffs_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_2_out_write = 1'b1;
    end else begin
        filter_coeffs_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_3_out_blk_n = filter_coeffs_3_out_full_n;
    end else begin
        filter_coeffs_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_3_out_write = 1'b1;
    end else begin
        filter_coeffs_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_4_out_blk_n = filter_coeffs_4_out_full_n;
    end else begin
        filter_coeffs_4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_4_out_write = 1'b1;
    end else begin
        filter_coeffs_4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_5_out_blk_n = filter_coeffs_5_out_full_n;
    end else begin
        filter_coeffs_5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_5_out_write = 1'b1;
    end else begin
        filter_coeffs_5_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_6_out_blk_n = filter_coeffs_6_out_full_n;
    end else begin
        filter_coeffs_6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_6_out_write = 1'b1;
    end else begin
        filter_coeffs_6_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_7_out_blk_n = filter_coeffs_7_out_full_n;
    end else begin
        filter_coeffs_7_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_7_out_write = 1'b1;
    end else begin
        filter_coeffs_7_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_8_out_blk_n = filter_coeffs_8_out_full_n;
    end else begin
        filter_coeffs_8_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_8_out_write = 1'b1;
    end else begin
        filter_coeffs_8_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_9_out_blk_n = filter_coeffs_9_out_full_n;
    end else begin
        filter_coeffs_9_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_9_out_write = 1'b1;
    end else begin
        filter_coeffs_9_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln196_reg_715 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_full_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln196_reg_715 == 1'd1))) begin
        hconv_V_write = 1'b1;
    end else begin
        hconv_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_V_TDATA_blk_n = src_V_TVALID_int;
    end else begin
        src_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_src_V_U_ack_in == 1'b1) & (src_V_TVALID == 1'b1))) begin
        src_V_TREADY = 1'b1;
    end else begin
        src_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln179_fu_371_p2 == 1'd0))) begin
        src_V_TREADY_int = 1'b1;
    end else begin
        src_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln179_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln179_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln179_fu_377_p2 = (indvar_flatten_reg_319 + 17'd1);

assign add_ln193_1_fu_506_p2 = (mul_ln193_3_fu_460_p2 + mul_ln193_4_fu_465_p2);

assign add_ln193_2_fu_512_p2 = (add_ln193_1_fu_506_p2 + mul_ln193_2_fu_455_p2);

assign add_ln193_3_fu_565_p2 = (add_ln193_2_reg_705 + add_ln193_reg_700);

assign add_ln193_4_fu_518_p2 = (mul_ln193_6_fu_475_p2 + mul_ln193_7_fu_480_p2);

assign add_ln193_5_fu_524_p2 = (add_ln193_4_fu_518_p2 + mul_ln193_5_fu_470_p2);

assign add_ln193_6_fu_530_p2 = (mul_ln193_9_fu_490_p2 + mul_ln193_10_fu_495_p2);

assign add_ln193_7_fu_536_p2 = (add_ln193_6_fu_530_p2 + mul_ln193_8_fu_485_p2);

assign add_ln193_8_fu_542_p2 = (add_ln193_7_fu_536_p2 + add_ln193_5_fu_524_p2);

assign add_ln193_fu_500_p2 = (mul_ln193_fu_445_p2 + mul_ln193_1_fu_450_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln196_reg_715 == 1'd1)) | ((src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln179_fu_371_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln196_reg_715 == 1'd1)) | ((src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln179_fu_371_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((hconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln196_reg_715 == 1'd1)) | ((src_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln179_fu_371_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((filter_coeffs_10_out_full_n == 1'b0) | (filter_coeffs_9_out_full_n == 1'b0) | (filter_coeffs_8_out_full_n == 1'b0) | (real_start == 1'b0) | (filter_coeffs_7_out_full_n == 1'b0) | (filter_coeffs_6_out_full_n == 1'b0) | (filter_coeffs_5_out_full_n == 1'b0) | (filter_coeffs_4_out_full_n == 1'b0) | (filter_coeffs_3_out_full_n == 1'b0) | (filter_coeffs_2_out_full_n == 1'b0) | (filter_coeffs_1_out_full_n == 1'b0) | (filter_coeffs_0_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((src_V_TVALID_int == 1'b0) & (icmp_ln179_fu_371_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((hconv_V_full_n == 1'b0) & (icmp_ln196_reg_715 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign filter_coeffs_0_out_din = filter_coeffs_0;

assign filter_coeffs_10_out_din = filter_coeffs_10;

assign filter_coeffs_1_out_din = filter_coeffs_1;

assign filter_coeffs_2_out_din = filter_coeffs_2;

assign filter_coeffs_3_out_din = filter_coeffs_3;

assign filter_coeffs_4_out_din = filter_coeffs_4;

assign filter_coeffs_5_out_din = filter_coeffs_5;

assign filter_coeffs_6_out_din = filter_coeffs_6;

assign filter_coeffs_7_out_din = filter_coeffs_7;

assign filter_coeffs_8_out_din = filter_coeffs_8;

assign filter_coeffs_9_out_din = filter_coeffs_9;

assign hconv_V_din = (add_ln193_8_reg_710 + add_ln193_3_fu_565_p2);

assign icmp_ln179_fu_371_p2 = ((indvar_flatten_reg_319 == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_431_p2 = ((row_0_i_i_i_reg_330 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_548_p2 = ((select_ln181_fu_437_p3 > 9'd9) ? 1'b1 : 1'b0);

assign mul_ln193_10_fu_495_p0 = src_V_TDATA_int;

assign mul_ln193_10_fu_495_p1 = filter_coeffs_10;

assign mul_ln193_10_fu_495_p2 = ($signed(mul_ln193_10_fu_495_p0) * $signed(mul_ln193_10_fu_495_p1));

assign mul_ln193_1_fu_450_p0 = filter_coeffs_1;

assign mul_ln193_1_fu_450_p1 = hwin_1_fu_116;

assign mul_ln193_1_fu_450_p2 = ($signed(mul_ln193_1_fu_450_p0) * $signed(mul_ln193_1_fu_450_p1));

assign mul_ln193_2_fu_455_p0 = filter_coeffs_2;

assign mul_ln193_2_fu_455_p1 = hwin_2_fu_120;

assign mul_ln193_2_fu_455_p2 = ($signed(mul_ln193_2_fu_455_p0) * $signed(mul_ln193_2_fu_455_p1));

assign mul_ln193_3_fu_460_p0 = filter_coeffs_3;

assign mul_ln193_3_fu_460_p1 = hwin_3_fu_124;

assign mul_ln193_3_fu_460_p2 = ($signed(mul_ln193_3_fu_460_p0) * $signed(mul_ln193_3_fu_460_p1));

assign mul_ln193_4_fu_465_p0 = filter_coeffs_4;

assign mul_ln193_4_fu_465_p1 = hwin_4_fu_128;

assign mul_ln193_4_fu_465_p2 = ($signed(mul_ln193_4_fu_465_p0) * $signed(mul_ln193_4_fu_465_p1));

assign mul_ln193_5_fu_470_p0 = filter_coeffs_5;

assign mul_ln193_5_fu_470_p1 = hwin_5_fu_132;

assign mul_ln193_5_fu_470_p2 = ($signed(mul_ln193_5_fu_470_p0) * $signed(mul_ln193_5_fu_470_p1));

assign mul_ln193_6_fu_475_p0 = filter_coeffs_6;

assign mul_ln193_6_fu_475_p1 = hwin_6_fu_136;

assign mul_ln193_6_fu_475_p2 = ($signed(mul_ln193_6_fu_475_p0) * $signed(mul_ln193_6_fu_475_p1));

assign mul_ln193_7_fu_480_p0 = filter_coeffs_7;

assign mul_ln193_7_fu_480_p1 = hwin_7_fu_140;

assign mul_ln193_7_fu_480_p2 = ($signed(mul_ln193_7_fu_480_p0) * $signed(mul_ln193_7_fu_480_p1));

assign mul_ln193_8_fu_485_p0 = filter_coeffs_8;

assign mul_ln193_8_fu_485_p1 = hwin_8_fu_144;

assign mul_ln193_8_fu_485_p2 = ($signed(mul_ln193_8_fu_485_p0) * $signed(mul_ln193_8_fu_485_p1));

assign mul_ln193_9_fu_490_p0 = filter_coeffs_9;

assign mul_ln193_9_fu_490_p1 = hwin_9_fu_148;

assign mul_ln193_9_fu_490_p2 = ($signed(mul_ln193_9_fu_490_p0) * $signed(mul_ln193_9_fu_490_p1));

assign mul_ln193_fu_445_p0 = filter_coeffs_0;

assign mul_ln193_fu_445_p1 = hwin_1_1_i_fu_112;

assign mul_ln193_fu_445_p2 = ($signed(mul_ln193_fu_445_p0) * $signed(mul_ln193_fu_445_p1));

assign row_fu_559_p2 = (select_ln181_fu_437_p3 + 9'd1);

assign select_ln181_fu_437_p3 = ((icmp_ln181_fu_431_p2[0:0] === 1'b1) ? 9'd0 : row_0_i_i_i_reg_330);

assign start_out = real_start;

endmodule //Loop_HConv_A_proc5
