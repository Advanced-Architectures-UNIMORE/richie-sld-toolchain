// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_VConv_A_proc5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        hconv_V_dout,
        hconv_V_empty_n,
        hconv_V_read,
        vconv_V_din,
        vconv_V_full_n,
        vconv_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] hconv_V_dout;
input   hconv_V_empty_n;
output   hconv_V_read;
output  [31:0] vconv_V_din;
input   vconv_V_full_n;
output   vconv_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg hconv_V_read;
reg vconv_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [10:0] linebuf_0_address0;
reg    linebuf_0_ce0;
reg    linebuf_0_we0;
wire   [31:0] linebuf_0_q0;
wire   [10:0] linebuf_1_address0;
reg    linebuf_1_ce0;
wire   [31:0] linebuf_1_q0;
wire   [10:0] linebuf_1_address1;
reg    linebuf_1_ce1;
reg    linebuf_1_we1;
wire   [10:0] linebuf_2_address0;
reg    linebuf_2_ce0;
wire   [31:0] linebuf_2_q0;
wire   [10:0] linebuf_2_address1;
reg    linebuf_2_ce1;
reg    linebuf_2_we1;
wire   [10:0] linebuf_3_address0;
reg    linebuf_3_ce0;
wire   [31:0] linebuf_3_q0;
wire   [10:0] linebuf_3_address1;
reg    linebuf_3_ce1;
reg    linebuf_3_we1;
wire   [10:0] linebuf_4_address0;
reg    linebuf_4_ce0;
wire   [31:0] linebuf_4_q0;
wire   [10:0] linebuf_4_address1;
reg    linebuf_4_ce1;
reg    linebuf_4_we1;
wire   [10:0] linebuf_5_address0;
reg    linebuf_5_ce0;
wire   [31:0] linebuf_5_q0;
wire   [10:0] linebuf_5_address1;
reg    linebuf_5_ce1;
reg    linebuf_5_we1;
wire   [10:0] linebuf_6_address0;
reg    linebuf_6_ce0;
wire   [31:0] linebuf_6_q0;
wire   [10:0] linebuf_6_address1;
reg    linebuf_6_ce1;
reg    linebuf_6_we1;
wire   [10:0] linebuf_7_address0;
reg    linebuf_7_ce0;
wire   [31:0] linebuf_7_q0;
wire   [10:0] linebuf_7_address1;
reg    linebuf_7_ce1;
reg    linebuf_7_we1;
wire   [10:0] linebuf_8_address0;
reg    linebuf_8_ce0;
wire   [31:0] linebuf_8_q0;
wire   [10:0] linebuf_8_address1;
reg    linebuf_8_ce1;
reg    linebuf_8_we1;
wire   [10:0] linebuf_9_address0;
reg    linebuf_9_ce0;
wire   [31:0] linebuf_9_q0;
wire   [10:0] linebuf_9_address1;
reg    linebuf_9_ce1;
reg    linebuf_9_we1;
reg    hconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln210_reg_533;
reg    vconv_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] select_ln229_1_reg_542;
reg   [0:0] select_ln229_1_reg_542_pp0_iter1_reg;
reg   [16:0] indvar_flatten_reg_278;
reg   [8:0] col1_0_i_reg_289;
reg   [8:0] row2_0_i_reg_300;
wire   [0:0] icmp_ln210_fu_311_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln210_reg_533_pp0_iter1_reg;
wire   [16:0] add_ln210_fu_317_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln229_1_fu_355_p3;
wire   [8:0] select_ln210_fu_363_p3;
reg   [10:0] linebuf_0_addr_reg_551;
reg   [10:0] linebuf_1_addr_reg_556;
reg   [10:0] linebuf_2_addr_reg_562;
reg   [10:0] linebuf_3_addr_reg_568;
reg   [10:0] linebuf_4_addr_reg_574;
reg   [10:0] linebuf_5_addr_reg_580;
reg   [10:0] linebuf_6_addr_reg_586;
reg   [10:0] linebuf_7_addr_reg_592;
reg   [10:0] linebuf_8_addr_reg_598;
reg   [10:0] linebuf_9_addr_reg_604;
wire   [8:0] row_fu_385_p2;
reg   [31:0] tmp_1_reg_615;
wire   [31:0] mul_ln225_fu_391_p2;
reg   [31:0] mul_ln225_reg_621;
wire   [31:0] mul_ln225_1_fu_397_p2;
reg   [31:0] mul_ln225_1_reg_626;
wire   [31:0] mul_ln225_2_fu_403_p2;
reg   [31:0] mul_ln225_2_reg_631;
wire   [31:0] mul_ln225_5_fu_421_p2;
reg   [31:0] mul_ln225_5_reg_636;
wire   [31:0] mul_ln225_6_fu_427_p2;
reg   [31:0] mul_ln225_6_reg_641;
wire   [31:0] add_ln225_5_fu_445_p2;
reg   [31:0] add_ln225_5_reg_646;
wire   [31:0] add_ln225_8_fu_451_p2;
reg   [31:0] add_ln225_8_reg_651;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln224_fu_371_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln212_fu_323_p2;
wire   [8:0] add_ln210_1_fu_337_p2;
wire   [0:0] icmp_ln229_fu_343_p2;
wire   [0:0] icmp_ln229_1_fu_349_p2;
wire   [8:0] select_ln229_fu_329_p3;
wire  signed [31:0] mul_ln225_fu_391_p1;
wire  signed [31:0] mul_ln225_1_fu_397_p1;
wire  signed [31:0] mul_ln225_2_fu_403_p1;
wire  signed [31:0] mul_ln225_3_fu_409_p1;
wire  signed [31:0] mul_ln225_4_fu_415_p1;
wire  signed [31:0] mul_ln225_5_fu_421_p1;
wire  signed [31:0] mul_ln225_6_fu_427_p1;
wire  signed [31:0] mul_ln225_7_fu_433_p1;
wire  signed [31:0] mul_ln225_8_fu_439_p1;
wire   [31:0] mul_ln225_3_fu_409_p2;
wire   [31:0] mul_ln225_4_fu_415_p2;
wire   [31:0] mul_ln225_7_fu_433_p2;
wire   [31:0] mul_ln225_8_fu_439_p2;
wire   [31:0] shl_ln225_2_fu_469_p2;
wire   [31:0] shl_ln225_fu_457_p2;
wire   [31:0] add_ln225_fu_479_p2;
wire   [31:0] shl_ln225_3_fu_474_p2;
wire   [31:0] add_ln225_2_fu_491_p2;
wire   [31:0] shl_ln225_1_fu_463_p2;
wire   [31:0] add_ln225_3_fu_495_p2;
wire   [31:0] add_ln225_1_fu_485_p2;
wire   [31:0] add_ln225_7_fu_511_p2;
wire   [31:0] add_ln225_9_fu_515_p2;
wire   [31:0] add_ln225_6_fu_507_p2;
wire   [31:0] add_ln225_10_fu_520_p2;
wire   [31:0] add_ln225_4_fu_501_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_25;
reg    ap_enable_state2_pp0_iter0_stage0;
reg    ap_enable_operation_46;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_enable_operation_51;
reg    ap_enable_operation_48;
reg    ap_enable_operation_45;
reg    ap_enable_operation_81;
reg    ap_enable_state4_pp0_iter2_stage0;
reg    ap_enable_operation_27;
reg    ap_enable_operation_49;
reg    ap_enable_operation_54;
reg    ap_enable_operation_29;
reg    ap_enable_operation_52;
reg    ap_enable_operation_57;
reg    ap_enable_operation_31;
reg    ap_enable_operation_55;
reg    ap_enable_operation_60;
reg    ap_enable_operation_33;
reg    ap_enable_operation_58;
reg    ap_enable_operation_63;
reg    ap_enable_operation_35;
reg    ap_enable_operation_61;
reg    ap_enable_operation_66;
reg    ap_enable_operation_37;
reg    ap_enable_operation_64;
reg    ap_enable_operation_69;
reg    ap_enable_operation_39;
reg    ap_enable_operation_67;
reg    ap_enable_operation_72;
reg    ap_enable_operation_41;
reg    ap_enable_operation_70;
reg    ap_enable_operation_75;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .we0(linebuf_0_we0),
    .d0(linebuf_1_q0),
    .q0(linebuf_0_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .q0(linebuf_1_q0),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1),
    .we1(linebuf_1_we1),
    .d1(linebuf_2_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_2_address0),
    .ce0(linebuf_2_ce0),
    .q0(linebuf_2_q0),
    .address1(linebuf_2_address1),
    .ce1(linebuf_2_ce1),
    .we1(linebuf_2_we1),
    .d1(linebuf_3_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_3_address0),
    .ce0(linebuf_3_ce0),
    .q0(linebuf_3_q0),
    .address1(linebuf_3_address1),
    .ce1(linebuf_3_ce1),
    .we1(linebuf_3_we1),
    .d1(linebuf_4_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_4_address0),
    .ce0(linebuf_4_ce0),
    .q0(linebuf_4_q0),
    .address1(linebuf_4_address1),
    .ce1(linebuf_4_ce1),
    .we1(linebuf_4_we1),
    .d1(linebuf_5_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_5_address0),
    .ce0(linebuf_5_ce0),
    .q0(linebuf_5_q0),
    .address1(linebuf_5_address1),
    .ce1(linebuf_5_ce1),
    .we1(linebuf_5_we1),
    .d1(linebuf_6_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_6_address0),
    .ce0(linebuf_6_ce0),
    .q0(linebuf_6_q0),
    .address1(linebuf_6_address1),
    .ce1(linebuf_6_ce1),
    .we1(linebuf_6_we1),
    .d1(linebuf_7_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_7_address0),
    .ce0(linebuf_7_ce0),
    .q0(linebuf_7_q0),
    .address1(linebuf_7_address1),
    .ce1(linebuf_7_ce1),
    .we1(linebuf_7_we1),
    .d1(linebuf_8_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_8_address0),
    .ce0(linebuf_8_ce0),
    .q0(linebuf_8_q0),
    .address1(linebuf_8_address1),
    .ce1(linebuf_8_ce1),
    .we1(linebuf_8_we1),
    .d1(linebuf_9_q0)
);

Loop_VConv_A_proccud #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_9_address0),
    .ce0(linebuf_9_ce0),
    .q0(linebuf_9_q0),
    .address1(linebuf_9_address1),
    .ce1(linebuf_9_ce1),
    .we1(linebuf_9_we1),
    .d1(hconv_V_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_fu_311_p2 == 1'd0))) begin
        col1_0_i_reg_289 <= select_ln210_fu_363_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col1_0_i_reg_289 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_fu_311_p2 == 1'd0))) begin
        indvar_flatten_reg_278 <= add_ln210_fu_317_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_278 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_fu_311_p2 == 1'd0))) begin
        row2_0_i_reg_300 <= row_fu_385_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row2_0_i_reg_300 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        add_ln225_5_reg_646 <= add_ln225_5_fu_445_p2;
        add_ln225_8_reg_651 <= add_ln225_8_fu_451_p2;
        mul_ln225_1_reg_626 <= mul_ln225_1_fu_397_p2;
        mul_ln225_2_reg_631 <= mul_ln225_2_fu_403_p2;
        mul_ln225_5_reg_636 <= mul_ln225_5_fu_421_p2;
        mul_ln225_6_reg_641 <= mul_ln225_6_fu_427_p2;
        mul_ln225_reg_621 <= mul_ln225_fu_391_p2;
        tmp_1_reg_615 <= hconv_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln210_reg_533 <= icmp_ln210_fu_311_p2;
        icmp_ln210_reg_533_pp0_iter1_reg <= icmp_ln210_reg_533;
        select_ln229_1_reg_542_pp0_iter1_reg <= select_ln229_1_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_fu_311_p2 == 1'd0))) begin
        linebuf_0_addr_reg_551[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_1_addr_reg_556[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_2_addr_reg_562[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_3_addr_reg_568[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_4_addr_reg_574[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_5_addr_reg_580[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_6_addr_reg_586[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_7_addr_reg_592[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_8_addr_reg_598[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        linebuf_9_addr_reg_604[8 : 0] <= zext_ln224_fu_371_p1[8 : 0];
        select_ln229_1_reg_542 <= select_ln229_1_fu_355_p3;
    end
end

always @ (*) begin
    if ((icmp_ln210_fu_311_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_empty_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        hconv_V_read = 1'b1;
    end else begin
        hconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_0_we0 = 1'b1;
    end else begin
        linebuf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce1 = 1'b1;
    end else begin
        linebuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_1_we1 = 1'b1;
    end else begin
        linebuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce0 = 1'b1;
    end else begin
        linebuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce1 = 1'b1;
    end else begin
        linebuf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_2_we1 = 1'b1;
    end else begin
        linebuf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce0 = 1'b1;
    end else begin
        linebuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce1 = 1'b1;
    end else begin
        linebuf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_3_we1 = 1'b1;
    end else begin
        linebuf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce0 = 1'b1;
    end else begin
        linebuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce1 = 1'b1;
    end else begin
        linebuf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_4_we1 = 1'b1;
    end else begin
        linebuf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce0 = 1'b1;
    end else begin
        linebuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce1 = 1'b1;
    end else begin
        linebuf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_5_we1 = 1'b1;
    end else begin
        linebuf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce0 = 1'b1;
    end else begin
        linebuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce1 = 1'b1;
    end else begin
        linebuf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_6_we1 = 1'b1;
    end else begin
        linebuf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce0 = 1'b1;
    end else begin
        linebuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce1 = 1'b1;
    end else begin
        linebuf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_7_we1 = 1'b1;
    end else begin
        linebuf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce0 = 1'b1;
    end else begin
        linebuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce1 = 1'b1;
    end else begin
        linebuf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_8_we1 = 1'b1;
    end else begin
        linebuf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce0 = 1'b1;
    end else begin
        linebuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce1 = 1'b1;
    end else begin
        linebuf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln210_reg_533 == 1'd0))) begin
        linebuf_9_we1 = 1'b1;
    end else begin
        linebuf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_full_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1))) begin
        vconv_V_write = 1'b1;
    end else begin
        vconv_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln210_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln210_fu_311_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln210_1_fu_337_p2 = (9'd1 + col1_0_i_reg_289);

assign add_ln210_fu_317_p2 = (indvar_flatten_reg_278 + 17'd1);

assign add_ln225_10_fu_520_p2 = (add_ln225_9_fu_515_p2 + add_ln225_6_fu_507_p2);

assign add_ln225_1_fu_485_p2 = (add_ln225_fu_479_p2 + shl_ln225_3_fu_474_p2);

assign add_ln225_2_fu_491_p2 = (mul_ln225_reg_621 + mul_ln225_1_reg_626);

assign add_ln225_3_fu_495_p2 = (add_ln225_2_fu_491_p2 + shl_ln225_1_fu_463_p2);

assign add_ln225_4_fu_501_p2 = (add_ln225_3_fu_495_p2 + add_ln225_1_fu_485_p2);

assign add_ln225_5_fu_445_p2 = (mul_ln225_3_fu_409_p2 + mul_ln225_4_fu_415_p2);

assign add_ln225_6_fu_507_p2 = (add_ln225_5_reg_646 + mul_ln225_2_reg_631);

assign add_ln225_7_fu_511_p2 = (mul_ln225_5_reg_636 + mul_ln225_6_reg_641);

assign add_ln225_8_fu_451_p2 = (mul_ln225_7_fu_433_p2 + mul_ln225_8_fu_439_p2);

assign add_ln225_9_fu_515_p2 = (add_ln225_8_reg_651 + add_ln225_7_fu_511_p2);

assign add_ln225_fu_479_p2 = (shl_ln225_2_fu_469_p2 + shl_ln225_fu_457_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln210_reg_533 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln210_reg_533 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1)) | ((hconv_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln210_reg_533 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((hconv_V_empty_n == 1'b0) & (icmp_ln210_reg_533 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((vconv_V_full_n == 1'b0) & (select_ln229_1_reg_542_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_enable_operation_25 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_27 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_29 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_31 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_33 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_35 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_37 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_39 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_41 = (icmp_ln210_fu_311_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_45 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_46 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_48 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_49 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_51 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_52 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_54 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_55 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_57 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_58 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_60 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_61 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_63 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_64 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_66 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_67 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_69 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_70 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_72 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_75 = (icmp_ln210_reg_533 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_81 = (icmp_ln210_reg_533_pp0_iter1_reg == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln210_fu_311_p2 = ((indvar_flatten_reg_278 == 17'd99200) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_323_p2 = ((row2_0_i_reg_300 == 9'd310) ? 1'b1 : 1'b0);

assign icmp_ln229_1_fu_349_p2 = ((col1_0_i_reg_289 > 9'd9) ? 1'b1 : 1'b0);

assign icmp_ln229_fu_343_p2 = ((add_ln210_1_fu_337_p2 > 9'd9) ? 1'b1 : 1'b0);

assign linebuf_0_address0 = linebuf_0_addr_reg_551;

assign linebuf_1_address0 = zext_ln224_fu_371_p1;

assign linebuf_1_address1 = linebuf_1_addr_reg_556;

assign linebuf_2_address0 = zext_ln224_fu_371_p1;

assign linebuf_2_address1 = linebuf_2_addr_reg_562;

assign linebuf_3_address0 = zext_ln224_fu_371_p1;

assign linebuf_3_address1 = linebuf_3_addr_reg_568;

assign linebuf_4_address0 = zext_ln224_fu_371_p1;

assign linebuf_4_address1 = linebuf_4_addr_reg_574;

assign linebuf_5_address0 = zext_ln224_fu_371_p1;

assign linebuf_5_address1 = linebuf_5_addr_reg_580;

assign linebuf_6_address0 = zext_ln224_fu_371_p1;

assign linebuf_6_address1 = linebuf_6_addr_reg_586;

assign linebuf_7_address0 = zext_ln224_fu_371_p1;

assign linebuf_7_address1 = linebuf_7_addr_reg_592;

assign linebuf_8_address0 = zext_ln224_fu_371_p1;

assign linebuf_8_address1 = linebuf_8_addr_reg_598;

assign linebuf_9_address0 = zext_ln224_fu_371_p1;

assign linebuf_9_address1 = linebuf_9_addr_reg_604;

assign mul_ln225_1_fu_397_p1 = linebuf_2_q0;

assign mul_ln225_1_fu_397_p2 = ($signed({{1'b0}, {32'd266}}) * $signed(mul_ln225_1_fu_397_p1));

assign mul_ln225_2_fu_403_p1 = linebuf_3_q0;

assign mul_ln225_2_fu_403_p2 = ($signed({{1'b0}, {32'd498}}) * $signed(mul_ln225_2_fu_403_p1));

assign mul_ln225_3_fu_409_p1 = linebuf_4_q0;

assign mul_ln225_3_fu_409_p2 = ($signed({{1'b0}, {32'd724}}) * $signed(mul_ln225_3_fu_409_p1));

assign mul_ln225_4_fu_415_p1 = linebuf_5_q0;

assign mul_ln225_4_fu_415_p2 = ($signed({{1'b0}, {32'd821}}) * $signed(mul_ln225_4_fu_415_p1));

assign mul_ln225_5_fu_421_p1 = linebuf_6_q0;

assign mul_ln225_5_fu_421_p2 = ($signed({{1'b0}, {32'd724}}) * $signed(mul_ln225_5_fu_421_p1));

assign mul_ln225_6_fu_427_p1 = linebuf_7_q0;

assign mul_ln225_6_fu_427_p2 = ($signed({{1'b0}, {32'd498}}) * $signed(mul_ln225_6_fu_427_p1));

assign mul_ln225_7_fu_433_p1 = linebuf_8_q0;

assign mul_ln225_7_fu_433_p2 = ($signed({{1'b0}, {32'd266}}) * $signed(mul_ln225_7_fu_433_p1));

assign mul_ln225_8_fu_439_p1 = linebuf_9_q0;

assign mul_ln225_8_fu_439_p2 = ($signed({{1'b0}, {32'd111}}) * $signed(mul_ln225_8_fu_439_p1));

assign mul_ln225_fu_391_p1 = linebuf_1_q0;

assign mul_ln225_fu_391_p2 = ($signed({{1'b0}, {32'd111}}) * $signed(mul_ln225_fu_391_p1));

assign row_fu_385_p2 = (select_ln229_fu_329_p3 + 9'd1);

assign select_ln210_fu_363_p3 = ((icmp_ln212_fu_323_p2[0:0] === 1'b1) ? add_ln210_1_fu_337_p2 : col1_0_i_reg_289);

assign select_ln229_1_fu_355_p3 = ((icmp_ln212_fu_323_p2[0:0] === 1'b1) ? icmp_ln229_fu_343_p2 : icmp_ln229_1_fu_349_p2);

assign select_ln229_fu_329_p3 = ((icmp_ln212_fu_323_p2[0:0] === 1'b1) ? 9'd0 : row2_0_i_reg_300);

assign shl_ln225_1_fu_463_p2 = linebuf_0_q0 << 32'd2;

assign shl_ln225_2_fu_469_p2 = tmp_1_reg_615 << 32'd5;

assign shl_ln225_3_fu_474_p2 = tmp_1_reg_615 << 32'd2;

assign shl_ln225_fu_457_p2 = linebuf_0_q0 << 32'd5;

assign start_out = real_start;

assign vconv_V_din = (add_ln225_10_fu_520_p2 + add_ln225_4_fu_501_p2);

assign zext_ln224_fu_371_p1 = select_ln229_fu_329_p3;

always @ (posedge ap_clk) begin
    linebuf_0_addr_reg_551[10:9] <= 2'b00;
    linebuf_1_addr_reg_556[10:9] <= 2'b00;
    linebuf_2_addr_reg_562[10:9] <= 2'b00;
    linebuf_3_addr_reg_568[10:9] <= 2'b00;
    linebuf_4_addr_reg_574[10:9] <= 2'b00;
    linebuf_5_addr_reg_580[10:9] <= 2'b00;
    linebuf_6_addr_reg_586[10:9] <= 2'b00;
    linebuf_7_addr_reg_592[10:9] <= 2'b00;
    linebuf_8_addr_reg_598[10:9] <= 2'b00;
    linebuf_9_addr_reg_604[10:9] <= 2'b00;
end

endmodule //Loop_VConv_A_proc5
