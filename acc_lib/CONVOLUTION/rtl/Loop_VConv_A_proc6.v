// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_VConv_A_proc6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        hconv_V_dout,
        hconv_V_empty_n,
        hconv_V_read,
        filter_coeffs_0_dout,
        filter_coeffs_0_empty_n,
        filter_coeffs_0_read,
        vconv_V_din,
        vconv_V_full_n,
        vconv_V_write,
        filter_coeffs_1_dout,
        filter_coeffs_1_empty_n,
        filter_coeffs_1_read,
        filter_coeffs_2_dout,
        filter_coeffs_2_empty_n,
        filter_coeffs_2_read,
        filter_coeffs_3_dout,
        filter_coeffs_3_empty_n,
        filter_coeffs_3_read,
        filter_coeffs_4_dout,
        filter_coeffs_4_empty_n,
        filter_coeffs_4_read,
        filter_coeffs_5_dout,
        filter_coeffs_5_empty_n,
        filter_coeffs_5_read,
        filter_coeffs_6_dout,
        filter_coeffs_6_empty_n,
        filter_coeffs_6_read,
        filter_coeffs_7_dout,
        filter_coeffs_7_empty_n,
        filter_coeffs_7_read,
        filter_coeffs_8_dout,
        filter_coeffs_8_empty_n,
        filter_coeffs_8_read,
        filter_coeffs_9_dout,
        filter_coeffs_9_empty_n,
        filter_coeffs_9_read,
        filter_coeffs_10_dout,
        filter_coeffs_10_empty_n,
        filter_coeffs_10_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] hconv_V_dout;
input   hconv_V_empty_n;
output   hconv_V_read;
input  [31:0] filter_coeffs_0_dout;
input   filter_coeffs_0_empty_n;
output   filter_coeffs_0_read;
output  [31:0] vconv_V_din;
input   vconv_V_full_n;
output   vconv_V_write;
input  [31:0] filter_coeffs_1_dout;
input   filter_coeffs_1_empty_n;
output   filter_coeffs_1_read;
input  [31:0] filter_coeffs_2_dout;
input   filter_coeffs_2_empty_n;
output   filter_coeffs_2_read;
input  [31:0] filter_coeffs_3_dout;
input   filter_coeffs_3_empty_n;
output   filter_coeffs_3_read;
input  [31:0] filter_coeffs_4_dout;
input   filter_coeffs_4_empty_n;
output   filter_coeffs_4_read;
input  [31:0] filter_coeffs_5_dout;
input   filter_coeffs_5_empty_n;
output   filter_coeffs_5_read;
input  [31:0] filter_coeffs_6_dout;
input   filter_coeffs_6_empty_n;
output   filter_coeffs_6_read;
input  [31:0] filter_coeffs_7_dout;
input   filter_coeffs_7_empty_n;
output   filter_coeffs_7_read;
input  [31:0] filter_coeffs_8_dout;
input   filter_coeffs_8_empty_n;
output   filter_coeffs_8_read;
input  [31:0] filter_coeffs_9_dout;
input   filter_coeffs_9_empty_n;
output   filter_coeffs_9_read;
input  [31:0] filter_coeffs_10_dout;
input   filter_coeffs_10_empty_n;
output   filter_coeffs_10_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg hconv_V_read;
reg filter_coeffs_0_read;
reg vconv_V_write;
reg filter_coeffs_1_read;
reg filter_coeffs_2_read;
reg filter_coeffs_3_read;
reg filter_coeffs_4_read;
reg filter_coeffs_5_read;
reg filter_coeffs_6_read;
reg filter_coeffs_7_read;
reg filter_coeffs_8_read;
reg filter_coeffs_9_read;
reg filter_coeffs_10_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [10:0] linebuf_0_address0;
reg    linebuf_0_ce0;
wire   [31:0] linebuf_0_q0;
wire   [10:0] linebuf_0_address1;
reg    linebuf_0_ce1;
reg    linebuf_0_we1;
wire   [10:0] linebuf_1_address0;
reg    linebuf_1_ce0;
wire   [31:0] linebuf_1_q0;
wire   [10:0] linebuf_1_address1;
reg    linebuf_1_ce1;
reg    linebuf_1_we1;
wire   [10:0] linebuf_2_address0;
reg    linebuf_2_ce0;
wire   [31:0] linebuf_2_q0;
wire   [10:0] linebuf_2_address1;
reg    linebuf_2_ce1;
reg    linebuf_2_we1;
wire   [10:0] linebuf_3_address0;
reg    linebuf_3_ce0;
wire   [31:0] linebuf_3_q0;
wire   [10:0] linebuf_3_address1;
reg    linebuf_3_ce1;
reg    linebuf_3_we1;
wire   [10:0] linebuf_4_address0;
reg    linebuf_4_ce0;
wire   [31:0] linebuf_4_q0;
wire   [10:0] linebuf_4_address1;
reg    linebuf_4_ce1;
reg    linebuf_4_we1;
wire   [10:0] linebuf_5_address0;
reg    linebuf_5_ce0;
wire   [31:0] linebuf_5_q0;
wire   [10:0] linebuf_5_address1;
reg    linebuf_5_ce1;
reg    linebuf_5_we1;
wire   [10:0] linebuf_6_address0;
reg    linebuf_6_ce0;
wire   [31:0] linebuf_6_q0;
wire   [10:0] linebuf_6_address1;
reg    linebuf_6_ce1;
reg    linebuf_6_we1;
wire   [10:0] linebuf_7_address0;
reg    linebuf_7_ce0;
wire   [31:0] linebuf_7_q0;
wire   [10:0] linebuf_7_address1;
reg    linebuf_7_ce1;
reg    linebuf_7_we1;
wire   [10:0] linebuf_8_address0;
reg    linebuf_8_ce0;
wire   [31:0] linebuf_8_q0;
wire   [10:0] linebuf_8_address1;
reg    linebuf_8_ce1;
reg    linebuf_8_we1;
wire   [10:0] linebuf_9_address0;
reg    linebuf_9_ce0;
wire   [31:0] linebuf_9_q0;
wire   [10:0] linebuf_9_address1;
reg    linebuf_9_ce1;
reg    linebuf_9_we1;
reg    hconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln210_reg_640;
reg    filter_coeffs_0_blk_n;
reg    vconv_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] select_ln229_1_reg_649;
reg   [0:0] select_ln229_1_reg_649_pp0_iter1_reg;
reg    filter_coeffs_1_blk_n;
reg    filter_coeffs_2_blk_n;
reg    filter_coeffs_3_blk_n;
reg    filter_coeffs_4_blk_n;
reg    filter_coeffs_5_blk_n;
reg    filter_coeffs_6_blk_n;
reg    filter_coeffs_7_blk_n;
reg    filter_coeffs_8_blk_n;
reg    filter_coeffs_9_blk_n;
reg    filter_coeffs_10_blk_n;
reg   [16:0] indvar_flatten_reg_363;
reg   [8:0] col1_0_i_i_reg_374;
reg   [8:0] row2_0_i_i_reg_385;
reg  signed [31:0] filter_coeffs_0_rea_reg_585;
reg    ap_block_state1;
reg  signed [31:0] filter_coeffs_1_rea_reg_590;
reg  signed [31:0] filter_coeffs_2_rea_reg_595;
reg  signed [31:0] filter_coeffs_3_rea_reg_600;
reg  signed [31:0] filter_coeffs_4_rea_reg_605;
reg  signed [31:0] filter_coeffs_5_rea_reg_610;
reg  signed [31:0] filter_coeffs_6_rea_reg_615;
reg  signed [31:0] filter_coeffs_7_rea_reg_620;
reg  signed [31:0] filter_coeffs_8_rea_reg_625;
reg  signed [31:0] filter_coeffs_9_rea_reg_630;
reg  signed [31:0] filter_coeffs_10_re_reg_635;
wire   [0:0] icmp_ln210_fu_396_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [16:0] add_ln210_fu_402_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln229_1_fu_440_p3;
wire   [8:0] select_ln210_fu_448_p3;
reg   [10:0] linebuf_0_addr_reg_658;
reg   [10:0] linebuf_1_addr_reg_664;
reg   [10:0] linebuf_2_addr_reg_670;
reg   [10:0] linebuf_3_addr_reg_676;
reg   [10:0] linebuf_4_addr_reg_682;
reg   [10:0] linebuf_5_addr_reg_688;
reg   [10:0] linebuf_6_addr_reg_694;
reg   [10:0] linebuf_7_addr_reg_700;
reg   [10:0] linebuf_8_addr_reg_706;
reg   [10:0] linebuf_9_addr_reg_712;
wire   [8:0] row_fu_470_p2;
wire   [31:0] mul_ln225_5_fu_501_p2;
reg   [31:0] mul_ln225_5_reg_723;
wire   [31:0] mul_ln225_8_fu_516_p2;
reg   [31:0] mul_ln225_8_reg_728;
wire   [31:0] mul_ln225_9_fu_521_p2;
reg   [31:0] mul_ln225_9_reg_733;
wire   [31:0] mul_ln225_10_fu_526_p2;
reg   [31:0] mul_ln225_10_reg_738;
wire   [31:0] add_ln225_fu_531_p2;
reg   [31:0] add_ln225_reg_743;
wire   [31:0] add_ln225_2_fu_543_p2;
reg   [31:0] add_ln225_2_reg_748;
wire   [31:0] add_ln225_4_fu_549_p2;
reg   [31:0] add_ln225_4_reg_753;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln224_fu_456_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln212_fu_408_p2;
wire   [8:0] add_ln210_1_fu_422_p2;
wire   [0:0] icmp_ln229_fu_428_p2;
wire   [0:0] icmp_ln229_1_fu_434_p2;
wire   [8:0] select_ln229_fu_414_p3;
wire  signed [31:0] mul_ln225_fu_476_p0;
wire  signed [31:0] mul_ln225_1_fu_481_p0;
wire  signed [31:0] mul_ln225_2_fu_486_p0;
wire  signed [31:0] mul_ln225_3_fu_491_p0;
wire  signed [31:0] mul_ln225_4_fu_496_p0;
wire  signed [31:0] mul_ln225_5_fu_501_p0;
wire  signed [31:0] mul_ln225_6_fu_506_p0;
wire  signed [31:0] mul_ln225_7_fu_511_p0;
wire  signed [31:0] mul_ln225_8_fu_516_p0;
wire  signed [31:0] mul_ln225_9_fu_521_p0;
wire  signed [31:0] mul_ln225_10_fu_526_p0;
wire   [31:0] mul_ln225_fu_476_p2;
wire   [31:0] mul_ln225_1_fu_481_p2;
wire   [31:0] mul_ln225_3_fu_491_p2;
wire   [31:0] mul_ln225_4_fu_496_p2;
wire   [31:0] add_ln225_1_fu_537_p2;
wire   [31:0] mul_ln225_2_fu_486_p2;
wire   [31:0] mul_ln225_6_fu_506_p2;
wire   [31:0] mul_ln225_7_fu_511_p2;
wire   [31:0] add_ln225_6_fu_563_p2;
wire   [31:0] add_ln225_7_fu_567_p2;
wire   [31:0] add_ln225_5_fu_559_p2;
wire   [31:0] add_ln225_8_fu_572_p2;
wire   [31:0] add_ln225_3_fu_555_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_46;
reg    ap_enable_state2_pp0_iter0_stage0;
reg    ap_enable_operation_68;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_enable_operation_72;
reg    ap_enable_operation_48;
reg    ap_enable_operation_70;
reg    ap_enable_operation_75;
reg    ap_enable_operation_50;
reg    ap_enable_operation_73;
reg    ap_enable_operation_78;
reg    ap_enable_operation_52;
reg    ap_enable_operation_76;
reg    ap_enable_operation_81;
reg    ap_enable_operation_54;
reg    ap_enable_operation_79;
reg    ap_enable_operation_84;
reg    ap_enable_operation_56;
reg    ap_enable_operation_82;
reg    ap_enable_operation_87;
reg    ap_enable_operation_58;
reg    ap_enable_operation_85;
reg    ap_enable_operation_90;
reg    ap_enable_operation_60;
reg    ap_enable_operation_88;
reg    ap_enable_operation_93;
reg    ap_enable_operation_62;
reg    ap_enable_operation_91;
reg    ap_enable_operation_96;
reg    ap_enable_operation_64;
reg    ap_enable_operation_94;
reg    ap_enable_operation_102;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .q0(linebuf_0_q0),
    .address1(linebuf_0_address1),
    .ce1(linebuf_0_ce1),
    .we1(linebuf_0_we1),
    .d1(linebuf_1_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .q0(linebuf_1_q0),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1),
    .we1(linebuf_1_we1),
    .d1(linebuf_2_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_2_address0),
    .ce0(linebuf_2_ce0),
    .q0(linebuf_2_q0),
    .address1(linebuf_2_address1),
    .ce1(linebuf_2_ce1),
    .we1(linebuf_2_we1),
    .d1(linebuf_3_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_3_address0),
    .ce0(linebuf_3_ce0),
    .q0(linebuf_3_q0),
    .address1(linebuf_3_address1),
    .ce1(linebuf_3_ce1),
    .we1(linebuf_3_we1),
    .d1(linebuf_4_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_4_address0),
    .ce0(linebuf_4_ce0),
    .q0(linebuf_4_q0),
    .address1(linebuf_4_address1),
    .ce1(linebuf_4_ce1),
    .we1(linebuf_4_we1),
    .d1(linebuf_5_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_5_address0),
    .ce0(linebuf_5_ce0),
    .q0(linebuf_5_q0),
    .address1(linebuf_5_address1),
    .ce1(linebuf_5_ce1),
    .we1(linebuf_5_we1),
    .d1(linebuf_6_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_6_address0),
    .ce0(linebuf_6_ce0),
    .q0(linebuf_6_q0),
    .address1(linebuf_6_address1),
    .ce1(linebuf_6_ce1),
    .we1(linebuf_6_we1),
    .d1(linebuf_7_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_7_address0),
    .ce0(linebuf_7_ce0),
    .q0(linebuf_7_q0),
    .address1(linebuf_7_address1),
    .ce1(linebuf_7_ce1),
    .we1(linebuf_7_we1),
    .d1(linebuf_8_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_8_address0),
    .ce0(linebuf_8_ce0),
    .q0(linebuf_8_q0),
    .address1(linebuf_8_address1),
    .ce1(linebuf_8_ce1),
    .we1(linebuf_8_we1),
    .d1(linebuf_9_q0)
);

Loop_VConv_A_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_9_address0),
    .ce0(linebuf_9_ce0),
    .q0(linebuf_9_q0),
    .address1(linebuf_9_address1),
    .ce1(linebuf_9_ce1),
    .we1(linebuf_9_we1),
    .d1(hconv_V_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_fu_396_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col1_0_i_i_reg_374 <= select_ln210_fu_448_p3;
    end else if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col1_0_i_i_reg_374 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_fu_396_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_363 <= add_ln210_fu_402_p2;
    end else if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_363 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_fu_396_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row2_0_i_i_reg_385 <= row_fu_470_p2;
    end else if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row2_0_i_i_reg_385 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln225_2_reg_748 <= add_ln225_2_fu_543_p2;
        add_ln225_4_reg_753 <= add_ln225_4_fu_549_p2;
        add_ln225_reg_743 <= add_ln225_fu_531_p2;
        mul_ln225_10_reg_738 <= mul_ln225_10_fu_526_p2;
        mul_ln225_5_reg_723 <= mul_ln225_5_fu_501_p2;
        mul_ln225_8_reg_728 <= mul_ln225_8_fu_516_p2;
        mul_ln225_9_reg_733 <= mul_ln225_9_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_0_rea_reg_585 <= filter_coeffs_0_dout;
        filter_coeffs_10_re_reg_635 <= filter_coeffs_10_dout;
        filter_coeffs_1_rea_reg_590 <= filter_coeffs_1_dout;
        filter_coeffs_2_rea_reg_595 <= filter_coeffs_2_dout;
        filter_coeffs_3_rea_reg_600 <= filter_coeffs_3_dout;
        filter_coeffs_4_rea_reg_605 <= filter_coeffs_4_dout;
        filter_coeffs_5_rea_reg_610 <= filter_coeffs_5_dout;
        filter_coeffs_6_rea_reg_615 <= filter_coeffs_6_dout;
        filter_coeffs_7_rea_reg_620 <= filter_coeffs_7_dout;
        filter_coeffs_8_rea_reg_625 <= filter_coeffs_8_dout;
        filter_coeffs_9_rea_reg_630 <= filter_coeffs_9_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln210_reg_640 <= icmp_ln210_fu_396_p2;
        select_ln229_1_reg_649_pp0_iter1_reg <= select_ln229_1_reg_649;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_0_addr_reg_658[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_1_addr_reg_664[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_2_addr_reg_670[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_3_addr_reg_676[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_4_addr_reg_682[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_5_addr_reg_688[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_6_addr_reg_694[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_7_addr_reg_700[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_8_addr_reg_706[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        linebuf_9_addr_reg_712[8 : 0] <= zext_ln224_fu_456_p1[8 : 0];
        select_ln229_1_reg_649 <= select_ln229_1_fu_440_p3;
    end
end

always @ (*) begin
    if ((icmp_ln210_fu_396_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_0_blk_n = filter_coeffs_0_empty_n;
    end else begin
        filter_coeffs_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_0_read = 1'b1;
    end else begin
        filter_coeffs_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_10_blk_n = filter_coeffs_10_empty_n;
    end else begin
        filter_coeffs_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_10_read = 1'b1;
    end else begin
        filter_coeffs_10_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_1_blk_n = filter_coeffs_1_empty_n;
    end else begin
        filter_coeffs_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_1_read = 1'b1;
    end else begin
        filter_coeffs_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_2_blk_n = filter_coeffs_2_empty_n;
    end else begin
        filter_coeffs_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_2_read = 1'b1;
    end else begin
        filter_coeffs_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_3_blk_n = filter_coeffs_3_empty_n;
    end else begin
        filter_coeffs_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_3_read = 1'b1;
    end else begin
        filter_coeffs_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_4_blk_n = filter_coeffs_4_empty_n;
    end else begin
        filter_coeffs_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_4_read = 1'b1;
    end else begin
        filter_coeffs_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_5_blk_n = filter_coeffs_5_empty_n;
    end else begin
        filter_coeffs_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_5_read = 1'b1;
    end else begin
        filter_coeffs_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_6_blk_n = filter_coeffs_6_empty_n;
    end else begin
        filter_coeffs_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_6_read = 1'b1;
    end else begin
        filter_coeffs_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_7_blk_n = filter_coeffs_7_empty_n;
    end else begin
        filter_coeffs_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_7_read = 1'b1;
    end else begin
        filter_coeffs_7_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_8_blk_n = filter_coeffs_8_empty_n;
    end else begin
        filter_coeffs_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_8_read = 1'b1;
    end else begin
        filter_coeffs_8_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_9_blk_n = filter_coeffs_9_empty_n;
    end else begin
        filter_coeffs_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        filter_coeffs_9_read = 1'b1;
    end else begin
        filter_coeffs_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln210_reg_640 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hconv_V_blk_n = hconv_V_empty_n;
    end else begin
        hconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hconv_V_read = 1'b1;
    end else begin
        hconv_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_0_ce1 = 1'b1;
    end else begin
        linebuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_0_we1 = 1'b1;
    end else begin
        linebuf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce1 = 1'b1;
    end else begin
        linebuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_we1 = 1'b1;
    end else begin
        linebuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce0 = 1'b1;
    end else begin
        linebuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce1 = 1'b1;
    end else begin
        linebuf_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_we1 = 1'b1;
    end else begin
        linebuf_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce0 = 1'b1;
    end else begin
        linebuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_ce1 = 1'b1;
    end else begin
        linebuf_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_3_we1 = 1'b1;
    end else begin
        linebuf_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce0 = 1'b1;
    end else begin
        linebuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_ce1 = 1'b1;
    end else begin
        linebuf_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_4_we1 = 1'b1;
    end else begin
        linebuf_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce0 = 1'b1;
    end else begin
        linebuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_ce1 = 1'b1;
    end else begin
        linebuf_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_5_we1 = 1'b1;
    end else begin
        linebuf_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce0 = 1'b1;
    end else begin
        linebuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_ce1 = 1'b1;
    end else begin
        linebuf_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_6_we1 = 1'b1;
    end else begin
        linebuf_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce0 = 1'b1;
    end else begin
        linebuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_ce1 = 1'b1;
    end else begin
        linebuf_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_7_we1 = 1'b1;
    end else begin
        linebuf_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce0 = 1'b1;
    end else begin
        linebuf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_ce1 = 1'b1;
    end else begin
        linebuf_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_8_we1 = 1'b1;
    end else begin
        linebuf_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce0 = 1'b1;
    end else begin
        linebuf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_ce1 = 1'b1;
    end else begin
        linebuf_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_9_we1 = 1'b1;
    end else begin
        linebuf_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln229_1_reg_649_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vconv_V_blk_n = vconv_V_full_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln229_1_reg_649_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        vconv_V_write = 1'b1;
    end else begin
        vconv_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln210_fu_396_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln210_fu_396_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln210_1_fu_422_p2 = (col1_0_i_i_reg_374 + 9'd1);

assign add_ln210_fu_402_p2 = (indvar_flatten_reg_363 + 17'd1);

assign add_ln225_1_fu_537_p2 = (mul_ln225_3_fu_491_p2 + mul_ln225_4_fu_496_p2);

assign add_ln225_2_fu_543_p2 = (add_ln225_1_fu_537_p2 + mul_ln225_2_fu_486_p2);

assign add_ln225_3_fu_555_p2 = (add_ln225_2_reg_748 + add_ln225_reg_743);

assign add_ln225_4_fu_549_p2 = (mul_ln225_6_fu_506_p2 + mul_ln225_7_fu_511_p2);

assign add_ln225_5_fu_559_p2 = (add_ln225_4_reg_753 + mul_ln225_5_reg_723);

assign add_ln225_6_fu_563_p2 = (mul_ln225_9_reg_733 + mul_ln225_10_reg_738);

assign add_ln225_7_fu_567_p2 = (add_ln225_6_fu_563_p2 + mul_ln225_8_reg_728);

assign add_ln225_8_fu_572_p2 = (add_ln225_7_fu_567_p2 + add_ln225_5_fu_559_p2);

assign add_ln225_fu_531_p2 = (mul_ln225_fu_476_p2 + mul_ln225_1_fu_481_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((vconv_V_full_n == 1'b0) & (select_ln229_1_reg_649_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((hconv_V_empty_n == 1'b0) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_full_n == 1'b0) & (select_ln229_1_reg_649_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((hconv_V_empty_n == 1'b0) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_full_n == 1'b0) & (select_ln229_1_reg_649_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((hconv_V_empty_n == 1'b0) & (icmp_ln210_reg_640 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (filter_coeffs_10_empty_n == 1'b0) | (filter_coeffs_9_empty_n == 1'b0) | (filter_coeffs_8_empty_n == 1'b0) | (filter_coeffs_7_empty_n == 1'b0) | (filter_coeffs_6_empty_n == 1'b0) | (filter_coeffs_5_empty_n == 1'b0) | (filter_coeffs_4_empty_n == 1'b0) | (filter_coeffs_3_empty_n == 1'b0) | (filter_coeffs_2_empty_n == 1'b0) | (filter_coeffs_1_empty_n == 1'b0) | (filter_coeffs_0_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((hconv_V_empty_n == 1'b0) & (icmp_ln210_reg_640 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((vconv_V_full_n == 1'b0) & (select_ln229_1_reg_649_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_enable_operation_102 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_46 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_48 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_50 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_52 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_54 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_56 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_58 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_60 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_62 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_64 = (icmp_ln210_fu_396_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_68 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_70 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_72 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_73 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_75 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_76 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_78 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_79 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_81 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_82 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_84 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_85 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_87 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_88 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_90 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_91 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_93 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_94 = (icmp_ln210_reg_640 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_96 = (icmp_ln210_reg_640 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln210_fu_396_p2 = ((indvar_flatten_reg_363 == 17'd99200) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_408_p2 = ((row2_0_i_i_reg_385 == 9'd310) ? 1'b1 : 1'b0);

assign icmp_ln229_1_fu_434_p2 = ((col1_0_i_i_reg_374 > 9'd9) ? 1'b1 : 1'b0);

assign icmp_ln229_fu_428_p2 = ((add_ln210_1_fu_422_p2 > 9'd9) ? 1'b1 : 1'b0);

assign linebuf_0_address0 = zext_ln224_fu_456_p1;

assign linebuf_0_address1 = linebuf_0_addr_reg_658;

assign linebuf_1_address0 = zext_ln224_fu_456_p1;

assign linebuf_1_address1 = linebuf_1_addr_reg_664;

assign linebuf_2_address0 = zext_ln224_fu_456_p1;

assign linebuf_2_address1 = linebuf_2_addr_reg_670;

assign linebuf_3_address0 = zext_ln224_fu_456_p1;

assign linebuf_3_address1 = linebuf_3_addr_reg_676;

assign linebuf_4_address0 = zext_ln224_fu_456_p1;

assign linebuf_4_address1 = linebuf_4_addr_reg_682;

assign linebuf_5_address0 = zext_ln224_fu_456_p1;

assign linebuf_5_address1 = linebuf_5_addr_reg_688;

assign linebuf_6_address0 = zext_ln224_fu_456_p1;

assign linebuf_6_address1 = linebuf_6_addr_reg_694;

assign linebuf_7_address0 = zext_ln224_fu_456_p1;

assign linebuf_7_address1 = linebuf_7_addr_reg_700;

assign linebuf_8_address0 = zext_ln224_fu_456_p1;

assign linebuf_8_address1 = linebuf_8_addr_reg_706;

assign linebuf_9_address0 = zext_ln224_fu_456_p1;

assign linebuf_9_address1 = linebuf_9_addr_reg_712;

assign mul_ln225_10_fu_526_p0 = hconv_V_dout;

assign mul_ln225_10_fu_526_p2 = ($signed(mul_ln225_10_fu_526_p0) * $signed(filter_coeffs_10_re_reg_635));

assign mul_ln225_1_fu_481_p0 = linebuf_1_q0;

assign mul_ln225_1_fu_481_p2 = ($signed(mul_ln225_1_fu_481_p0) * $signed(filter_coeffs_1_rea_reg_590));

assign mul_ln225_2_fu_486_p0 = linebuf_2_q0;

assign mul_ln225_2_fu_486_p2 = ($signed(mul_ln225_2_fu_486_p0) * $signed(filter_coeffs_2_rea_reg_595));

assign mul_ln225_3_fu_491_p0 = linebuf_3_q0;

assign mul_ln225_3_fu_491_p2 = ($signed(mul_ln225_3_fu_491_p0) * $signed(filter_coeffs_3_rea_reg_600));

assign mul_ln225_4_fu_496_p0 = linebuf_4_q0;

assign mul_ln225_4_fu_496_p2 = ($signed(mul_ln225_4_fu_496_p0) * $signed(filter_coeffs_4_rea_reg_605));

assign mul_ln225_5_fu_501_p0 = linebuf_5_q0;

assign mul_ln225_5_fu_501_p2 = ($signed(mul_ln225_5_fu_501_p0) * $signed(filter_coeffs_5_rea_reg_610));

assign mul_ln225_6_fu_506_p0 = linebuf_6_q0;

assign mul_ln225_6_fu_506_p2 = ($signed(mul_ln225_6_fu_506_p0) * $signed(filter_coeffs_6_rea_reg_615));

assign mul_ln225_7_fu_511_p0 = linebuf_7_q0;

assign mul_ln225_7_fu_511_p2 = ($signed(mul_ln225_7_fu_511_p0) * $signed(filter_coeffs_7_rea_reg_620));

assign mul_ln225_8_fu_516_p0 = linebuf_8_q0;

assign mul_ln225_8_fu_516_p2 = ($signed(mul_ln225_8_fu_516_p0) * $signed(filter_coeffs_8_rea_reg_625));

assign mul_ln225_9_fu_521_p0 = linebuf_9_q0;

assign mul_ln225_9_fu_521_p2 = ($signed(mul_ln225_9_fu_521_p0) * $signed(filter_coeffs_9_rea_reg_630));

assign mul_ln225_fu_476_p0 = linebuf_0_q0;

assign mul_ln225_fu_476_p2 = ($signed(mul_ln225_fu_476_p0) * $signed(filter_coeffs_0_rea_reg_585));

assign row_fu_470_p2 = (select_ln229_fu_414_p3 + 9'd1);

assign select_ln210_fu_448_p3 = ((icmp_ln212_fu_408_p2[0:0] === 1'b1) ? add_ln210_1_fu_422_p2 : col1_0_i_i_reg_374);

assign select_ln229_1_fu_440_p3 = ((icmp_ln212_fu_408_p2[0:0] === 1'b1) ? icmp_ln229_fu_428_p2 : icmp_ln229_1_fu_434_p2);

assign select_ln229_fu_414_p3 = ((icmp_ln212_fu_408_p2[0:0] === 1'b1) ? 9'd0 : row2_0_i_i_reg_385);

assign start_out = real_start;

assign vconv_V_din = (add_ln225_8_fu_572_p2 + add_ln225_3_fu_555_p2);

assign zext_ln224_fu_456_p1 = select_ln229_fu_414_p3;

always @ (posedge ap_clk) begin
    linebuf_0_addr_reg_658[10:9] <= 2'b00;
    linebuf_1_addr_reg_664[10:9] <= 2'b00;
    linebuf_2_addr_reg_670[10:9] <= 2'b00;
    linebuf_3_addr_reg_676[10:9] <= 2'b00;
    linebuf_4_addr_reg_682[10:9] <= 2'b00;
    linebuf_5_addr_reg_688[10:9] <= 2'b00;
    linebuf_6_addr_reg_694[10:9] <= 2'b00;
    linebuf_7_addr_reg_700[10:9] <= 2'b00;
    linebuf_8_addr_reg_706[10:9] <= 2'b00;
    linebuf_9_addr_reg_712[10:9] <= 2'b00;
end

endmodule //Loop_VConv_A_proc6
