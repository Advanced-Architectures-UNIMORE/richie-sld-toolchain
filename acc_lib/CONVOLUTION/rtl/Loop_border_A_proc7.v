// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2_AR72614
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_border_A_proc7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dst_V_TDATA,
        dst_V_TVALID,
        dst_V_TREADY,
        vconv_V_dout,
        vconv_V_empty_n,
        vconv_V_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] dst_V_TDATA;
output   dst_V_TVALID;
input   dst_V_TREADY;
input  [31:0] vconv_V_dout;
input   vconv_V_empty_n;
output   vconv_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vconv_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln242_reg_410;
reg   [0:0] icmp_ln242_reg_410_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln242_reg_410_pp0_iter3_reg;
reg    vconv_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] select_ln251_1_reg_429;
reg   [0:0] icmp_ln255_reg_438;
reg   [16:0] indvar_flatten_reg_131;
reg   [8:0] i6_0_i_reg_142;
reg   [8:0] j_0_i_reg_153;
wire   [0:0] icmp_ln242_fu_194_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op40_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln242_reg_410_pp0_iter1_reg;
wire   [16:0] add_ln242_fu_200_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] select_ln251_fu_212_p3;
reg   [8:0] select_ln251_reg_419;
reg   [8:0] select_ln251_reg_419_pp0_iter1_reg;
wire   [0:0] select_ln251_1_fu_256_p3;
reg   [0:0] select_ln251_1_reg_429_pp0_iter1_reg;
wire   [8:0] select_ln242_fu_264_p3;
wire   [0:0] icmp_ln255_fu_272_p2;
wire   [8:0] j_fu_278_p2;
wire   [0:0] icmp_ln268_fu_338_p2;
reg   [0:0] icmp_ln268_reg_447;
wire   [0:0] icmp_ln270_fu_343_p2;
reg   [0:0] icmp_ln270_reg_453;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] borderbuf_address0;
reg    borderbuf_ce0;
reg    borderbuf_we0;
wire   [10:0] borderbuf_address1;
reg    borderbuf_ce1;
wire   [31:0] borderbuf_q1;
wire   [63:0] zext_ln257_fu_284_p1;
wire   [63:0] zext_ln273_fu_353_p1;
reg   [31:0] r_edge_pix_fu_78;
reg   [31:0] pix_out_fu_82;
wire   [31:0] l_edge_pix_fu_320_p3;
reg   [31:0] pix_out_1_fu_86;
wire   [31:0] select_ln259_fu_307_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln251_1_fu_170_p2;
wire   [0:0] icmp_ln251_2_fu_176_p2;
wire   [0:0] icmp_ln251_fu_164_p2;
wire   [0:0] and_ln251_fu_182_p2;
wire   [0:0] icmp_ln244_fu_206_p2;
wire   [8:0] add_ln242_1_fu_220_p2;
wire   [0:0] icmp_ln251_4_fu_232_p2;
wire   [0:0] icmp_ln251_5_fu_238_p2;
wire   [0:0] icmp_ln251_3_fu_226_p2;
wire   [0:0] and_ln251_1_fu_244_p2;
wire   [0:0] or_ln251_1_fu_250_p2;
wire   [0:0] or_ln251_fu_188_p2;
wire   [0:0] icmp_ln259_fu_302_p2;
wire   [0:0] icmp_ln262_fu_315_p2;
wire   [8:0] add_ln273_fu_348_p2;
wire   [0:0] xor_ln268_fu_364_p2;
wire   [0:0] and_ln270_fu_369_p2;
wire   [31:0] pix_out_8_fu_374_p3;
wire    ap_CS_fsm_state7;
wire    regslice_both_dst_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] dst_V_TDATA_int;
reg    dst_V_TVALID_int;
wire    dst_V_TREADY_int;
wire    regslice_both_dst_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Loop_border_A_prolbW #(
    .DataWidth( 32 ),
    .AddressRange( 1910 ),
    .AddressWidth( 11 ))
borderbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(borderbuf_address0),
    .ce0(borderbuf_ce0),
    .we0(borderbuf_we0),
    .d0(vconv_V_dout),
    .address1(borderbuf_address1),
    .ce1(borderbuf_ce1),
    .q1(borderbuf_q1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dst_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(dst_V_TDATA_int),
    .vld_in(dst_V_TVALID_int),
    .ack_in(dst_V_TREADY_int),
    .data_out(dst_V_TDATA),
    .vld_out(regslice_both_dst_V_U_vld_out),
    .ack_out(dst_V_TREADY),
    .apdone_blk(regslice_both_dst_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i6_0_i_reg_142 <= select_ln242_fu_264_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i6_0_i_reg_142 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_131 <= add_ln242_fu_200_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_131 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_i_reg_153 <= j_fu_278_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_i_reg_153 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln242_reg_410 <= icmp_ln242_fu_194_p2;
        icmp_ln242_reg_410_pp0_iter1_reg <= icmp_ln242_reg_410;
        select_ln251_1_reg_429_pp0_iter1_reg <= select_ln251_1_reg_429;
        select_ln251_reg_419_pp0_iter1_reg <= select_ln251_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln242_reg_410_pp0_iter2_reg <= icmp_ln242_reg_410_pp0_iter1_reg;
        icmp_ln242_reg_410_pp0_iter3_reg <= icmp_ln242_reg_410_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln251_1_fu_256_p3 == 1'd1) & (icmp_ln242_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln255_reg_438 <= icmp_ln255_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_reg_410_pp0_iter1_reg == 1'd0))) begin
        icmp_ln268_reg_447 <= icmp_ln268_fu_338_p2;
        icmp_ln270_reg_453 <= icmp_ln270_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln251_1_reg_429_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pix_out_1_fu_86 <= select_ln259_fu_307_p3;
        pix_out_fu_82 <= l_edge_pix_fu_320_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln255_reg_438 == 1'd1) & (select_ln251_1_reg_429 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_edge_pix_fu_78 <= vconv_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln251_1_reg_429 <= select_ln251_1_fu_256_p3;
        select_ln251_reg_419 <= select_ln251_fu_212_p3;
    end
end

always @ (*) begin
    if ((icmp_ln242_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        borderbuf_ce0 = 1'b1;
    end else begin
        borderbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borderbuf_ce1 = 1'b1;
    end else begin
        borderbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln255_reg_438 == 1'd1) & (select_ln251_1_reg_429 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        borderbuf_we0 = 1'b1;
    end else begin
        borderbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln242_reg_410_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln242_reg_410_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        dst_V_TDATA_blk_n = dst_V_TREADY_int;
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln242_reg_410_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_V_TVALID_int = 1'b1;
    end else begin
        dst_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln255_reg_438 == 1'd1) & (select_ln251_1_reg_429 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_V_blk_n = vconv_V_empty_n;
    end else begin
        vconv_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_V_read = 1'b1;
    end else begin
        vconv_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln242_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln242_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_dst_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln242_1_fu_220_p2 = (i6_0_i_reg_142 + 9'd1);

assign add_ln242_fu_200_p2 = (indvar_flatten_reg_131 + 17'd1);

assign add_ln273_fu_348_p2 = ($signed(select_ln251_reg_419_pp0_iter1_reg) + $signed(9'd507));

assign and_ln251_1_fu_244_p2 = (icmp_ln251_5_fu_238_p2 & icmp_ln251_4_fu_232_p2);

assign and_ln251_fu_182_p2 = (icmp_ln251_2_fu_176_p2 & icmp_ln251_1_fu_170_p2);

assign and_ln270_fu_369_p2 = (xor_ln268_fu_364_p2 & icmp_ln270_reg_453);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((vconv_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((vconv_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln242_reg_410_pp0_iter2_reg == 1'd0) & (dst_V_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln242_reg_410_pp0_iter3_reg == 1'd0) & (dst_V_TREADY_int == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op40_read_state3 = ((icmp_ln255_reg_438 == 1'd1) & (select_ln251_1_reg_429 == 1'd1));
end

assign borderbuf_address0 = zext_ln257_fu_284_p1;

assign borderbuf_address1 = zext_ln273_fu_353_p1;

assign dst_V_TDATA_int = ((icmp_ln268_reg_447[0:0] === 1'b1) ? pix_out_1_fu_86 : pix_out_8_fu_374_p3);

assign dst_V_TVALID = regslice_both_dst_V_U_vld_out;

assign icmp_ln242_fu_194_p2 = ((indvar_flatten_reg_131 == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_206_p2 = ((j_0_i_reg_153 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln251_1_fu_170_p2 = ((i6_0_i_reg_142 > 9'd5) ? 1'b1 : 1'b0);

assign icmp_ln251_2_fu_176_p2 = ((i6_0_i_reg_142 < 9'd315) ? 1'b1 : 1'b0);

assign icmp_ln251_3_fu_226_p2 = ((add_ln242_1_fu_220_p2 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln251_4_fu_232_p2 = ((add_ln242_1_fu_220_p2 > 9'd5) ? 1'b1 : 1'b0);

assign icmp_ln251_5_fu_238_p2 = ((add_ln242_1_fu_220_p2 < 9'd315) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_164_p2 = ((i6_0_i_reg_142 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_272_p2 = ((select_ln251_fu_212_p3 < 9'd310) ? 1'b1 : 1'b0);

assign icmp_ln259_fu_302_p2 = ((select_ln251_reg_419_pp0_iter1_reg == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln262_fu_315_p2 = ((select_ln251_reg_419_pp0_iter1_reg == 9'd309) ? 1'b1 : 1'b0);

assign icmp_ln268_fu_338_p2 = ((select_ln251_reg_419_pp0_iter1_reg < 9'd6) ? 1'b1 : 1'b0);

assign icmp_ln270_fu_343_p2 = ((select_ln251_reg_419_pp0_iter1_reg < 9'd314) ? 1'b1 : 1'b0);

assign j_fu_278_p2 = (select_ln251_fu_212_p3 + 9'd1);

assign l_edge_pix_fu_320_p3 = ((icmp_ln262_fu_315_p2[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_fu_82);

assign or_ln251_1_fu_250_p2 = (icmp_ln251_3_fu_226_p2 | and_ln251_1_fu_244_p2);

assign or_ln251_fu_188_p2 = (icmp_ln251_fu_164_p2 | and_ln251_fu_182_p2);

assign pix_out_8_fu_374_p3 = ((and_ln270_fu_369_p2[0:0] === 1'b1) ? borderbuf_q1 : pix_out_fu_82);

assign select_ln242_fu_264_p3 = ((icmp_ln244_fu_206_p2[0:0] === 1'b1) ? add_ln242_1_fu_220_p2 : i6_0_i_reg_142);

assign select_ln251_1_fu_256_p3 = ((icmp_ln244_fu_206_p2[0:0] === 1'b1) ? or_ln251_1_fu_250_p2 : or_ln251_fu_188_p2);

assign select_ln251_fu_212_p3 = ((icmp_ln244_fu_206_p2[0:0] === 1'b1) ? 9'd0 : j_0_i_reg_153);

assign select_ln259_fu_307_p3 = ((icmp_ln259_fu_302_p2[0:0] === 1'b1) ? r_edge_pix_fu_78 : pix_out_1_fu_86);

assign xor_ln268_fu_364_p2 = (icmp_ln268_reg_447 ^ 1'd1);

assign zext_ln257_fu_284_p1 = select_ln251_reg_419;

assign zext_ln273_fu_353_p1 = add_ln273_fu_348_p2;

endmodule //Loop_border_A_proc7
