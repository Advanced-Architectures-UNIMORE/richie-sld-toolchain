// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exec_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_in_V_TDATA,
        x_in_V_TVALID,
        x_in_V_TREADY,
        h_0_V_read,
        ap_return_0,
        ap_return_1,
        x_in_V_TDATA_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_in_V_TDATA;
input   x_in_V_TVALID;
output   x_in_V_TREADY;
input  [31:0] h_0_V_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output   x_in_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_in_V_TREADY;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg x_in_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] s_x1_V_0;
reg   [31:0] s_x_V_0;
reg   [31:0] s_y1_V_0;
reg   [31:0] s_y0_V_0;
reg    ap_block_state1;
wire   [31:0] mul_ln68_fu_74_p2;
wire  signed [31:0] mul_ln68_fu_74_p0;
wire  signed [31:0] mul_ln68_fu_74_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 s_x1_V_0 = 32'd0;
#0 s_x_V_0 = 32'd0;
#0 s_y1_V_0 = 32'd0;
#0 s_y0_V_0 = 32'd0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= s_x1_V_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= s_y1_V_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_x1_V_0 <= s_x_V_0;
        s_x_V_0 <= x_in_V_TDATA;
        s_y0_V_0 <= mul_ln68_fu_74_p2;
        s_y1_V_0 <= s_y0_V_0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = s_x1_V_0;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = s_y1_V_0;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_in_V_TDATA_blk_n = x_in_V_TVALID;
    end else begin
        x_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_in_V_TREADY = 1'b1;
    end else begin
        x_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (x_in_V_TVALID == 1'b0));
end

assign mul_ln68_fu_74_p0 = s_x1_V_0;

assign mul_ln68_fu_74_p1 = h_0_V_read;

assign mul_ln68_fu_74_p2 = ($signed(mul_ln68_fu_74_p0) * $signed(mul_ln68_fu_74_p1));

endmodule //exec_1
