// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FIR,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.315000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=942,HLS_SYN_LUT=691,HLS_VERSION=2019_2}" *)

module FIR (
        ap_clk,
        ap_rst_n,
        x_V_TDATA,
        x_V_TVALID,
        x_V_TREADY,
        coeff0_V,
        coeff1_V,
        coeff2_V,
        coeff3_V,
        y_V_TDATA,
        y_V_TVALID,
        y_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] x_V_TDATA;
input   x_V_TVALID;
output   x_V_TREADY;
input  [31:0] coeff0_V;
input  [31:0] coeff1_V;
input  [31:0] coeff2_V;
input  [31:0] coeff3_V;
output  [31:0] y_V_TDATA;
output   y_V_TVALID;
input   y_V_TREADY;

reg x_V_TREADY;

 reg    ap_rst_n_inv;
reg   [0:0] guard_variable_for_F;
reg   [31:0] h_V_0;
reg   [31:0] h_V_1;
reg   [31:0] h_V_2;
reg   [31:0] h_V_3;
reg   [31:0] s_x_V_3;
reg   [31:0] s_x_V_1;
reg   [31:0] s_x_V_2;
reg   [31:0] s_x1_V_3;
reg   [31:0] s_x1_V_1;
reg   [31:0] s_x1_V_2;
reg   [31:0] s_y0_V_3;
reg   [31:0] s_y0_V_1;
reg   [31:0] s_y0_V_2;
reg   [31:0] s_y1_V_3;
reg   [31:0] s_y1_V_1;
reg   [31:0] s_y1_V_2;
wire    call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n;
reg    x_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln55_reg_679;
reg    y_V_TDATA_blk_n;
wire   [0:0] icmp_ln59_fu_614_p2;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln59_reg_686;
wire   [2:0] i_fu_240_p2;
reg   [2:0] i_reg_674;
wire    ap_CS_fsm_state2;
wire    regslice_both_y_V_U_apdone_blk;
wire   [0:0] icmp_ln55_fu_246_p2;
wire   [0:0] icmp_ln54_fu_234_p2;
reg    ap_block_state3;
reg    ap_block_state3_io;
reg    call_ret1_exec_1_fu_177_ap_start;
wire    call_ret1_exec_1_fu_177_ap_done;
wire    call_ret1_exec_1_fu_177_ap_idle;
wire    call_ret1_exec_1_fu_177_ap_ready;
wire    call_ret1_exec_1_fu_177_x_in_V_TREADY;
wire   [31:0] call_ret1_exec_1_fu_177_ap_return_0;
wire   [31:0] call_ret1_exec_1_fu_177_ap_return_1;
reg   [2:0] i_0_reg_165;
wire    ap_CS_fsm_state1;
reg    ap_block_state4_io;
wire   [0:0] guard_variable_for_F_1_load_fu_200_p1;
wire   [31:0] x_in_V_read_assign_fu_404_p6;
wire   [1:0] trunc_ln58_fu_270_p1;
wire   [31:0] systolic_x_V_read_as_fu_312_p3;
wire   [31:0] mul_ln68_fu_466_p2;
wire   [31:0] add_ln68_fu_460_p2;
reg   [31:0] x_int_0_V_1_fu_106;
reg   [31:0] y_int_3_V_fu_110;
wire   [31:0] y_int_2_V_fu_396_p3;
reg   [31:0] y_int_0_V_1_fu_114;
reg   [31:0] y_int_3_V_1_fu_118;
reg   [31:0] y_int_3_V_2_fu_122;
reg   [31:0] x_int_3_V_2_fu_126;
wire   [31:0] x_int_3_V_3_fu_567_p3;
reg   [31:0] x_int_3_V_4_fu_130;
wire   [31:0] x_int_3_V_1_fu_558_p3;
wire   [0:0] sel_tmp_fu_292_p2;
wire   [0:0] sel_tmp2_fu_306_p2;
wire   [31:0] sel_tmp1_fu_298_p3;
wire   [31:0] sel_tmp5_fu_332_p3;
wire   [31:0] sel_tmp9_fu_360_p3;
wire   [31:0] sel_tmp13_fu_388_p3;
wire   [1:0] add_ln58_fu_274_p2;
wire   [31:0] sel_tmp17_fu_430_p3;
wire   [31:0] systolic_y0_V_read_a_fu_368_p3;
wire   [31:0] y_in_V_read_assign_fu_446_p6;
wire  signed [31:0] x_int_2_V_fu_340_p3;
wire  signed [31:0] h_V_read_assign_fu_438_p3;
wire   [31:0] x_int_3_V_fu_550_p3;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_x_V_U_apdone_blk;
wire   [31:0] x_V_TDATA_int;
wire    x_V_TVALID_int;
reg    x_V_TREADY_int;
wire    regslice_both_x_V_U_ack_in;
reg    y_V_TVALID_int;
wire    y_V_TREADY_int;
wire    regslice_both_y_V_U_vld_out;

// power-on initialization
initial begin
#0 guard_variable_for_F = 1'd0;
#0 h_V_0 = 32'd0;
#0 h_V_1 = 32'd0;
#0 h_V_2 = 32'd0;
#0 h_V_3 = 32'd0;
#0 s_x_V_3 = 32'd0;
#0 s_x_V_1 = 32'd0;
#0 s_x_V_2 = 32'd0;
#0 s_x1_V_3 = 32'd0;
#0 s_x1_V_1 = 32'd0;
#0 s_x1_V_2 = 32'd0;
#0 s_y0_V_3 = 32'd0;
#0 s_y0_V_1 = 32'd0;
#0 s_y0_V_2 = 32'd0;
#0 s_y1_V_3 = 32'd0;
#0 s_y1_V_1 = 32'd0;
#0 s_y1_V_2 = 32'd0;
#0 ap_CS_fsm = 4'd1;
end

exec_1 call_ret1_exec_1_fu_177(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(call_ret1_exec_1_fu_177_ap_start),
    .ap_done(call_ret1_exec_1_fu_177_ap_done),
    .ap_idle(call_ret1_exec_1_fu_177_ap_idle),
    .ap_ready(call_ret1_exec_1_fu_177_ap_ready),
    .x_in_V_TDATA(x_V_TDATA_int),
    .x_in_V_TVALID(x_V_TVALID_int),
    .x_in_V_TREADY(call_ret1_exec_1_fu_177_x_in_V_TREADY),
    .h_0_V_read(h_V_0),
    .ap_return_0(call_ret1_exec_1_fu_177_ap_return_0),
    .ap_return_1(call_ret1_exec_1_fu_177_ap_return_1),
    .x_in_V_TDATA_blk_n(call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n)
);

FIR_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
FIR_mux_42_32_1_1_U3(
    .din0(x_int_0_V_1_fu_106),
    .din1(x_int_3_V_2_fu_126),
    .din2(x_int_3_V_4_fu_130),
    .din3(x_int_3_V_4_fu_130),
    .din4(add_ln58_fu_274_p2),
    .dout(x_in_V_read_assign_fu_404_p6)
);

FIR_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
FIR_mux_42_32_1_1_U4(
    .din0(y_int_0_V_1_fu_114),
    .din1(y_int_3_V_1_fu_118),
    .din2(y_int_3_V_2_fu_122),
    .din3(y_int_3_V_2_fu_122),
    .din4(add_ln58_fu_274_p2),
    .dout(y_in_V_read_assign_fu_446_p6)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_x_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_V_TDATA),
    .vld_in(x_V_TVALID),
    .ack_in(regslice_both_x_V_U_ack_in),
    .data_out(x_V_TDATA_int),
    .vld_out(x_V_TVALID_int),
    .ack_out(x_V_TREADY_int),
    .apdone_blk(regslice_both_x_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(y_int_3_V_fu_110),
    .vld_in(y_V_TVALID_int),
    .ack_in(y_V_TREADY_int),
    .data_out(y_V_TDATA),
    .vld_out(regslice_both_y_V_U_vld_out),
    .ack_out(y_V_TREADY),
    .apdone_blk(regslice_both_y_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
        i_0_reg_165 <= i_reg_674;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_165 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_F_1_load_fu_200_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        guard_variable_for_F <= 1'd1;
        h_V_0 <= coeff0_V;
        h_V_1 <= coeff1_V;
        h_V_2 <= coeff2_V;
        h_V_3 <= coeff3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_674 <= i_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln55_reg_679 <= icmp_ln55_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln55_reg_679 == 1'd1) & (call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln59_reg_686 <= icmp_ln59_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (trunc_ln58_fu_270_p1 == 2'd1))) begin
        s_x1_V_1 <= systolic_x_V_read_as_fu_312_p3;
        s_x_V_1 <= x_in_V_read_assign_fu_404_p6;
        s_y0_V_1 <= mul_ln68_fu_466_p2;
        s_y1_V_1 <= add_ln68_fu_460_p2;
        y_int_3_V_1_fu_118 <= y_int_2_V_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (trunc_ln58_fu_270_p1 == 2'd2))) begin
        s_x1_V_2 <= systolic_x_V_read_as_fu_312_p3;
        s_x_V_2 <= x_in_V_read_assign_fu_404_p6;
        s_y0_V_2 <= mul_ln68_fu_466_p2;
        s_y1_V_2 <= add_ln68_fu_460_p2;
        y_int_3_V_2_fu_122 <= y_int_2_V_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln58_fu_270_p1 == 2'd2) & ~(trunc_ln58_fu_270_p1 == 2'd1) & (regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        s_x1_V_3 <= systolic_x_V_read_as_fu_312_p3;
        s_x_V_3 <= x_in_V_read_assign_fu_404_p6;
        s_y0_V_3 <= mul_ln68_fu_466_p2;
        s_y1_V_3 <= add_ln68_fu_460_p2;
        y_int_3_V_fu_110 <= y_int_2_V_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln55_reg_679 == 1'd1) & (call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n == 1'b0))) & (icmp_ln55_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_int_0_V_1_fu_106 <= call_ret1_exec_1_fu_177_ap_return_0;
        y_int_0_V_1_fu_114 <= call_ret1_exec_1_fu_177_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (trunc_ln58_fu_270_p1 == 2'd2)) | (~(trunc_ln58_fu_270_p1 == 2'd2) & ~(trunc_ln58_fu_270_p1 == 2'd1) & (regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (icmp_ln55_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (trunc_ln58_fu_270_p1 == 2'd1)))) begin
        x_int_3_V_2_fu_126 <= x_int_3_V_3_fu_567_p3;
        x_int_3_V_4_fu_130 <= x_int_3_V_1_fu_558_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln55_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        call_ret1_exec_1_fu_177_ap_start = 1'b1;
    end else begin
        call_ret1_exec_1_fu_177_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_V_TDATA_blk_n = call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n;
    end else begin
        x_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_x_V_U_ack_in == 1'b1) & (x_V_TVALID == 1'b1))) begin
        x_V_TREADY = 1'b1;
    end else begin
        x_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_679 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_V_TREADY_int = call_ret1_exec_1_fu_177_x_in_V_TREADY;
    end else begin
        x_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln59_reg_686 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln59_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        y_V_TDATA_blk_n = y_V_TREADY_int;
    end else begin
        y_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln55_reg_679 == 1'd1) & (call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n == 1'b0))) & (icmp_ln59_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_V_TVALID_int = 1'b1;
    end else begin
        y_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_y_V_U_apdone_blk == 1'b0) & (icmp_ln54_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln55_reg_679 == 1'd1) & (call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_io))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_fu_274_p2 = ($signed(2'd3) + $signed(trunc_ln58_fu_270_p1));

assign add_ln68_fu_460_p2 = (systolic_y0_V_read_a_fu_368_p3 + y_in_V_read_assign_fu_446_p6);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3 = ((icmp_ln55_reg_679 == 1'd1) & (call_ret1_exec_1_fu_177_x_in_V_TDATA_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln59_fu_614_p2 == 1'd1) & (y_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln59_reg_686 == 1'd1) & (y_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign guard_variable_for_F_1_load_fu_200_p1 = guard_variable_for_F;

assign h_V_read_assign_fu_438_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? h_V_2 : sel_tmp17_fu_430_p3);

assign i_fu_240_p2 = (i_0_reg_165 + 3'd1);

assign icmp_ln54_fu_234_p2 = ((i_0_reg_165 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_246_p2 = ((i_0_reg_165 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_614_p2 = ((i_0_reg_165 == 3'd3) ? 1'b1 : 1'b0);

assign mul_ln68_fu_466_p2 = ($signed(x_int_2_V_fu_340_p3) * $signed(h_V_read_assign_fu_438_p3));

assign sel_tmp13_fu_388_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? s_y1_V_1 : s_y1_V_3);

assign sel_tmp17_fu_430_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? h_V_1 : h_V_3);

assign sel_tmp1_fu_298_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? s_x_V_1 : s_x_V_3);

assign sel_tmp2_fu_306_p2 = ((trunc_ln58_fu_270_p1 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_332_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? s_x1_V_1 : s_x1_V_3);

assign sel_tmp9_fu_360_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? s_y0_V_1 : s_y0_V_3);

assign sel_tmp_fu_292_p2 = ((trunc_ln58_fu_270_p1 == 2'd1) ? 1'b1 : 1'b0);

assign systolic_x_V_read_as_fu_312_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? s_x_V_2 : sel_tmp1_fu_298_p3);

assign systolic_y0_V_read_a_fu_368_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? s_y0_V_2 : sel_tmp9_fu_360_p3);

assign trunc_ln58_fu_270_p1 = i_0_reg_165[1:0];

assign x_int_2_V_fu_340_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? s_x1_V_2 : sel_tmp5_fu_332_p3);

assign x_int_3_V_1_fu_558_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? x_int_3_V_4_fu_130 : x_int_3_V_fu_550_p3);

assign x_int_3_V_3_fu_567_p3 = ((sel_tmp_fu_292_p2[0:0] === 1'b1) ? x_int_2_V_fu_340_p3 : x_int_3_V_2_fu_126);

assign x_int_3_V_fu_550_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? s_x1_V_2 : x_int_3_V_4_fu_130);

assign y_V_TVALID = regslice_both_y_V_U_vld_out;

assign y_int_2_V_fu_396_p3 = ((sel_tmp2_fu_306_p2[0:0] === 1'b1) ? s_y1_V_2 : sel_tmp13_fu_388_p3);

endmodule //FIR
