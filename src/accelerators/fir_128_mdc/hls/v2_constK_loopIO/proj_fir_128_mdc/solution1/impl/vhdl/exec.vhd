-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    x_in_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    h_V_read : IN STD_LOGIC_VECTOR (4 downto 0);
    y_in_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of exec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal x_in_V_read_1_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal systolic_y1_V_read_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal systolic_x1_V_read_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal systolic_x_V_read_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_66_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_72_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_72_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_4_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_5_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_72_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component fir_128_mdc_mul_5bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fir_128_mdc_mul_5bkb_U1 : component fir_128_mdc_mul_5bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 5,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_72_p0,
        din1 => systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read,
        ce => grp_fu_72_ce,
        dout => grp_fu_72_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                add_ln68_reg_135 <= add_ln68_fu_66_p2;
                systolic_x1_V_read_reg_119 <= systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read;
                systolic_x_V_read_reg_125 <= systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read;
                systolic_y1_V_read_reg_114 <= systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read;
                x_in_V_read_1_reg_109 <= x_in_V_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= systolic_x1_V_read_reg_119;
                ap_return_1_int_reg <= systolic_y1_V_read_reg_114;
                ap_return_2_int_reg <= x_in_V_read_1_reg_109;
                ap_return_3_int_reg <= systolic_x_V_read_reg_125;
                ap_return_4_int_reg <= grp_fu_72_p2;
                ap_return_5_int_reg <= add_ln68_reg_135;
            end if;
        end if;
    end process;
    add_ln68_fu_66_p2 <= std_logic_vector(unsigned(systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read) + unsigned(y_in_V_read));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(systolic_x1_V_read_reg_119, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= systolic_x1_V_read_reg_119;
        end if; 
    end process;


    ap_return_1_assign_proc : process(systolic_y1_V_read_reg_114, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= systolic_y1_V_read_reg_114;
        end if; 
    end process;


    ap_return_2_assign_proc : process(x_in_V_read_1_reg_109, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= x_in_V_read_1_reg_109;
        end if; 
    end process;


    ap_return_3_assign_proc : process(systolic_x_V_read_reg_125, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= systolic_x_V_read_reg_125;
        end if; 
    end process;


    ap_return_4_assign_proc : process(grp_fu_72_p2, ap_ce_reg, ap_return_4_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_4 <= ap_return_4_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_4 <= grp_fu_72_p2;
        end if; 
    end process;


    ap_return_5_assign_proc : process(add_ln68_reg_135, ap_ce_reg, ap_return_5_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_5 <= ap_return_5_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_5 <= add_ln68_reg_135;
        end if; 
    end process;


    grp_fu_72_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            grp_fu_72_ce <= ap_const_logic_1;
        else 
            grp_fu_72_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_72_p0 <= grp_fu_72_p00(5 - 1 downto 0);
    grp_fu_72_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_V_read),32));
end behav;
