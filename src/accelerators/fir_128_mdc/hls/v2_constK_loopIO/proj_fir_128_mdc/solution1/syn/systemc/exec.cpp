// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "exec.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic exec::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic exec::ap_const_logic_0 = sc_dt::Log_0;
const bool exec::ap_const_boolean_1 = true;
const bool exec::ap_const_boolean_0 = false;

exec::exec(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fir_128_mdc_mul_5bkb_U1 = new fir_128_mdc_mul_5bkb<1,2,5,32,32>("fir_128_mdc_mul_5bkb_U1");
    fir_128_mdc_mul_5bkb_U1->clk(ap_clk);
    fir_128_mdc_mul_5bkb_U1->reset(ap_rst);
    fir_128_mdc_mul_5bkb_U1->din0(grp_fu_72_p0);
    fir_128_mdc_mul_5bkb_U1->din1(systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read);
    fir_128_mdc_mul_5bkb_U1->ce(grp_fu_72_ce);
    fir_128_mdc_mul_5bkb_U1->dout(grp_fu_72_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln68_fu_66_p2);
    sensitive << ( systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read );
    sensitive << ( y_in_V_read );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( systolic_x1_V_read_reg_119 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_0_int_reg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( systolic_y1_V_read_reg_114 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_1_int_reg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( x_in_V_read_1_reg_109 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_2_int_reg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( systolic_x_V_read_reg_125 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_3_int_reg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( grp_fu_72_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_4_int_reg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( add_ln68_reg_135 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_5_int_reg );

    SC_METHOD(thread_grp_fu_72_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_72_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( grp_fu_72_p00 );

    SC_METHOD(thread_grp_fu_72_p00);
    sensitive << ( h_V_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "exec_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read, "(port)systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read");
    sc_trace(mVcdFile, systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read, "(port)systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read");
    sc_trace(mVcdFile, systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read, "(port)systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read");
    sc_trace(mVcdFile, systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read, "(port)systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read");
    sc_trace(mVcdFile, x_in_V_read, "(port)x_in_V_read");
    sc_trace(mVcdFile, h_V_read, "(port)h_V_read");
    sc_trace(mVcdFile, y_in_V_read, "(port)y_in_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, x_in_V_read_1_reg_109, "x_in_V_read_1_reg_109");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, systolic_y1_V_read_reg_114, "systolic_y1_V_read_reg_114");
    sc_trace(mVcdFile, systolic_x1_V_read_reg_119, "systolic_x1_V_read_reg_119");
    sc_trace(mVcdFile, systolic_x_V_read_reg_125, "systolic_x_V_read_reg_125");
    sc_trace(mVcdFile, add_ln68_fu_66_p2, "add_ln68_fu_66_p2");
    sc_trace(mVcdFile, add_ln68_reg_135, "add_ln68_reg_135");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, grp_fu_72_p0, "grp_fu_72_p0");
    sc_trace(mVcdFile, grp_fu_72_p2, "grp_fu_72_p2");
    sc_trace(mVcdFile, grp_fu_72_ce, "grp_fu_72_ce");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, ap_return_0_int_reg, "ap_return_0_int_reg");
    sc_trace(mVcdFile, ap_return_1_int_reg, "ap_return_1_int_reg");
    sc_trace(mVcdFile, ap_return_2_int_reg, "ap_return_2_int_reg");
    sc_trace(mVcdFile, ap_return_3_int_reg, "ap_return_3_int_reg");
    sc_trace(mVcdFile, ap_return_4_int_reg, "ap_return_4_int_reg");
    sc_trace(mVcdFile, ap_return_5_int_reg, "ap_return_5_int_reg");
    sc_trace(mVcdFile, grp_fu_72_p00, "grp_fu_72_p00");
#endif

    }
}

exec::~exec() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fir_128_mdc_mul_5bkb_U1;
}

void exec::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        add_ln68_reg_135 = add_ln68_fu_66_p2.read();
        systolic_x1_V_read_reg_119 = systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read.read();
        systolic_x_V_read_reg_125 = systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read.read();
        systolic_y1_V_read_reg_114 = systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read.read();
        x_in_V_read_1_reg_109 = x_in_V_read.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0_int_reg = systolic_x1_V_read_reg_119.read();
        ap_return_1_int_reg = systolic_y1_V_read_reg_114.read();
        ap_return_2_int_reg = x_in_V_read_1_reg_109.read();
        ap_return_3_int_reg = systolic_x_V_read_reg_125.read();
        ap_return_4_int_reg = grp_fu_72_p2.read();
        ap_return_5_int_reg = add_ln68_reg_135.read();
    }
}

void exec::thread_add_ln68_fu_66_p2() {
    add_ln68_fu_66_p2 = (!systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read.read().is_01() || !y_in_V_read.read().is_01())? sc_lv<32>(): (sc_biguint<32>(systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read.read()) + sc_biguint<32>(y_in_V_read.read()));
}

void exec::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exec::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exec::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exec::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void exec::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_0 = ap_return_0_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0 = systolic_x1_V_read_reg_119.read();
    }
}

void exec::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_1 = ap_return_1_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_1 = systolic_y1_V_read_reg_114.read();
    }
}

void exec::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_2 = ap_return_2_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_2 = x_in_V_read_1_reg_109.read();
    }
}

void exec::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_3 = ap_return_3_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_3 = systolic_x_V_read_reg_125.read();
    }
}

void exec::thread_ap_return_4() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_4 = ap_return_4_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_4 = grp_fu_72_p2.read();
    }
}

void exec::thread_ap_return_5() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_5 = ap_return_5_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_5 = add_ln68_reg_135.read();
    }
}

void exec::thread_grp_fu_72_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        grp_fu_72_ce = ap_const_logic_1;
    } else {
        grp_fu_72_ce = ap_const_logic_0;
    }
}

void exec::thread_grp_fu_72_p0() {
    grp_fu_72_p0 =  (sc_lv<5>) (grp_fu_72_p00.read());
}

void exec::thread_grp_fu_72_p00() {
    grp_fu_72_p00 = esl_zext<32,5>(h_V_read.read());
}

}

