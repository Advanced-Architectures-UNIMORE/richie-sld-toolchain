// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _exec_HH_
#define _exec_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_128_mdc_mul_5bkb.h"

namespace ap_rtl {

struct exec : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read;
    sc_in< sc_lv<32> > systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read;
    sc_in< sc_lv<32> > systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read;
    sc_in< sc_lv<32> > systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read;
    sc_in< sc_lv<32> > x_in_V_read;
    sc_in< sc_lv<5> > h_V_read;
    sc_in< sc_lv<32> > y_in_V_read;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;
    sc_out< sc_lv<32> > ap_return_3;
    sc_out< sc_lv<32> > ap_return_4;
    sc_out< sc_lv<32> > ap_return_5;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    exec(sc_module_name name);
    SC_HAS_PROCESS(exec);

    ~exec();

    sc_trace_file* mVcdFile;

    fir_128_mdc_mul_5bkb<1,2,5,32,32>* fir_128_mdc_mul_5bkb_U1;
    sc_signal< sc_lv<32> > x_in_V_read_1_reg_109;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > systolic_y1_V_read_reg_114;
    sc_signal< sc_lv<32> > systolic_x1_V_read_reg_119;
    sc_signal< sc_lv<32> > systolic_x_V_read_reg_125;
    sc_signal< sc_lv<32> > add_ln68_fu_66_p2;
    sc_signal< sc_lv<32> > add_ln68_reg_135;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<5> > grp_fu_72_p0;
    sc_signal< sc_lv<32> > grp_fu_72_p2;
    sc_signal< sc_logic > grp_fu_72_ce;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<32> > ap_return_0_int_reg;
    sc_signal< sc_lv<32> > ap_return_1_int_reg;
    sc_signal< sc_lv<32> > ap_return_2_int_reg;
    sc_signal< sc_lv<32> > ap_return_3_int_reg;
    sc_signal< sc_lv<32> > ap_return_4_int_reg;
    sc_signal< sc_lv<32> > ap_return_5_int_reg;
    sc_signal< sc_lv<32> > grp_fu_72_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln68_fu_66_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_grp_fu_72_ce();
    void thread_grp_fu_72_p0();
    void thread_grp_fu_72_p00();
};

}

using namespace ap_rtl;

#endif
