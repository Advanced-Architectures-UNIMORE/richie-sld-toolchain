// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_corner_detect_hlsStrm2Array_8_128_128_1_1_8_16384_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_img_out4_dout,
        stream_img_out4_num_data_valid,
        stream_img_out4_fifo_cap,
        stream_img_out4_empty_n,
        stream_img_out4_read,
        img_out_TDATA,
        img_out_TVALID,
        img_out_TREADY,
        rows_dout,
        rows_num_data_valid,
        rows_fifo_cap,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_num_data_valid,
        cols_fifo_cap,
        cols_empty_n,
        cols_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_img_out4_dout;
input  [1:0] stream_img_out4_num_data_valid;
input  [1:0] stream_img_out4_fifo_cap;
input   stream_img_out4_empty_n;
output   stream_img_out4_read;
output  [7:0] img_out_TDATA;
output   img_out_TVALID;
input   img_out_TREADY;
input  [31:0] rows_dout;
input  [3:0] rows_num_data_valid;
input  [3:0] rows_fifo_cap;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input  [1:0] cols_num_data_valid;
input  [1:0] cols_fifo_cap;
input   cols_empty_n;
output   cols_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_img_out4_read;
reg rows_read;
reg cols_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rows_blk_n;
reg    cols_blk_n;
wire   [7:0] empty_fu_57_p1;
reg   [7:0] empty_reg_77;
wire   [7:0] empty_51_fu_61_p1;
reg   [7:0] empty_51_reg_82;
wire   [15:0] mul_ln436_fu_71_p2;
reg   [15:0] mul_ln436_reg_87;
wire    ap_CS_fsm_state2;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_idle;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_ready;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_stream_img_out4_read;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TREADY;
wire   [7:0] grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TDATA;
wire    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TVALID;
reg    grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
wire   [7:0] mul_ln436_fu_71_p0;
wire   [7:0] mul_ln436_fu_71_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [15:0] mul_ln436_fu_71_p00;
wire   [15:0] mul_ln436_fu_71_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg = 1'b0;
end

fast_corner_detect_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1 grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start),
    .ap_done(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done),
    .ap_idle(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_idle),
    .ap_ready(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_ready),
    .stream_img_out4_dout(stream_img_out4_dout),
    .stream_img_out4_num_data_valid(2'd0),
    .stream_img_out4_fifo_cap(2'd0),
    .stream_img_out4_empty_n(stream_img_out4_empty_n),
    .stream_img_out4_read(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_stream_img_out4_read),
    .img_out_TREADY(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TREADY),
    .mul_ln436(mul_ln436_reg_87),
    .img_out_TDATA(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TDATA),
    .img_out_TVALID(grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TVALID)
);

fast_corner_detect_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U192(
    .din0(mul_ln436_fu_71_p0),
    .din1(mul_ln436_fu_71_p1),
    .dout(mul_ln436_fu_71_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_ready == 1'b1)) begin
            grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_51_reg_82 <= empty_51_fu_61_p1;
        empty_reg_77 <= empty_fu_57_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln436_reg_87 <= mul_ln436_fu_71_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_img_out4_read = grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_stream_img_out4_read;
    end else begin
        stream_img_out4_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign empty_51_fu_61_p1 = cols_dout[7:0];

assign empty_fu_57_p1 = rows_dout[7:0];

assign grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start = grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_ap_start_reg;

assign grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TREADY = (img_out_TREADY & ap_CS_fsm_state4);

assign img_out_TDATA = grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TDATA;

assign img_out_TVALID = grp_hlsStrm2Array_8_128_128_1_1_8_16384_Pipeline_VITIS_LOOP_436_1_fu_48_img_out_TVALID;

assign mul_ln436_fu_71_p0 = mul_ln436_fu_71_p00;

assign mul_ln436_fu_71_p00 = empty_reg_77;

assign mul_ln436_fu_71_p1 = mul_ln436_fu_71_p10;

assign mul_ln436_fu_71_p10 = empty_51_reg_82;

endmodule //fast_corner_detect_hlsStrm2Array_8_128_128_1_1_8_16384_s
