// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_corner_detect_xfMat2hlsStrm_8_0_128_128_1_16384_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        imgOutput_data2_dout,
        imgOutput_data2_num_data_valid,
        imgOutput_data2_fifo_cap,
        imgOutput_data2_empty_n,
        imgOutput_data2_read,
        stream_img_out4_din,
        stream_img_out4_num_data_valid,
        stream_img_out4_fifo_cap,
        stream_img_out4_full_n,
        stream_img_out4_write,
        srcMat_cols_align_npc_dout,
        srcMat_cols_align_npc_num_data_valid,
        srcMat_cols_align_npc_fifo_cap,
        srcMat_cols_align_npc_empty_n,
        srcMat_cols_align_npc_read,
        cols_c_din,
        cols_c_num_data_valid,
        cols_c_fifo_cap,
        cols_c_full_n,
        cols_c_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] imgOutput_data2_dout;
input  [1:0] imgOutput_data2_num_data_valid;
input  [1:0] imgOutput_data2_fifo_cap;
input   imgOutput_data2_empty_n;
output   imgOutput_data2_read;
output  [7:0] stream_img_out4_din;
input  [1:0] stream_img_out4_num_data_valid;
input  [1:0] stream_img_out4_fifo_cap;
input   stream_img_out4_full_n;
output   stream_img_out4_write;
input  [31:0] srcMat_cols_align_npc_dout;
input  [2:0] srcMat_cols_align_npc_num_data_valid;
input  [2:0] srcMat_cols_align_npc_fifo_cap;
input   srcMat_cols_align_npc_empty_n;
output   srcMat_cols_align_npc_read;
output  [31:0] cols_c_din;
input  [1:0] cols_c_num_data_valid;
input  [1:0] cols_c_fifo_cap;
input   cols_c_full_n;
output   cols_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutput_data2_read;
reg[7:0] stream_img_out4_din;
reg stream_img_out4_write;
reg srcMat_cols_align_npc_read;
reg cols_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_img_out4_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln426_fu_177_p2;
reg    srcMat_cols_align_npc_blk_n;
reg    cols_c_blk_n;
reg  signed [31:0] srcMat_cols_align_npc_read_reg_200;
wire   [7:0] empty_fu_110_p1;
reg   [7:0] empty_reg_205;
wire   [28:0] trunc_ln369_fu_114_p1;
reg   [28:0] trunc_ln369_reg_211;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_118_p2;
reg   [31:0] loop_count_reg_216;
wire    ap_CS_fsm_state3;
wire   [31:0] last_N_size_fu_142_p2;
reg   [31:0] last_N_size_reg_221;
wire   [31:0] PTR_WIDTH_min_last_N_fu_149_p2;
reg   [31:0] PTR_WIDTH_min_last_N_reg_226;
wire   [31:0] PTR_WIDTH_plus_last_N_fu_156_p2;
reg   [31:0] PTR_WIDTH_plus_last_N_reg_231;
wire   [8:0] sub13_fu_163_p2;
reg   [8:0] sub13_reg_236;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_done;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_idle;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_ready;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_imgOutput_data2_read;
wire   [7:0] grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_din;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_write;
wire   [31:0] grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_bits_to_add_out;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_bits_to_add_out_ap_vld;
wire   [7:0] grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_r_V_5_out;
wire    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_r_V_5_out_ap_vld;
reg    grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
reg    ap_block_state5;
wire  signed [31:0] empty_fu_110_p0;
wire   [28:0] srcMat_cols_align_npc_cast_cast_fu_126_p1;
wire   [28:0] sub_ln378_fu_129_p2;
wire   [31:0] shl_ln_fu_134_p3;
wire   [8:0] srcMat_cols_align_npc_cast3_cast2_fu_123_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg = 1'b0;
end

fast_corner_detect_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1 grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start),
    .ap_done(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_done),
    .ap_idle(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_idle),
    .ap_ready(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_ready),
    .imgOutput_data2_dout(imgOutput_data2_dout),
    .imgOutput_data2_num_data_valid(2'd0),
    .imgOutput_data2_fifo_cap(2'd0),
    .imgOutput_data2_empty_n(imgOutput_data2_empty_n),
    .imgOutput_data2_read(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_imgOutput_data2_read),
    .stream_img_out4_din(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_din),
    .stream_img_out4_num_data_valid(2'd0),
    .stream_img_out4_fifo_cap(2'd0),
    .stream_img_out4_full_n(stream_img_out4_full_n),
    .stream_img_out4_write(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_write),
    .loop_count(loop_count_reg_216),
    .sext_ln390(sub13_reg_236),
    .last_N_size(last_N_size_reg_221),
    .PTR_WIDTH_min_last_N(PTR_WIDTH_min_last_N_reg_226),
    .PTR_WIDTH_plus_last_N(PTR_WIDTH_plus_last_N_reg_231),
    .bits_to_add_out(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_bits_to_add_out),
    .bits_to_add_out_ap_vld(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_bits_to_add_out_ap_vld),
    .r_V_5_out(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_r_V_5_out),
    .r_V_5_out_ap_vld(grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_r_V_5_out_ap_vld)
);

fast_corner_detect_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(srcMat_cols_align_npc_read_reg_200),
    .din1(p_read),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_ready == 1'b1)) begin
            grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        PTR_WIDTH_min_last_N_reg_226[31 : 3] <= PTR_WIDTH_min_last_N_fu_149_p2[31 : 3];
        PTR_WIDTH_plus_last_N_reg_231[31 : 3] <= PTR_WIDTH_plus_last_N_fu_156_p2[31 : 3];
        last_N_size_reg_221[31 : 3] <= last_N_size_fu_142_p2[31 : 3];
        loop_count_reg_216 <= grp_fu_118_p2;
        sub13_reg_236 <= sub13_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_205 <= empty_fu_110_p1;
        srcMat_cols_align_npc_read_reg_200 <= srcMat_cols_align_npc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln369_reg_211 <= trunc_ln369_fu_114_p1;
    end
end

always @ (*) begin
    if (((cols_c_full_n == 1'b0) | (srcMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_c_blk_n = cols_c_full_n;
    end else begin
        cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_c_full_n == 1'b0) | (srcMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_c_write = 1'b1;
    end else begin
        cols_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        imgOutput_data2_read = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_imgOutput_data2_read;
    end else begin
        imgOutput_data2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_cols_align_npc_blk_n = srcMat_cols_align_npc_empty_n;
    end else begin
        srcMat_cols_align_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_c_full_n == 1'b0) | (srcMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcMat_cols_align_npc_read = 1'b1;
    end else begin
        srcMat_cols_align_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln426_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        stream_img_out4_blk_n = stream_img_out4_full_n;
    end else begin
        stream_img_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (icmp_ln426_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        stream_img_out4_din = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_r_V_5_out;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_img_out4_din = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_din;
    end else begin
        stream_img_out4_din = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_din;
    end
end

always @ (*) begin
    if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (icmp_ln426_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        stream_img_out4_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_img_out4_write = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_stream_img_out4_write;
    end else begin
        stream_img_out4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((cols_c_full_n == 1'b0) | (srcMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PTR_WIDTH_min_last_N_fu_149_p2 = (32'd0 - shl_ln_fu_134_p3);

assign PTR_WIDTH_plus_last_N_fu_156_p2 = (shl_ln_fu_134_p3 + 32'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((cols_c_full_n == 1'b0) | (srcMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln426_fu_177_p2 == 1'd0) & (stream_img_out4_full_n == 1'b0));
end

assign cols_c_din = srcMat_cols_align_npc_dout;

assign empty_fu_110_p0 = srcMat_cols_align_npc_dout;

assign empty_fu_110_p1 = empty_fu_110_p0[7:0];

assign grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start = grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_ap_start_reg;

assign icmp_ln426_fu_177_p2 = ((grp_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1_fu_95_bits_to_add_out == 32'd8) ? 1'b1 : 1'b0);

assign last_N_size_fu_142_p2 = (shl_ln_fu_134_p3 + 32'd8);

assign shl_ln_fu_134_p3 = {{sub_ln378_fu_129_p2}, {3'd0}};

assign srcMat_cols_align_npc_cast3_cast2_fu_123_p1 = empty_reg_205;

assign srcMat_cols_align_npc_cast_cast_fu_126_p1 = empty_reg_205;

assign sub13_fu_163_p2 = ($signed(srcMat_cols_align_npc_cast3_cast2_fu_123_p1) + $signed(9'd511));

assign sub_ln378_fu_129_p2 = (trunc_ln369_reg_211 - srcMat_cols_align_npc_cast_cast_fu_126_p1);

assign trunc_ln369_fu_114_p1 = p_read1[28:0];

always @ (posedge ap_clk) begin
    last_N_size_reg_221[2:0] <= 3'b000;
    PTR_WIDTH_min_last_N_reg_226[2:0] <= 3'b000;
    PTR_WIDTH_plus_last_N_reg_231[2:0] <= 3'b000;
end

endmodule //fast_corner_detect_xfMat2hlsStrm_8_0_128_128_1_16384_s
