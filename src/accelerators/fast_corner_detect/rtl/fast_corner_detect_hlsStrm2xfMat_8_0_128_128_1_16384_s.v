// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_corner_detect_hlsStrm2xfMat_8_0_128_128_1_16384_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_img_in3_dout,
        stream_img_in3_num_data_valid,
        stream_img_in3_fifo_cap,
        stream_img_in3_empty_n,
        stream_img_in3_read,
        p_read,
        p_read1,
        imgInput_data1_din,
        imgInput_data1_num_data_valid,
        imgInput_data1_fifo_cap,
        imgInput_data1_full_n,
        imgInput_data1_write,
        dstMat_cols_align_npc_dout,
        dstMat_cols_align_npc_num_data_valid,
        dstMat_cols_align_npc_fifo_cap,
        dstMat_cols_align_npc_empty_n,
        dstMat_cols_align_npc_read,
        cols_c13_din,
        cols_c13_num_data_valid,
        cols_c13_fifo_cap,
        cols_c13_full_n,
        cols_c13_write,
        imgInput_rows_c_din,
        imgInput_rows_c_num_data_valid,
        imgInput_rows_c_fifo_cap,
        imgInput_rows_c_full_n,
        imgInput_rows_c_write,
        imgInput_cols_c_din,
        imgInput_cols_c_num_data_valid,
        imgInput_cols_c_fifo_cap,
        imgInput_cols_c_full_n,
        imgInput_cols_c_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_img_in3_dout;
input  [1:0] stream_img_in3_num_data_valid;
input  [1:0] stream_img_in3_fifo_cap;
input   stream_img_in3_empty_n;
output   stream_img_in3_read;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [7:0] imgInput_data1_din;
input  [1:0] imgInput_data1_num_data_valid;
input  [1:0] imgInput_data1_fifo_cap;
input   imgInput_data1_full_n;
output   imgInput_data1_write;
input  [31:0] dstMat_cols_align_npc_dout;
input  [1:0] dstMat_cols_align_npc_num_data_valid;
input  [1:0] dstMat_cols_align_npc_fifo_cap;
input   dstMat_cols_align_npc_empty_n;
output   dstMat_cols_align_npc_read;
output  [31:0] cols_c13_din;
input  [2:0] cols_c13_num_data_valid;
input  [2:0] cols_c13_fifo_cap;
input   cols_c13_full_n;
output   cols_c13_write;
output  [31:0] imgInput_rows_c_din;
input  [1:0] imgInput_rows_c_num_data_valid;
input  [1:0] imgInput_rows_c_fifo_cap;
input   imgInput_rows_c_full_n;
output   imgInput_rows_c_write;
output  [31:0] imgInput_cols_c_din;
input  [1:0] imgInput_cols_c_num_data_valid;
input  [1:0] imgInput_cols_c_fifo_cap;
input   imgInput_cols_c_full_n;
output   imgInput_cols_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_img_in3_read;
reg imgInput_data1_write;
reg dstMat_cols_align_npc_read;
reg cols_c13_write;
reg imgInput_rows_c_write;
reg imgInput_cols_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dstMat_cols_align_npc_blk_n;
reg    cols_c13_blk_n;
reg    imgInput_rows_c_blk_n;
reg    imgInput_cols_c_blk_n;
reg  signed [31:0] dstMat_cols_align_npc_read_reg_248;
wire   [7:0] empty_fu_124_p1;
reg   [7:0] empty_reg_253;
wire   [28:0] trunc_ln229_fu_128_p1;
reg   [28:0] trunc_ln229_reg_259;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] loop_count_reg_264;
wire    ap_CS_fsm_state3;
wire   [28:0] trunc_ln232_fu_136_p1;
reg   [28:0] trunc_ln232_reg_270;
reg   [0:0] tmp_reg_275;
wire   [29:0] ddr_read_cycles_fu_194_p3;
reg   [29:0] ddr_read_cycles_reg_280;
wire    ap_CS_fsm_state4;
wire   [31:0] last_N_size_fu_215_p2;
reg   [31:0] last_N_size_reg_285;
wire   [31:0] PTR_WIDTH_min_last_N_fu_222_p2;
reg   [31:0] PTR_WIDTH_min_last_N_reg_290;
wire   [31:0] PTR_WIDTH_plus_last_N_fu_229_p2;
reg   [31:0] PTR_WIDTH_plus_last_N_reg_295;
wire   [8:0] sub13_fu_236_p2;
reg   [8:0] sub13_reg_300;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_idle;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_ready;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_stream_img_in3_read;
wire   [7:0] grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_din;
wire    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_write;
reg    grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire  signed [31:0] empty_fu_124_p0;
wire    ap_CS_fsm_state2;
wire   [31:0] in_size_bits_fu_157_p2;
wire   [31:0] or_ln233_fu_162_p2;
wire   [31:0] sub_ln233_fu_168_p2;
wire   [28:0] trunc_ln233_1_fu_174_p4;
wire   [29:0] zext_ln233_fu_184_p1;
wire   [29:0] sub_ln233_1_fu_188_p2;
wire   [29:0] zext_ln232_fu_154_p1;
wire   [28:0] dstMat_cols_align_npc_cast_cast_fu_151_p1;
wire   [28:0] sub_ln238_fu_202_p2;
wire   [31:0] shl_ln_fu_207_p3;
wire   [8:0] dstMat_cols_align_npc_cast6_cast2_fu_148_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg = 1'b0;
end

fast_corner_detect_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1 grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start),
    .ap_done(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done),
    .ap_idle(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_idle),
    .ap_ready(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_ready),
    .stream_img_in3_dout(stream_img_in3_dout),
    .stream_img_in3_num_data_valid(2'd0),
    .stream_img_in3_fifo_cap(2'd0),
    .stream_img_in3_empty_n(stream_img_in3_empty_n),
    .stream_img_in3_read(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_stream_img_in3_read),
    .imgInput_data1_din(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_din),
    .imgInput_data1_num_data_valid(2'd0),
    .imgInput_data1_fifo_cap(2'd0),
    .imgInput_data1_full_n(imgInput_data1_full_n),
    .imgInput_data1_write(grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_write),
    .loop_count(loop_count_reg_264),
    .sext_ln233(ddr_read_cycles_reg_280),
    .sext_ln251(sub13_reg_300),
    .last_N_size(last_N_size_reg_285),
    .PTR_WIDTH_min_last_N(PTR_WIDTH_min_last_N_reg_290),
    .PTR_WIDTH_plus_last_N(PTR_WIDTH_plus_last_N_reg_295)
);

fast_corner_detect_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dstMat_cols_align_npc_read_reg_248),
    .din1(p_read),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_ready == 1'b1)) begin
            grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PTR_WIDTH_min_last_N_reg_290[31 : 3] <= PTR_WIDTH_min_last_N_fu_222_p2[31 : 3];
        PTR_WIDTH_plus_last_N_reg_295[31 : 3] <= PTR_WIDTH_plus_last_N_fu_229_p2[31 : 3];
        ddr_read_cycles_reg_280 <= ddr_read_cycles_fu_194_p3;
        last_N_size_reg_285[31 : 3] <= last_N_size_fu_215_p2[31 : 3];
        sub13_reg_300 <= sub13_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dstMat_cols_align_npc_read_reg_248 <= dstMat_cols_align_npc_dout;
        empty_reg_253 <= empty_fu_124_p1;
        trunc_ln229_reg_259 <= trunc_ln229_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_count_reg_264 <= grp_fu_132_p2;
        tmp_reg_275 <= grp_fu_132_p2[32'd28];
        trunc_ln232_reg_270 <= trunc_ln232_fu_136_p1;
    end
end

always @ (*) begin
    if (((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_c13_blk_n = cols_c13_full_n;
    end else begin
        cols_c13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_c13_write = 1'b1;
    end else begin
        cols_c13_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstMat_cols_align_npc_blk_n = dstMat_cols_align_npc_empty_n;
    end else begin
        dstMat_cols_align_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dstMat_cols_align_npc_read = 1'b1;
    end else begin
        dstMat_cols_align_npc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_cols_c_blk_n = imgInput_cols_c_full_n;
    end else begin
        imgInput_cols_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_cols_c_write = 1'b1;
    end else begin
        imgInput_cols_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgInput_data1_write = grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_write;
    end else begin
        imgInput_data1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_rows_c_blk_n = imgInput_rows_c_full_n;
    end else begin
        imgInput_rows_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_rows_c_write = 1'b1;
    end else begin
        imgInput_rows_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stream_img_in3_read = grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_stream_img_in3_read;
    end else begin
        stream_img_in3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PTR_WIDTH_min_last_N_fu_222_p2 = (32'd0 - shl_ln_fu_207_p3);

assign PTR_WIDTH_plus_last_N_fu_229_p2 = (shl_ln_fu_207_p3 + 32'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((imgInput_cols_c_full_n == 1'b0) | (imgInput_rows_c_full_n == 1'b0) | (cols_c13_full_n == 1'b0) | (dstMat_cols_align_npc_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign cols_c13_din = dstMat_cols_align_npc_dout;

assign ddr_read_cycles_fu_194_p3 = ((tmp_reg_275[0:0] == 1'b1) ? sub_ln233_1_fu_188_p2 : zext_ln232_fu_154_p1);

assign dstMat_cols_align_npc_cast6_cast2_fu_148_p1 = empty_reg_253;

assign dstMat_cols_align_npc_cast_cast_fu_151_p1 = empty_reg_253;

assign empty_fu_124_p0 = dstMat_cols_align_npc_dout;

assign empty_fu_124_p1 = empty_fu_124_p0[7:0];

assign grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start = grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_ap_start_reg;

assign imgInput_cols_c_din = p_read1;

assign imgInput_data1_din = grp_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1_fu_110_imgInput_data1_din;

assign imgInput_rows_c_din = p_read;

assign in_size_bits_fu_157_p2 = loop_count_reg_264 << 32'd3;

assign last_N_size_fu_215_p2 = (shl_ln_fu_207_p3 + 32'd8);

assign or_ln233_fu_162_p2 = (in_size_bits_fu_157_p2 | 32'd7);

assign shl_ln_fu_207_p3 = {{sub_ln238_fu_202_p2}, {3'd0}};

assign sub13_fu_236_p2 = ($signed(dstMat_cols_align_npc_cast6_cast2_fu_148_p1) + $signed(9'd511));

assign sub_ln233_1_fu_188_p2 = (30'd0 - zext_ln233_fu_184_p1);

assign sub_ln233_fu_168_p2 = (32'd0 - or_ln233_fu_162_p2);

assign sub_ln238_fu_202_p2 = (trunc_ln229_reg_259 - dstMat_cols_align_npc_cast_cast_fu_151_p1);

assign trunc_ln229_fu_128_p1 = p_read1[28:0];

assign trunc_ln232_fu_136_p1 = grp_fu_132_p2[28:0];

assign trunc_ln233_1_fu_174_p4 = {{sub_ln233_fu_168_p2[31:3]}};

assign zext_ln232_fu_154_p1 = trunc_ln232_reg_270;

assign zext_ln233_fu_184_p1 = trunc_ln233_1_fu_174_p4;

always @ (posedge ap_clk) begin
    last_N_size_reg_285[2:0] <= 3'b000;
    PTR_WIDTH_min_last_N_reg_290[2:0] <= 3'b000;
    PTR_WIDTH_plus_last_N_reg_295[2:0] <= 3'b000;
end

endmodule //fast_corner_detect_hlsStrm2xfMat_8_0_128_128_1_16384_s
