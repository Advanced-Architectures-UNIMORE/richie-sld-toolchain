// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_corner_detect_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgOutput_data2_dout,
        imgOutput_data2_num_data_valid,
        imgOutput_data2_fifo_cap,
        imgOutput_data2_empty_n,
        imgOutput_data2_read,
        stream_img_out4_din,
        stream_img_out4_num_data_valid,
        stream_img_out4_fifo_cap,
        stream_img_out4_full_n,
        stream_img_out4_write,
        loop_count,
        sext_ln390,
        last_N_size,
        PTR_WIDTH_min_last_N,
        PTR_WIDTH_plus_last_N,
        bits_to_add_out,
        bits_to_add_out_ap_vld,
        r_V_5_out,
        r_V_5_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] imgOutput_data2_dout;
input  [1:0] imgOutput_data2_num_data_valid;
input  [1:0] imgOutput_data2_fifo_cap;
input   imgOutput_data2_empty_n;
output   imgOutput_data2_read;
output  [7:0] stream_img_out4_din;
input  [1:0] stream_img_out4_num_data_valid;
input  [1:0] stream_img_out4_fifo_cap;
input   stream_img_out4_full_n;
output   stream_img_out4_write;
input  [31:0] loop_count;
input  [8:0] sext_ln390;
input  [31:0] last_N_size;
input  [31:0] PTR_WIDTH_min_last_N;
input  [31:0] PTR_WIDTH_plus_last_N;
output  [31:0] bits_to_add_out;
output   bits_to_add_out_ap_vld;
output  [7:0] r_V_5_out;
output   r_V_5_out_ap_vld;

reg ap_idle;
reg imgOutput_data2_read;
reg stream_img_out4_write;
reg bits_to_add_out_ap_vld;
reg r_V_5_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln390_reg_703;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln412_reg_740;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln390_fu_173_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_img_out4_blk_n;
wire    ap_block_pp0_stage0;
reg    imgOutput_data2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln390_cast_fu_147_p1;
reg  signed [31:0] sext_ln390_cast_reg_698;
wire   [0:0] icmp_ln398_fu_187_p2;
reg   [0:0] icmp_ln398_reg_707;
wire   [31:0] K_size_fu_206_p3;
reg   [31:0] K_size_reg_712;
reg   [31:0] K_size_reg_712_pp0_iter2_reg;
wire   [31:0] PTR_WIDTH_plus_Ksize_fu_213_p3;
reg   [31:0] PTR_WIDTH_plus_Ksize_reg_721;
reg   [31:0] bits_to_add_1_reg_726;
reg   [7:0] p_Val2_1_reg_732;
wire   [0:0] icmp_ln412_fu_240_p2;
wire   [2:0] sub_ln628_fu_255_p2;
reg   [2:0] sub_ln628_reg_744;
wire   [2:0] trunc_ln368_2_fu_261_p1;
reg   [2:0] trunc_ln368_2_reg_749;
wire   [7:0] shl_ln368_3_fu_269_p2;
reg   [7:0] shl_ln368_3_reg_754;
wire   [31:0] add_ln417_1_fu_286_p2;
reg   [31:0] add_ln417_1_reg_760;
wire   [0:0] icmp_ln628_fu_291_p2;
reg   [0:0] icmp_ln628_reg_765;
wire   [2:0] trunc_ln628_1_fu_297_p1;
reg   [2:0] trunc_ln628_1_reg_772;
wire   [0:0] icmp_ln368_fu_323_p2;
reg   [0:0] icmp_ln368_reg_778;
wire   [2:0] trunc_ln368_fu_329_p1;
reg   [2:0] trunc_ln368_reg_786;
wire   [2:0] trunc_ln368_1_fu_333_p1;
reg   [2:0] trunc_ln368_1_reg_794;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [7:0] p_Val2_s_fu_74;
wire   [7:0] r_V_3_fu_523_p3;
wire   [7:0] p_Result_4_fu_633_p2;
reg   [31:0] bits_to_add_fu_78;
wire   [31:0] bits_to_add_3_fu_301_p2;
wire   [31:0] bits_to_add_2_fu_337_p2;
wire    ap_loop_init;
reg   [31:0] clk_cnt_fu_82;
wire   [31:0] clk_cnt_1_fu_198_p3;
reg   [30:0] i_fu_86;
wire   [30:0] add_ln390_fu_178_p2;
wire   [7:0] p_Result_1_fu_389_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln390_fu_169_p1;
wire   [31:0] add_ln404_fu_192_p2;
wire   [2:0] trunc_ln413_fu_251_p1;
wire   [31:0] sub_ln421_fu_245_p2;
wire   [7:0] zext_ln368_4_fu_265_p1;
wire   [31:0] xor_ln417_fu_280_p2;
wire   [31:0] add_ln417_fu_275_p2;
wire   [31:0] PTR_WIDTH_min_Ksize_fu_234_p3;
wire   [31:0] xor_ln421_fu_312_p2;
wire   [31:0] add_ln421_fu_318_p2;
wire   [7:0] zext_ln628_fu_350_p1;
wire   [7:0] lshr_ln628_fu_353_p2;
wire   [7:0] p_Result_s_fu_359_p2;
wire   [7:0] zext_ln368_3_fu_364_p1;
wire   [7:0] xor_ln368_3_fu_373_p2;
wire   [7:0] shl_ln368_2_fu_367_p2;
wire   [7:0] and_ln368_3_fu_378_p2;
wire   [7:0] and_ln368_4_fu_384_p2;
wire   [2:0] trunc_ln628_fu_400_p1;
wire   [2:0] sub_ln628_1_fu_412_p2;
wire   [2:0] sub_ln628_2_fu_423_p2;
reg   [7:0] tmp_1_fu_403_p4;
wire   [2:0] xor_ln628_fu_417_p2;
wire   [2:0] select_ln628_fu_428_p3;
wire   [2:0] select_ln628_2_fu_441_p3;
wire   [2:0] xor_ln628_1_fu_448_p2;
wire   [7:0] select_ln628_1_fu_435_p3;
wire   [7:0] zext_ln628_1_fu_454_p1;
wire   [7:0] zext_ln628_2_fu_458_p1;
wire   [2:0] trunc_ln368_3_fu_474_p1;
wire   [2:0] xor_ln368_4_fu_477_p2;
wire   [7:0] zext_ln368_5_fu_483_p1;
wire   [7:0] lshr_ln368_1_fu_487_p2;
wire   [7:0] xor_ln368_5_fu_493_p2;
wire   [7:0] lshr_ln628_1_fu_462_p2;
wire   [7:0] p_Result_2_fu_505_p2;
wire   [7:0] lshr_ln628_2_fu_468_p2;
wire   [7:0] and_ln368_5_fu_499_p2;
wire   [7:0] and_ln368_6_fu_511_p2;
wire   [0:0] icmp_ln416_fu_396_p2;
wire   [7:0] p_Result_3_fu_517_p2;
wire   [2:0] xor_ln368_fu_536_p2;
wire   [2:0] select_ln368_fu_541_p3;
wire   [2:0] select_ln368_2_fu_551_p3;
wire   [2:0] select_ln368_1_fu_546_p3;
wire   [2:0] xor_ln368_1_fu_557_p2;
wire   [7:0] zext_ln368_fu_563_p1;
wire   [7:0] shl_ln368_fu_575_p2;
reg   [7:0] tmp_fu_580_p4;
wire   [7:0] zext_ln368_1_fu_567_p1;
wire   [7:0] zext_ln368_2_fu_571_p1;
wire   [7:0] shl_ln368_1_fu_597_p2;
wire   [7:0] lshr_ln368_fu_603_p2;
wire   [7:0] and_ln368_fu_609_p2;
wire   [7:0] xor_ln368_2_fu_615_p2;
wire   [7:0] select_ln368_3_fu_590_p3;
wire   [7:0] and_ln368_1_fu_621_p2;
wire   [7:0] and_ln368_2_fu_627_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_560;
reg    ap_condition_563;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fast_corner_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            bits_to_add_fu_78 <= 32'd8;
        end else if ((1'b1 == ap_condition_563)) begin
            bits_to_add_fu_78 <= bits_to_add_2_fu_337_p2;
        end else if ((1'b1 == ap_condition_560)) begin
            bits_to_add_fu_78 <= bits_to_add_3_fu_301_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            clk_cnt_fu_82 <= 32'd0;
        end else if (((icmp_ln390_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            clk_cnt_fu_82 <= clk_cnt_1_fu_198_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 31'd0;
        end else if (((icmp_ln390_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_86 <= add_ln390_fu_178_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln412_reg_740 == 1'd1)) begin
            p_Val2_s_fu_74 <= p_Result_4_fu_633_p2;
        end else if ((icmp_ln412_reg_740 == 1'd0)) begin
            p_Val2_s_fu_74 <= r_V_3_fu_523_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln390_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_size_reg_712 <= K_size_fu_206_p3;
        PTR_WIDTH_plus_Ksize_reg_721 <= PTR_WIDTH_plus_Ksize_fu_213_p3;
        icmp_ln398_reg_707 <= icmp_ln398_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        K_size_reg_712_pp0_iter2_reg <= K_size_reg_712;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd1) & (icmp_ln412_fu_240_p2 == 1'd0))) begin
        add_ln417_1_reg_760 <= add_ln417_1_fu_286_p2;
        icmp_ln628_reg_765 <= icmp_ln628_fu_291_p2;
        shl_ln368_3_reg_754 <= shl_ln368_3_fu_269_p2;
        sub_ln628_reg_744 <= sub_ln628_fu_255_p2;
        trunc_ln368_2_reg_749 <= trunc_ln368_2_fu_261_p1;
        trunc_ln628_1_reg_772 <= trunc_ln628_1_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln390_reg_703 <= icmp_ln390_fu_173_p2;
        sext_ln390_cast_reg_698 <= sext_ln390_cast_fu_147_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bits_to_add_1_reg_726 <= bits_to_add_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd1) & (icmp_ln412_fu_240_p2 == 1'd1))) begin
        icmp_ln368_reg_778 <= icmp_ln368_fu_323_p2;
        trunc_ln368_1_reg_794 <= trunc_ln368_1_fu_333_p1;
        trunc_ln368_reg_786 <= trunc_ln368_fu_329_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd1))) begin
        icmp_ln412_reg_740 <= icmp_ln412_fu_240_p2;
        p_Val2_1_reg_732 <= imgOutput_data2_dout;
    end
end

always @ (*) begin
    if (((icmp_ln390_fu_173_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln390_reg_703 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd0))) begin
        bits_to_add_out_ap_vld = 1'b1;
    end else begin
        bits_to_add_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln390_reg_703 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput_data2_blk_n = imgOutput_data2_empty_n;
    end else begin
        imgOutput_data2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imgOutput_data2_read = 1'b1;
    end else begin
        imgOutput_data2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln390_reg_703 == 1'd0))) begin
        r_V_5_out_ap_vld = 1'b1;
    end else begin
        r_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln412_reg_740 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_img_out4_blk_n = stream_img_out4_full_n;
    end else begin
        stream_img_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln412_reg_740 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_img_out4_write = 1'b1;
    end else begin
        stream_img_out4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_size_fu_206_p3 = ((icmp_ln398_fu_187_p2[0:0] == 1'b1) ? last_N_size : 32'd8);

assign PTR_WIDTH_min_Ksize_fu_234_p3 = ((icmp_ln398_reg_707[0:0] == 1'b1) ? PTR_WIDTH_min_last_N : 32'd0);

assign PTR_WIDTH_plus_Ksize_fu_213_p3 = ((icmp_ln398_fu_187_p2[0:0] == 1'b1) ? PTR_WIDTH_plus_last_N : 32'd16);

assign add_ln390_fu_178_p2 = (i_fu_86 + 31'd1);

assign add_ln404_fu_192_p2 = (clk_cnt_fu_82 + 32'd1);

assign add_ln417_1_fu_286_p2 = (K_size_reg_712 + xor_ln417_fu_280_p2);

assign add_ln417_fu_275_p2 = ($signed(K_size_reg_712) + $signed(32'd4294967295));

assign add_ln421_fu_318_p2 = (PTR_WIDTH_plus_Ksize_reg_721 + xor_ln421_fu_312_p2);

assign and_ln368_1_fu_621_p2 = (xor_ln368_2_fu_615_p2 & p_Val2_s_fu_74);

assign and_ln368_2_fu_627_p2 = (select_ln368_3_fu_590_p3 & and_ln368_fu_609_p2);

assign and_ln368_3_fu_378_p2 = (xor_ln368_3_fu_373_p2 & p_Val2_s_fu_74);

assign and_ln368_4_fu_384_p2 = (shl_ln368_3_reg_754 & shl_ln368_2_fu_367_p2);

assign and_ln368_5_fu_499_p2 = (xor_ln368_5_fu_493_p2 & p_Result_1_fu_389_p2);

assign and_ln368_6_fu_511_p2 = (p_Result_2_fu_505_p2 & lshr_ln628_2_fu_468_p2);

assign and_ln368_fu_609_p2 = (shl_ln368_1_fu_597_p2 & lshr_ln368_fu_603_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln412_reg_740 == 1'd0) & (stream_img_out4_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln390_reg_703 == 1'd1) & (imgOutput_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln412_reg_740 == 1'd0) & (stream_img_out4_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln390_reg_703 == 1'd1) & (imgOutput_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln412_reg_740 == 1'd0) & (stream_img_out4_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln390_reg_703 == 1'd1) & (imgOutput_data2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln390_reg_703 == 1'd1) & (imgOutput_data2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln412_reg_740 == 1'd0) & (stream_img_out4_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_560 = ((icmp_ln390_reg_703 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln412_fu_240_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_563 = ((icmp_ln390_reg_703 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln412_fu_240_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bits_to_add_2_fu_337_p2 = (bits_to_add_fu_78 - K_size_reg_712);

assign bits_to_add_3_fu_301_p2 = (PTR_WIDTH_min_Ksize_fu_234_p3 + bits_to_add_fu_78);

assign bits_to_add_out = bits_to_add_fu_78;

assign clk_cnt_1_fu_198_p3 = ((icmp_ln398_fu_187_p2[0:0] == 1'b1) ? 32'd0 : add_ln404_fu_192_p2);

assign icmp_ln368_fu_323_p2 = ((sub_ln421_fu_245_p2 > add_ln421_fu_318_p2) ? 1'b1 : 1'b0);

assign icmp_ln390_fu_173_p2 = (($signed(zext_ln390_fu_169_p1) < $signed(loop_count)) ? 1'b1 : 1'b0);

assign icmp_ln398_fu_187_p2 = ((clk_cnt_fu_82 == sext_ln390_cast_reg_698) ? 1'b1 : 1'b0);

assign icmp_ln412_fu_240_p2 = (($signed(K_size_reg_712) < $signed(bits_to_add_fu_78)) ? 1'b1 : 1'b0);

assign icmp_ln416_fu_396_p2 = ((bits_to_add_1_reg_726 == K_size_reg_712_pp0_iter2_reg) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_291_p2 = ((bits_to_add_fu_78 > add_ln417_fu_275_p2) ? 1'b1 : 1'b0);

assign lshr_ln368_1_fu_487_p2 = 8'd255 >> zext_ln368_5_fu_483_p1;

assign lshr_ln368_fu_603_p2 = 8'd255 >> zext_ln368_2_fu_571_p1;

assign lshr_ln628_1_fu_462_p2 = select_ln628_1_fu_435_p3 >> zext_ln628_1_fu_454_p1;

assign lshr_ln628_2_fu_468_p2 = 8'd255 >> zext_ln628_2_fu_458_p1;

assign lshr_ln628_fu_353_p2 = 8'd255 >> zext_ln628_fu_350_p1;

assign p_Result_1_fu_389_p2 = (and_ln368_4_fu_384_p2 | and_ln368_3_fu_378_p2);

assign p_Result_2_fu_505_p2 = (lshr_ln628_1_fu_462_p2 & lshr_ln368_1_fu_487_p2);

assign p_Result_3_fu_517_p2 = (and_ln368_6_fu_511_p2 | and_ln368_5_fu_499_p2);

assign p_Result_4_fu_633_p2 = (and_ln368_2_fu_627_p2 | and_ln368_1_fu_621_p2);

assign p_Result_s_fu_359_p2 = (p_Val2_1_reg_732 & lshr_ln628_fu_353_p2);

assign r_V_3_fu_523_p3 = ((icmp_ln416_fu_396_p2[0:0] == 1'b1) ? p_Result_1_fu_389_p2 : p_Result_3_fu_517_p2);

assign r_V_5_out = p_Val2_s_fu_74;

assign select_ln368_1_fu_546_p3 = ((icmp_ln368_reg_778[0:0] == 1'b1) ? trunc_ln368_1_reg_794 : trunc_ln368_reg_786);

assign select_ln368_2_fu_551_p3 = ((icmp_ln368_reg_778[0:0] == 1'b1) ? xor_ln368_fu_536_p2 : trunc_ln368_reg_786);

assign select_ln368_3_fu_590_p3 = ((icmp_ln368_reg_778[0:0] == 1'b1) ? tmp_fu_580_p4 : shl_ln368_fu_575_p2);

assign select_ln368_fu_541_p3 = ((icmp_ln368_reg_778[0:0] == 1'b1) ? trunc_ln368_reg_786 : trunc_ln368_1_reg_794);

assign select_ln628_1_fu_435_p3 = ((icmp_ln628_reg_765[0:0] == 1'b1) ? tmp_1_fu_403_p4 : p_Val2_1_reg_732);

assign select_ln628_2_fu_441_p3 = ((icmp_ln628_reg_765[0:0] == 1'b1) ? xor_ln628_fu_417_p2 : trunc_ln628_fu_400_p1);

assign select_ln628_fu_428_p3 = ((icmp_ln628_reg_765[0:0] == 1'b1) ? sub_ln628_1_fu_412_p2 : sub_ln628_2_fu_423_p2);

assign sext_ln390_cast_fu_147_p1 = $signed(sext_ln390);

assign shl_ln368_1_fu_597_p2 = 8'd255 << zext_ln368_1_fu_567_p1;

assign shl_ln368_2_fu_367_p2 = p_Result_s_fu_359_p2 << zext_ln368_3_fu_364_p1;

assign shl_ln368_3_fu_269_p2 = 8'd255 << zext_ln368_4_fu_265_p1;

assign shl_ln368_fu_575_p2 = p_Val2_1_reg_732 << zext_ln368_fu_563_p1;

assign stream_img_out4_din = p_Result_1_fu_389_p2;

assign sub_ln421_fu_245_p2 = (32'd8 - bits_to_add_fu_78);

assign sub_ln628_1_fu_412_p2 = (trunc_ln628_fu_400_p1 - trunc_ln628_1_reg_772);

assign sub_ln628_2_fu_423_p2 = (trunc_ln628_1_reg_772 - trunc_ln628_fu_400_p1);

assign sub_ln628_fu_255_p2 = (3'd0 - trunc_ln413_fu_251_p1);

integer ap_tvar_int_0;

always @ (p_Val2_1_reg_732) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_1_fu_403_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_403_p4[ap_tvar_int_0] = p_Val2_1_reg_732[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln368_fu_575_p2) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_fu_580_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_580_p4[ap_tvar_int_1] = shl_ln368_fu_575_p2[7 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln368_1_fu_333_p1 = add_ln421_fu_318_p2[2:0];

assign trunc_ln368_2_fu_261_p1 = sub_ln421_fu_245_p2[2:0];

assign trunc_ln368_3_fu_474_p1 = add_ln417_1_reg_760[2:0];

assign trunc_ln368_fu_329_p1 = sub_ln421_fu_245_p2[2:0];

assign trunc_ln413_fu_251_p1 = bits_to_add_fu_78[2:0];

assign trunc_ln628_1_fu_297_p1 = add_ln417_fu_275_p2[2:0];

assign trunc_ln628_fu_400_p1 = bits_to_add_1_reg_726[2:0];

assign xor_ln368_1_fu_557_p2 = (select_ln368_fu_541_p3 ^ 3'd7);

assign xor_ln368_2_fu_615_p2 = (8'd255 ^ and_ln368_fu_609_p2);

assign xor_ln368_3_fu_373_p2 = (shl_ln368_3_reg_754 ^ 8'd255);

assign xor_ln368_4_fu_477_p2 = (trunc_ln368_3_fu_474_p1 ^ 3'd7);

assign xor_ln368_5_fu_493_p2 = (lshr_ln368_1_fu_487_p2 ^ 8'd255);

assign xor_ln368_fu_536_p2 = (trunc_ln368_reg_786 ^ 3'd7);

assign xor_ln417_fu_280_p2 = (bits_to_add_fu_78 ^ 32'd7);

assign xor_ln421_fu_312_p2 = (bits_to_add_fu_78 ^ 32'd4294967295);

assign xor_ln628_1_fu_448_p2 = (select_ln628_fu_428_p3 ^ 3'd7);

assign xor_ln628_fu_417_p2 = (trunc_ln628_fu_400_p1 ^ 3'd7);

assign zext_ln368_1_fu_567_p1 = select_ln368_1_fu_546_p3;

assign zext_ln368_2_fu_571_p1 = xor_ln368_1_fu_557_p2;

assign zext_ln368_3_fu_364_p1 = trunc_ln368_2_reg_749;

assign zext_ln368_4_fu_265_p1 = trunc_ln368_2_fu_261_p1;

assign zext_ln368_5_fu_483_p1 = xor_ln368_4_fu_477_p2;

assign zext_ln368_fu_563_p1 = select_ln368_2_fu_551_p3;

assign zext_ln390_fu_169_p1 = i_fu_86;

assign zext_ln628_1_fu_454_p1 = select_ln628_2_fu_441_p3;

assign zext_ln628_2_fu_458_p1 = xor_ln628_1_fu_448_p2;

assign zext_ln628_fu_350_p1 = sub_ln628_reg_744;

endmodule //fast_corner_detect_xfMat2hlsStrm_8_0_128_128_1_16384_Pipeline_L1
