// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_corner_detect_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_img_in3_dout,
        stream_img_in3_num_data_valid,
        stream_img_in3_fifo_cap,
        stream_img_in3_empty_n,
        stream_img_in3_read,
        imgInput_data1_din,
        imgInput_data1_num_data_valid,
        imgInput_data1_fifo_cap,
        imgInput_data1_full_n,
        imgInput_data1_write,
        loop_count,
        sext_ln233,
        sext_ln251,
        last_N_size,
        PTR_WIDTH_min_last_N,
        PTR_WIDTH_plus_last_N
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_img_in3_dout;
input  [1:0] stream_img_in3_num_data_valid;
input  [1:0] stream_img_in3_fifo_cap;
input   stream_img_in3_empty_n;
output   stream_img_in3_read;
output  [7:0] imgInput_data1_din;
input  [1:0] imgInput_data1_num_data_valid;
input  [1:0] imgInput_data1_fifo_cap;
input   imgInput_data1_full_n;
output   imgInput_data1_write;
input  [31:0] loop_count;
input  [29:0] sext_ln233;
input  [8:0] sext_ln251;
input  [31:0] last_N_size;
input  [31:0] PTR_WIDTH_min_last_N;
input  [31:0] PTR_WIDTH_plus_last_N;

reg ap_idle;
reg stream_img_in3_read;
reg imgInput_data1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln251_reg_719;
reg   [0:0] icmp_ln251_reg_719_pp0_iter2_reg;
reg   [0:0] icmp_ln276_reg_750;
reg   [0:0] icmp_ln280_reg_775;
reg    ap_predicate_op94_read_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln251_fu_198_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgInput_data1_blk_n;
wire    ap_block_pp0_stage0;
reg    stream_img_in3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln251_cast_fu_163_p1;
reg  signed [31:0] sext_ln251_cast_reg_709;
wire  signed [31:0] sext_ln233_cast_fu_167_p1;
reg  signed [31:0] sext_ln233_cast_reg_714;
reg   [0:0] icmp_ln251_reg_719_pp0_iter3_reg;
wire   [0:0] icmp_ln260_fu_212_p2;
reg   [0:0] icmp_ln260_reg_723;
wire   [31:0] K_size_fu_223_p3;
reg   [31:0] K_size_reg_728;
reg   [31:0] K_size_reg_728_pp0_iter2_reg;
wire   [31:0] PTR_WIDTH_plus_Ksize_fu_238_p3;
reg   [31:0] PTR_WIDTH_plus_Ksize_reg_736;
reg   [31:0] valid_bits_1_reg_741;
wire   [0:0] icmp_ln276_fu_267_p2;
reg   [0:0] icmp_ln276_reg_750_pp0_iter3_reg;
wire   [0:0] icmp_ln628_fu_289_p2;
reg   [0:0] icmp_ln628_reg_754;
wire   [2:0] trunc_ln628_fu_295_p1;
reg   [2:0] trunc_ln628_reg_761;
wire   [2:0] trunc_ln628_2_fu_299_p1;
reg   [2:0] trunc_ln628_2_reg_769;
wire   [0:0] icmp_ln280_fu_313_p2;
wire   [0:0] icmp_ln368_fu_334_p2;
reg   [0:0] icmp_ln368_reg_779;
reg   [0:0] icmp_ln368_reg_779_pp0_iter3_reg;
wire   [2:0] trunc_ln368_4_fu_340_p1;
reg   [2:0] trunc_ln368_4_reg_787;
wire   [7:0] p_Result_8_fu_427_p2;
wire   [7:0] p_Val2_4_fu_498_p3;
reg   [7:0] p_Val2_4_reg_798;
wire   [7:0] shl_ln368_fu_588_p2;
reg   [7:0] shl_ln368_reg_803;
wire   [7:0] and_ln368_fu_606_p2;
reg   [7:0] and_ln368_reg_809;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [7:0] ap_phi_mux_r_V_5_phi_fu_145_p4;
reg   [7:0] ap_phi_reg_pp0_iter3_r_V_5_reg_141;
wire   [7:0] ap_phi_reg_pp0_iter0_r_V_5_reg_141;
reg   [7:0] ap_phi_reg_pp0_iter1_r_V_5_reg_141;
reg   [7:0] ap_phi_reg_pp0_iter2_r_V_5_reg_141;
reg   [7:0] ap_phi_mux_out_V_4_phi_fu_156_p4;
wire   [7:0] p_Result_5_fu_647_p2;
reg   [7:0] ap_phi_reg_pp0_iter4_out_V_4_reg_153;
wire   [7:0] ap_phi_reg_pp0_iter0_out_V_4_reg_153;
reg   [7:0] ap_phi_reg_pp0_iter1_out_V_4_reg_153;
reg   [7:0] ap_phi_reg_pp0_iter2_out_V_4_reg_153;
reg   [7:0] ap_phi_reg_pp0_iter3_out_V_4_reg_153;
reg   [31:0] valid_bits_fu_72;
wire   [31:0] valid_bits_2_fu_303_p2;
wire   [31:0] valid_bits_3_fu_344_p2;
wire    ap_loop_init;
reg   [31:0] clk_cnt_fu_76;
wire   [31:0] clk_cnt_2_fu_230_p3;
reg   [30:0] i_fu_80;
wire   [30:0] add_ln251_fu_203_p2;
reg   [31:0] ddr_read_cnt_fu_84;
wire   [31:0] ddr_read_cnt_2_fu_318_p2;
reg   [7:0] p_Val2_s_fu_88;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln251_fu_194_p1;
wire   [31:0] add_ln266_fu_217_p2;
wire   [31:0] xor_ln289_fu_272_p2;
wire   [31:0] sub_ln289_fu_283_p2;
wire   [31:0] add_ln289_fu_278_p2;
wire   [31:0] add_ln286_1_fu_329_p2;
wire   [31:0] PTR_WIDTH_min_Ksize_fu_261_p3;
wire   [2:0] sub_ln628_3_fu_368_p2;
wire   [2:0] sub_ln628_4_fu_377_p2;
reg   [7:0] tmp_fu_358_p4;
wire   [2:0] xor_ln628_fu_372_p2;
wire   [2:0] select_ln628_fu_381_p3;
wire   [2:0] select_ln628_4_fu_395_p3;
wire   [2:0] xor_ln628_2_fu_401_p2;
wire   [7:0] select_ln628_3_fu_388_p3;
wire   [7:0] zext_ln628_4_fu_407_p1;
wire   [7:0] zext_ln628_5_fu_411_p1;
wire   [7:0] lshr_ln628_4_fu_415_p2;
wire   [7:0] lshr_ln628_5_fu_421_p2;
wire   [2:0] trunc_ln278_fu_438_p1;
wire   [2:0] sub_ln628_fu_444_p2;
wire   [7:0] zext_ln628_fu_450_p1;
wire   [7:0] zext_ln628_3_fu_454_p1;
wire   [7:0] lshr_ln628_fu_458_p2;
wire   [7:0] lshr_ln628_3_fu_464_p2;
wire   [2:0] trunc_ln278_1_fu_441_p1;
wire   [2:0] sub_ln368_fu_476_p2;
wire   [7:0] zext_ln368_fu_482_p1;
wire   [7:0] p_Result_6_fu_470_p2;
wire   [7:0] lshr_ln368_fu_486_p2;
wire   [0:0] icmp_ln277_fu_433_p2;
wire   [7:0] p_Result_7_fu_492_p2;
wire   [31:0] xor_ln286_fu_506_p2;
wire   [31:0] add_ln286_fu_511_p2;
wire   [2:0] trunc_ln628_3_fu_516_p1;
wire   [2:0] xor_ln628_3_fu_520_p2;
wire   [7:0] zext_ln628_6_fu_526_p1;
wire   [7:0] lshr_ln628_6_fu_530_p2;
wire   [2:0] trunc_ln368_fu_542_p1;
wire   [2:0] xor_ln368_fu_545_p2;
wire   [2:0] select_ln368_fu_551_p3;
wire   [2:0] select_ln368_5_fu_563_p3;
wire   [2:0] select_ln368_4_fu_557_p3;
wire   [2:0] xor_ln368_6_fu_570_p2;
wire   [7:0] p_Result_s_fu_536_p2;
wire   [7:0] zext_ln368_6_fu_576_p1;
wire   [7:0] zext_ln368_7_fu_580_p1;
wire   [7:0] zext_ln368_8_fu_584_p1;
wire   [7:0] shl_ln368_4_fu_594_p2;
wire   [7:0] lshr_ln368_2_fu_600_p2;
reg   [7:0] tmp_4_fu_617_p4;
wire   [7:0] xor_ln368_7_fu_632_p2;
wire   [7:0] select_ln368_6_fu_626_p3;
wire   [7:0] and_ln368_7_fu_637_p2;
wire   [7:0] and_ln368_8_fu_642_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_216;
reg    ap_condition_616;
reg    ap_condition_619;
reg    ap_condition_622;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fast_corner_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((1'b1 == ap_condition_216)) begin
            ap_phi_reg_pp0_iter3_r_V_5_reg_141 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_r_V_5_reg_141 <= ap_phi_reg_pp0_iter2_r_V_5_reg_141;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln276_reg_750 == 1'd0) & (icmp_ln251_reg_719_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_out_V_4_reg_153 <= p_Result_8_fu_427_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_out_V_4_reg_153 <= ap_phi_reg_pp0_iter3_out_V_4_reg_153;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            clk_cnt_fu_76 <= 32'd0;
        end else if (((icmp_ln251_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            clk_cnt_fu_76 <= clk_cnt_2_fu_230_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ddr_read_cnt_fu_84 <= 32'd0;
        end else if ((1'b1 == ap_condition_616)) begin
            ddr_read_cnt_fu_84 <= ddr_read_cnt_2_fu_318_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 31'd0;
        end else if (((icmp_ln251_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_80 <= add_ln251_fu_203_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            valid_bits_fu_72 <= 32'd0;
        end else if ((1'b1 == ap_condition_622)) begin
            valid_bits_fu_72 <= valid_bits_3_fu_344_p2;
        end else if ((1'b1 == ap_condition_619)) begin
            valid_bits_fu_72 <= valid_bits_2_fu_303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_fu_198_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_size_reg_728 <= K_size_fu_223_p3;
        PTR_WIDTH_plus_Ksize_reg_736 <= PTR_WIDTH_plus_Ksize_fu_238_p3;
        icmp_ln260_reg_723 <= icmp_ln260_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        K_size_reg_728_pp0_iter2_reg <= K_size_reg_728;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln251_reg_719_pp0_iter2_reg <= icmp_ln251_reg_719;
        icmp_ln251_reg_719_pp0_iter3_reg <= icmp_ln251_reg_719_pp0_iter2_reg;
        icmp_ln276_reg_750_pp0_iter3_reg <= icmp_ln276_reg_750;
        icmp_ln368_reg_779_pp0_iter3_reg <= icmp_ln368_reg_779;
        valid_bits_1_reg_741 <= valid_bits_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln276_reg_750 == 1'd1) & (icmp_ln251_reg_719_pp0_iter2_reg == 1'd1))) begin
        and_ln368_reg_809 <= and_ln368_fu_606_p2;
        p_Val2_4_reg_798 <= p_Val2_4_fu_498_p3;
        shl_ln368_reg_803 <= shl_ln368_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln251_reg_719 <= icmp_ln251_fu_198_p2;
        sext_ln233_cast_reg_714 <= sext_ln233_cast_fu_167_p1;
        sext_ln251_cast_reg_709 <= sext_ln251_cast_fu_163_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_out_V_4_reg_153 <= ap_phi_reg_pp0_iter0_out_V_4_reg_153;
        ap_phi_reg_pp0_iter1_r_V_5_reg_141 <= ap_phi_reg_pp0_iter0_r_V_5_reg_141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_out_V_4_reg_153 <= ap_phi_reg_pp0_iter1_out_V_4_reg_153;
        ap_phi_reg_pp0_iter2_r_V_5_reg_141 <= ap_phi_reg_pp0_iter1_r_V_5_reg_141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_out_V_4_reg_153 <= ap_phi_reg_pp0_iter2_out_V_4_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_719 == 1'd1))) begin
        icmp_ln276_reg_750 <= icmp_ln276_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_719 == 1'd1) & (icmp_ln276_fu_267_p2 == 1'd1))) begin
        icmp_ln280_reg_775 <= icmp_ln280_fu_313_p2;
        icmp_ln368_reg_779 <= icmp_ln368_fu_334_p2;
        trunc_ln368_4_reg_787 <= trunc_ln368_4_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_719 == 1'd1) & (icmp_ln276_fu_267_p2 == 1'd0))) begin
        icmp_ln628_reg_754 <= icmp_ln628_fu_289_p2;
        trunc_ln628_2_reg_769 <= trunc_ln628_2_fu_299_p1;
        trunc_ln628_reg_761 <= trunc_ln628_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln276_reg_750 == 1'd1) & (icmp_ln251_reg_719_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_Val2_s_fu_88 <= ap_phi_mux_r_V_5_phi_fu_145_p4;
    end
end

always @ (*) begin
    if (((icmp_ln251_fu_198_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln251_reg_719 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln276_reg_750_pp0_iter3_reg == 1'd1) & (icmp_ln251_reg_719_pp0_iter3_reg == 1'd1))) begin
        ap_phi_mux_out_V_4_phi_fu_156_p4 = p_Result_5_fu_647_p2;
    end else begin
        ap_phi_mux_out_V_4_phi_fu_156_p4 = ap_phi_reg_pp0_iter4_out_V_4_reg_153;
    end
end

always @ (*) begin
    if (((icmp_ln280_reg_775 == 1'd1) & (icmp_ln276_reg_750 == 1'd1) & (icmp_ln251_reg_719_pp0_iter2_reg == 1'd1))) begin
        ap_phi_mux_r_V_5_phi_fu_145_p4 = stream_img_in3_dout;
    end else begin
        ap_phi_mux_r_V_5_phi_fu_145_p4 = ap_phi_reg_pp0_iter3_r_V_5_reg_141;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        imgInput_data1_blk_n = imgInput_data1_full_n;
    end else begin
        imgInput_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        imgInput_data1_write = 1'b1;
    end else begin
        imgInput_data1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op94_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_img_in3_blk_n = stream_img_in3_empty_n;
    end else begin
        stream_img_in3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op94_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_img_in3_read = 1'b1;
    end else begin
        stream_img_in3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_size_fu_223_p3 = ((icmp_ln260_fu_212_p2[0:0] == 1'b1) ? last_N_size : 32'd8);

assign PTR_WIDTH_min_Ksize_fu_261_p3 = ((icmp_ln260_reg_723[0:0] == 1'b1) ? PTR_WIDTH_min_last_N : 32'd0);

assign PTR_WIDTH_plus_Ksize_fu_238_p3 = ((icmp_ln260_fu_212_p2[0:0] == 1'b1) ? PTR_WIDTH_plus_last_N : 32'd16);

assign add_ln251_fu_203_p2 = (i_fu_80 + 31'd1);

assign add_ln266_fu_217_p2 = (clk_cnt_fu_76 + 32'd1);

assign add_ln286_1_fu_329_p2 = ($signed(K_size_reg_728) + $signed(32'd4294967295));

assign add_ln286_fu_511_p2 = (K_size_reg_728_pp0_iter2_reg + xor_ln286_fu_506_p2);

assign add_ln289_fu_278_p2 = (PTR_WIDTH_plus_Ksize_reg_736 + xor_ln289_fu_272_p2);

assign and_ln368_7_fu_637_p2 = (xor_ln368_7_fu_632_p2 & p_Val2_4_reg_798);

assign and_ln368_8_fu_642_p2 = (select_ln368_6_fu_626_p3 & and_ln368_reg_809);

assign and_ln368_fu_606_p2 = (shl_ln368_4_fu_594_p2 & lshr_ln368_2_fu_600_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op94_read_state4 == 1'b1) & (stream_img_in3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op94_read_state4 == 1'b1) & (stream_img_in3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_predicate_op94_read_state4 == 1'b1) & (stream_img_in3_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((ap_predicate_op94_read_state4 == 1'b1) & (stream_img_in3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (imgInput_data1_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_216 = ((icmp_ln251_reg_719 == 1'd1) & (icmp_ln280_fu_313_p2 == 1'd0) & (icmp_ln276_fu_267_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_616 = ((icmp_ln251_reg_719 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln280_fu_313_p2 == 1'd1) & (icmp_ln276_fu_267_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_619 = ((icmp_ln251_reg_719 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln276_fu_267_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_622 = ((icmp_ln251_reg_719 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln276_fu_267_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_out_V_4_reg_153 = 'bx;

assign ap_phi_reg_pp0_iter0_r_V_5_reg_141 = 'bx;

always @ (*) begin
    ap_predicate_op94_read_state4 = ((icmp_ln280_reg_775 == 1'd1) & (icmp_ln276_reg_750 == 1'd1) & (icmp_ln251_reg_719_pp0_iter2_reg == 1'd1));
end

assign clk_cnt_2_fu_230_p3 = ((icmp_ln260_fu_212_p2[0:0] == 1'b1) ? 32'd0 : add_ln266_fu_217_p2);

assign ddr_read_cnt_2_fu_318_p2 = (ddr_read_cnt_fu_84 + 32'd1);

assign icmp_ln251_fu_198_p2 = (($signed(zext_ln251_fu_194_p1) < $signed(loop_count)) ? 1'b1 : 1'b0);

assign icmp_ln260_fu_212_p2 = ((clk_cnt_fu_76 == sext_ln251_cast_reg_709) ? 1'b1 : 1'b0);

assign icmp_ln276_fu_267_p2 = (($signed(K_size_reg_728) > $signed(valid_bits_fu_72)) ? 1'b1 : 1'b0);

assign icmp_ln277_fu_433_p2 = ((valid_bits_1_reg_741 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_313_p2 = (($signed(sext_ln233_cast_reg_714) > $signed(ddr_read_cnt_fu_84)) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_334_p2 = ((valid_bits_fu_72 > add_ln286_1_fu_329_p2) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_289_p2 = ((sub_ln289_fu_283_p2 > add_ln289_fu_278_p2) ? 1'b1 : 1'b0);

assign imgInput_data1_din = ap_phi_mux_out_V_4_phi_fu_156_p4;

assign lshr_ln368_2_fu_600_p2 = 8'd255 >> zext_ln368_8_fu_584_p1;

assign lshr_ln368_fu_486_p2 = 8'd255 >> zext_ln368_fu_482_p1;

assign lshr_ln628_3_fu_464_p2 = 8'd255 >> zext_ln628_3_fu_454_p1;

assign lshr_ln628_4_fu_415_p2 = select_ln628_3_fu_388_p3 >> zext_ln628_4_fu_407_p1;

assign lshr_ln628_5_fu_421_p2 = 8'd255 >> zext_ln628_5_fu_411_p1;

assign lshr_ln628_6_fu_530_p2 = 8'd255 >> zext_ln628_6_fu_526_p1;

assign lshr_ln628_fu_458_p2 = p_Val2_s_fu_88 >> zext_ln628_fu_450_p1;

assign p_Result_5_fu_647_p2 = (and_ln368_8_fu_642_p2 | and_ln368_7_fu_637_p2);

assign p_Result_6_fu_470_p2 = (lshr_ln628_fu_458_p2 & lshr_ln628_3_fu_464_p2);

assign p_Result_7_fu_492_p2 = (p_Result_6_fu_470_p2 & lshr_ln368_fu_486_p2);

assign p_Result_8_fu_427_p2 = (lshr_ln628_5_fu_421_p2 & lshr_ln628_4_fu_415_p2);

assign p_Result_s_fu_536_p2 = (lshr_ln628_6_fu_530_p2 & ap_phi_mux_r_V_5_phi_fu_145_p4);

assign p_Val2_4_fu_498_p3 = ((icmp_ln277_fu_433_p2[0:0] == 1'b1) ? 8'd0 : p_Result_7_fu_492_p2);

assign select_ln368_4_fu_557_p3 = ((icmp_ln368_reg_779[0:0] == 1'b1) ? trunc_ln368_4_reg_787 : trunc_ln368_fu_542_p1);

assign select_ln368_5_fu_563_p3 = ((icmp_ln368_reg_779[0:0] == 1'b1) ? xor_ln368_fu_545_p2 : trunc_ln368_fu_542_p1);

assign select_ln368_6_fu_626_p3 = ((icmp_ln368_reg_779_pp0_iter3_reg[0:0] == 1'b1) ? tmp_4_fu_617_p4 : shl_ln368_reg_803);

assign select_ln368_fu_551_p3 = ((icmp_ln368_reg_779[0:0] == 1'b1) ? trunc_ln368_fu_542_p1 : trunc_ln368_4_reg_787);

assign select_ln628_3_fu_388_p3 = ((icmp_ln628_reg_754[0:0] == 1'b1) ? tmp_fu_358_p4 : p_Val2_s_fu_88);

assign select_ln628_4_fu_395_p3 = ((icmp_ln628_reg_754[0:0] == 1'b1) ? xor_ln628_fu_372_p2 : trunc_ln628_reg_761);

assign select_ln628_fu_381_p3 = ((icmp_ln628_reg_754[0:0] == 1'b1) ? sub_ln628_3_fu_368_p2 : sub_ln628_4_fu_377_p2);

assign sext_ln233_cast_fu_167_p1 = $signed(sext_ln233);

assign sext_ln251_cast_fu_163_p1 = $signed(sext_ln251);

assign shl_ln368_4_fu_594_p2 = 8'd255 << zext_ln368_7_fu_580_p1;

assign shl_ln368_fu_588_p2 = p_Result_s_fu_536_p2 << zext_ln368_6_fu_576_p1;

assign sub_ln289_fu_283_p2 = (32'd8 - valid_bits_fu_72);

assign sub_ln368_fu_476_p2 = (3'd0 - trunc_ln278_1_fu_441_p1);

assign sub_ln628_3_fu_368_p2 = (trunc_ln628_reg_761 - trunc_ln628_2_reg_769);

assign sub_ln628_4_fu_377_p2 = (trunc_ln628_2_reg_769 - trunc_ln628_reg_761);

assign sub_ln628_fu_444_p2 = (3'd0 - trunc_ln278_fu_438_p1);

integer ap_tvar_int_0;

always @ (shl_ln368_reg_803) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_4_fu_617_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_4_fu_617_p4[ap_tvar_int_0] = shl_ln368_reg_803[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_Val2_s_fu_88) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_fu_358_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_358_p4[ap_tvar_int_1] = p_Val2_s_fu_88[7 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln278_1_fu_441_p1 = valid_bits_1_reg_741[2:0];

assign trunc_ln278_fu_438_p1 = valid_bits_1_reg_741[2:0];

assign trunc_ln368_4_fu_340_p1 = add_ln286_1_fu_329_p2[2:0];

assign trunc_ln368_fu_542_p1 = valid_bits_1_reg_741[2:0];

assign trunc_ln628_2_fu_299_p1 = add_ln289_fu_278_p2[2:0];

assign trunc_ln628_3_fu_516_p1 = add_ln286_fu_511_p2[2:0];

assign trunc_ln628_fu_295_p1 = sub_ln289_fu_283_p2[2:0];

assign valid_bits_2_fu_303_p2 = (valid_bits_fu_72 - K_size_reg_728);

assign valid_bits_3_fu_344_p2 = (PTR_WIDTH_min_Ksize_fu_261_p3 + valid_bits_fu_72);

assign xor_ln286_fu_506_p2 = (valid_bits_1_reg_741 ^ 32'd7);

assign xor_ln289_fu_272_p2 = (valid_bits_fu_72 ^ 32'd4294967295);

assign xor_ln368_6_fu_570_p2 = (select_ln368_fu_551_p3 ^ 3'd7);

assign xor_ln368_7_fu_632_p2 = (8'd255 ^ and_ln368_reg_809);

assign xor_ln368_fu_545_p2 = (trunc_ln368_fu_542_p1 ^ 3'd7);

assign xor_ln628_2_fu_401_p2 = (select_ln628_fu_381_p3 ^ 3'd7);

assign xor_ln628_3_fu_520_p2 = (trunc_ln628_3_fu_516_p1 ^ 3'd7);

assign xor_ln628_fu_372_p2 = (trunc_ln628_reg_761 ^ 3'd7);

assign zext_ln251_fu_194_p1 = i_fu_80;

assign zext_ln368_6_fu_576_p1 = select_ln368_5_fu_563_p3;

assign zext_ln368_7_fu_580_p1 = select_ln368_4_fu_557_p3;

assign zext_ln368_8_fu_584_p1 = xor_ln368_6_fu_570_p2;

assign zext_ln368_fu_482_p1 = sub_ln368_fu_476_p2;

assign zext_ln628_3_fu_454_p1 = sub_ln628_fu_444_p2;

assign zext_ln628_4_fu_407_p1 = select_ln628_4_fu_395_p3;

assign zext_ln628_5_fu_411_p1 = xor_ln628_2_fu_401_p2;

assign zext_ln628_6_fu_526_p1 = xor_ln628_3_fu_520_p2;

assign zext_ln628_fu_450_p1 = sub_ln628_fu_444_p2;

endmodule //fast_corner_detect_hlsStrm2xfMat_8_0_128_128_1_16384_Pipeline_L1
