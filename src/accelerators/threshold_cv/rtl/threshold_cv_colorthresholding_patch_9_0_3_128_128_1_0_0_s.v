// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module threshold_cv_colorthresholding_patch_9_0_3_128_128_1_0_0_s (
        p_src_mat_rows_dout,
        p_src_mat_rows_empty_n,
        p_src_mat_rows_read,
        p_src_mat_cols_dout,
        p_src_mat_cols_empty_n,
        p_src_mat_cols_read,
        threshold_in_data17_dout,
        threshold_in_data17_empty_n,
        threshold_in_data17_read,
        threshold_out_data18_din,
        threshold_out_data18_full_n,
        threshold_out_data18_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] p_src_mat_rows_dout;
input   p_src_mat_rows_empty_n;
output   p_src_mat_rows_read;
input  [31:0] p_src_mat_cols_dout;
input   p_src_mat_cols_empty_n;
output   p_src_mat_cols_read;
input  [23:0] threshold_in_data17_dout;
input   threshold_in_data17_empty_n;
output   threshold_in_data17_read;
output  [7:0] threshold_out_data18_din;
input   threshold_out_data18_full_n;
output   threshold_out_data18_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_start;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_done;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_continue;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_idle;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_ready;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_start_out;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_start_write;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_rows_read;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_cols_read;
wire   [15:0] colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_din;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_write;
wire   [15:0] colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_din;
wire    colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_write;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_start;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_done;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_continue;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_idle;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_ready;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_in_data17_read;
wire   [7:0] xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_din;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_write;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_height_loc_read;
wire    xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_width_loc_read;
wire    img_height_loc_channel_full_n;
wire   [15:0] img_height_loc_channel_dout;
wire   [1:0] img_height_loc_channel_num_data_valid;
wire   [1:0] img_height_loc_channel_fifo_cap;
wire    img_height_loc_channel_empty_n;
wire    img_width_loc_channel_full_n;
wire   [15:0] img_width_loc_channel_dout;
wire   [1:0] img_width_loc_channel_num_data_valid;
wire   [1:0] img_width_loc_channel_fifo_cap;
wire    img_width_loc_channel_empty_n;
wire   [0:0] start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_din;
wire    start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_full_n;
wire   [0:0] start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_dout;
wire    start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_empty_n;

threshold_cv_colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_start),
    .start_full_n(start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_full_n),
    .ap_done(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_done),
    .ap_continue(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_continue),
    .ap_idle(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_idle),
    .ap_ready(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_ready),
    .start_out(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_start_out),
    .start_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_start_write),
    .p_src_mat_rows_dout(p_src_mat_rows_dout),
    .p_src_mat_rows_num_data_valid(2'd0),
    .p_src_mat_rows_fifo_cap(2'd0),
    .p_src_mat_rows_empty_n(p_src_mat_rows_empty_n),
    .p_src_mat_rows_read(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_rows_read),
    .p_src_mat_cols_dout(p_src_mat_cols_dout),
    .p_src_mat_cols_num_data_valid(2'd0),
    .p_src_mat_cols_fifo_cap(2'd0),
    .p_src_mat_cols_empty_n(p_src_mat_cols_empty_n),
    .p_src_mat_cols_read(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_cols_read),
    .img_height_out_din(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_din),
    .img_height_out_num_data_valid(img_height_loc_channel_num_data_valid),
    .img_height_out_fifo_cap(img_height_loc_channel_fifo_cap),
    .img_height_out_full_n(img_height_loc_channel_full_n),
    .img_height_out_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_write),
    .img_width_out_din(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_din),
    .img_width_out_num_data_valid(img_width_loc_channel_num_data_valid),
    .img_width_out_fifo_cap(img_width_loc_channel_fifo_cap),
    .img_width_out_full_n(img_width_loc_channel_full_n),
    .img_width_out_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_write)
);

threshold_cv_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_s xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_start),
    .ap_done(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_done),
    .ap_continue(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_continue),
    .ap_idle(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_idle),
    .ap_ready(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_ready),
    .threshold_in_data17_dout(threshold_in_data17_dout),
    .threshold_in_data17_num_data_valid(2'd0),
    .threshold_in_data17_fifo_cap(2'd0),
    .threshold_in_data17_empty_n(threshold_in_data17_empty_n),
    .threshold_in_data17_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_in_data17_read),
    .threshold_out_data18_din(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_din),
    .threshold_out_data18_num_data_valid(2'd0),
    .threshold_out_data18_fifo_cap(2'd0),
    .threshold_out_data18_full_n(threshold_out_data18_full_n),
    .threshold_out_data18_write(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_write),
    .img_height_loc_dout(img_height_loc_channel_dout),
    .img_height_loc_num_data_valid(img_height_loc_channel_num_data_valid),
    .img_height_loc_fifo_cap(img_height_loc_channel_fifo_cap),
    .img_height_loc_empty_n(img_height_loc_channel_empty_n),
    .img_height_loc_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_height_loc_read),
    .img_width_loc_dout(img_width_loc_channel_dout),
    .img_width_loc_num_data_valid(img_width_loc_channel_num_data_valid),
    .img_width_loc_fifo_cap(img_width_loc_channel_fifo_cap),
    .img_width_loc_empty_n(img_width_loc_channel_empty_n),
    .img_width_loc_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_width_loc_read)
);

threshold_cv_fifo_w16_d2_S img_height_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_din),
    .if_full_n(img_height_loc_channel_full_n),
    .if_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_height_out_write),
    .if_dout(img_height_loc_channel_dout),
    .if_num_data_valid(img_height_loc_channel_num_data_valid),
    .if_fifo_cap(img_height_loc_channel_fifo_cap),
    .if_empty_n(img_height_loc_channel_empty_n),
    .if_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_height_loc_read)
);

threshold_cv_fifo_w16_d2_S img_width_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_din),
    .if_full_n(img_width_loc_channel_full_n),
    .if_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_img_width_out_write),
    .if_dout(img_width_loc_channel_dout),
    .if_num_data_valid(img_width_loc_channel_num_data_valid),
    .if_fifo_cap(img_width_loc_channel_fifo_cap),
    .if_empty_n(img_width_loc_channel_empty_n),
    .if_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_img_width_loc_read)
);

threshold_cv_start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0 start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_din),
    .if_full_n(start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_full_n),
    .if_write(colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_start_write),
    .if_dout(start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_dout),
    .if_empty_n(start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_empty_n),
    .if_read(xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_ready)
);

assign ap_done = xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_done;

assign ap_idle = (xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_idle & colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_idle);

assign ap_ready = colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_ready;

assign colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_continue = 1'b1;

assign colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_ap_start = ap_start;

assign p_src_mat_cols_read = colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_cols_read;

assign p_src_mat_rows_read = colorthresholding_patch_9_0_3_128_128_1_0_0_Block_entry1_proc_U0_p_src_mat_rows_read;

assign start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_din = 1'b1;

assign threshold_in_data17_read = xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_in_data17_read;

assign threshold_out_data18_din = xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_din;

assign threshold_out_data18_write = xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_threshold_out_data18_write;

assign xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_continue = ap_continue;

assign xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_ap_start = start_for_xFInRange_patch_9_0_128_128_15_0_1_0_0_9_1_3_U0_empty_n;

endmodule //threshold_cv_colorthresholding_patch_9_0_3_128_128_1_0_0_s
