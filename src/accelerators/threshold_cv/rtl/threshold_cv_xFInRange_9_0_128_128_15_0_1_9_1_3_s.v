// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module threshold_cv_xFInRange_9_0_128_128_15_0_1_9_1_3_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        threshold_in_data22_dout,
        threshold_in_data22_num_data_valid,
        threshold_in_data22_fifo_cap,
        threshold_in_data22_empty_n,
        threshold_in_data22_read,
        threshold_out_data23_din,
        threshold_out_data23_num_data_valid,
        threshold_out_data23_fifo_cap,
        threshold_out_data23_full_n,
        threshold_out_data23_write,
        p_read,
        p_read1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] threshold_in_data22_dout;
input  [1:0] threshold_in_data22_num_data_valid;
input  [1:0] threshold_in_data22_fifo_cap;
input   threshold_in_data22_empty_n;
output   threshold_in_data22_read;
output  [7:0] threshold_out_data23_din;
input  [1:0] threshold_out_data23_num_data_valid;
input  [1:0] threshold_out_data23_fifo_cap;
input   threshold_out_data23_full_n;
output   threshold_out_data23_write;
input  [15:0] p_read;
input  [15:0] p_read1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg threshold_in_data22_read;
reg threshold_out_data23_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] grp_fu_53_p2;
reg   [31:0] bound_reg_70;
wire    ap_CS_fsm_state4;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_idle;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_ready;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_in_data22_read;
wire   [7:0] grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_din;
wire    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_write;
reg    grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire   [15:0] grp_fu_53_p0;
wire   [15:0] grp_fu_53_p1;
reg    grp_fu_53_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire   [31:0] grp_fu_53_p00;
wire   [31:0] grp_fu_53_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg = 1'b0;
end

threshold_cv_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2 grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start),
    .ap_done(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done),
    .ap_idle(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_idle),
    .ap_ready(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_ready),
    .threshold_in_data22_dout(threshold_in_data22_dout),
    .threshold_in_data22_num_data_valid(2'd0),
    .threshold_in_data22_fifo_cap(2'd0),
    .threshold_in_data22_empty_n(threshold_in_data22_empty_n),
    .threshold_in_data22_read(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_in_data22_read),
    .threshold_out_data23_din(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_din),
    .threshold_out_data23_num_data_valid(2'd0),
    .threshold_out_data23_fifo_cap(2'd0),
    .threshold_out_data23_full_n(threshold_out_data23_full_n),
    .threshold_out_data23_write(grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_write),
    .bound(bound_reg_70)
);

threshold_cv_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_53_p0),
    .din1(grp_fu_53_p1),
    .ce(grp_fu_53_ce),
    .dout(grp_fu_53_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_ready == 1'b1)) begin
            grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_70 <= grp_fu_53_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_53_ce = 1'b0;
    end else begin
        grp_fu_53_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        threshold_in_data22_read = grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_in_data22_read;
    end else begin
        threshold_in_data22_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        threshold_out_data23_write = grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_write;
    end else begin
        threshold_out_data23_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fu_53_p0 = grp_fu_53_p00;

assign grp_fu_53_p00 = p_read;

assign grp_fu_53_p1 = grp_fu_53_p10;

assign grp_fu_53_p10 = p_read1;

assign grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start = grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_ap_start_reg;

assign threshold_out_data23_din = grp_xFInRange_Pipeline_VITIS_LOOP_92_1_VITIS_LOOP_96_2_fu_36_threshold_out_data23_din;

endmodule //threshold_cv_xFInRange_9_0_128_128_15_0_1_9_1_3_s
