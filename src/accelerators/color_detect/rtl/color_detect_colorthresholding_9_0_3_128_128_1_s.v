// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_detect_colorthresholding_9_0_3_128_128_1_s (
        p_read,
        p_read1,
        rgb2hsv_data119_dout,
        rgb2hsv_data119_empty_n,
        rgb2hsv_data119_read,
        imgHelper1_data120_din,
        imgHelper1_data120_full_n,
        imgHelper1_data120_write,
        ap_clk,
        ap_rst,
        p_read_ap_vld,
        p_read1_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] p_read;
input  [31:0] p_read1;
input  [23:0] rgb2hsv_data119_dout;
input   rgb2hsv_data119_empty_n;
output   rgb2hsv_data119_read;
output  [7:0] imgHelper1_data120_din;
input   imgHelper1_data120_full_n;
output   imgHelper1_data120_write;
input   ap_clk;
input   ap_rst;
input   p_read_ap_vld;
input   p_read1_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_start;
wire    colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done;
wire    colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_continue;
wire    colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_idle;
wire    colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_ready;
wire   [15:0] colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read;
wire   [15:0] colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read1;
wire   [15:0] colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_0;
wire   [15:0] colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_1;
wire    ap_channel_done_img_width_loc_channel;
wire    img_width_loc_channel_full_n;
reg    ap_sync_reg_channel_write_img_width_loc_channel;
wire    ap_sync_channel_write_img_width_loc_channel;
wire    ap_channel_done_img_height_loc_channel;
wire    img_height_loc_channel_full_n;
reg    ap_sync_reg_channel_write_img_height_loc_channel;
wire    ap_sync_channel_write_img_height_loc_channel;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_start;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_done;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_continue;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_idle;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_ready;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_rgb2hsv_data119_read;
wire   [7:0] xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_din;
wire    xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_write;
wire   [15:0] img_height_loc_channel_dout;
wire   [1:0] img_height_loc_channel_num_data_valid;
wire   [1:0] img_height_loc_channel_fifo_cap;
wire    img_height_loc_channel_empty_n;
wire   [15:0] img_width_loc_channel_dout;
wire   [1:0] img_width_loc_channel_num_data_valid;
wire   [1:0] img_width_loc_channel_fifo_cap;
wire    img_width_loc_channel_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_img_width_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_img_height_loc_channel = 1'b0;
end

color_detect_colorthresholding_9_0_3_128_128_1_Block_entry1_proc colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_start),
    .ap_done(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done),
    .ap_continue(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_continue),
    .ap_idle(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_idle),
    .ap_ready(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_ready),
    .p_read(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read),
    .p_read1(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read1),
    .ap_return_0(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_0),
    .ap_return_1(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_1)
);

color_detect_xFInRange_9_0_128_128_15_0_1_9_1_3_s xFInRange_9_0_128_128_15_0_1_9_1_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_start),
    .ap_done(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_done),
    .ap_continue(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_continue),
    .ap_idle(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_idle),
    .ap_ready(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_ready),
    .rgb2hsv_data119_dout(rgb2hsv_data119_dout),
    .rgb2hsv_data119_num_data_valid(2'd0),
    .rgb2hsv_data119_fifo_cap(2'd0),
    .rgb2hsv_data119_empty_n(rgb2hsv_data119_empty_n),
    .rgb2hsv_data119_read(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_rgb2hsv_data119_read),
    .imgHelper1_data120_din(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_din),
    .imgHelper1_data120_num_data_valid(2'd0),
    .imgHelper1_data120_fifo_cap(2'd0),
    .imgHelper1_data120_full_n(imgHelper1_data120_full_n),
    .imgHelper1_data120_write(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_write),
    .p_read(img_height_loc_channel_dout),
    .p_read1(img_width_loc_channel_dout)
);

color_detect_fifo_w16_d2_S img_height_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_0),
    .if_full_n(img_height_loc_channel_full_n),
    .if_write(ap_channel_done_img_height_loc_channel),
    .if_dout(img_height_loc_channel_dout),
    .if_num_data_valid(img_height_loc_channel_num_data_valid),
    .if_fifo_cap(img_height_loc_channel_fifo_cap),
    .if_empty_n(img_height_loc_channel_empty_n),
    .if_read(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_ready)
);

color_detect_fifo_w16_d2_S img_width_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_return_1),
    .if_full_n(img_width_loc_channel_full_n),
    .if_write(ap_channel_done_img_width_loc_channel),
    .if_dout(img_width_loc_channel_dout),
    .if_num_data_valid(img_width_loc_channel_num_data_valid),
    .if_fifo_cap(img_width_loc_channel_fifo_cap),
    .if_empty_n(img_width_loc_channel_empty_n),
    .if_read(xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_img_height_loc_channel <= 1'b0;
    end else begin
        if (((colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done & colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_img_height_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_img_height_loc_channel <= ap_sync_channel_write_img_height_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_img_width_loc_channel <= 1'b0;
    end else begin
        if (((colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done & colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_img_width_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_img_width_loc_channel <= ap_sync_channel_write_img_width_loc_channel;
        end
    end
end

assign ap_channel_done_img_height_loc_channel = ((ap_sync_reg_channel_write_img_height_loc_channel ^ 1'b1) & colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done);

assign ap_channel_done_img_width_loc_channel = ((ap_sync_reg_channel_write_img_width_loc_channel ^ 1'b1) & colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_done);

assign ap_done = xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_done;

assign ap_idle = (xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_idle & (img_width_loc_channel_empty_n ^ 1'b1) & (img_height_loc_channel_empty_n ^ 1'b1) & colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_idle);

assign ap_ready = colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_ready;

assign ap_sync_channel_write_img_height_loc_channel = ((img_height_loc_channel_full_n & ap_channel_done_img_height_loc_channel) | ap_sync_reg_channel_write_img_height_loc_channel);

assign ap_sync_channel_write_img_width_loc_channel = ((img_width_loc_channel_full_n & ap_channel_done_img_width_loc_channel) | ap_sync_reg_channel_write_img_width_loc_channel);

assign colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_continue = (ap_sync_channel_write_img_width_loc_channel & ap_sync_channel_write_img_height_loc_channel);

assign colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_ap_start = ap_start;

assign colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read = {{p_read[(16 - 32'd1):0]}};

assign colorthresholding_9_0_3_128_128_1_Block_entry1_proc_U0_p_read1 = {{p_read1[(16 - 32'd1):0]}};

assign imgHelper1_data120_din = xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_din;

assign imgHelper1_data120_write = xFInRange_9_0_128_128_15_0_1_9_1_3_U0_imgHelper1_data120_write;

assign rgb2hsv_data119_read = xFInRange_9_0_128_128_15_0_1_9_1_3_U0_rgb2hsv_data119_read;

assign xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_continue = ap_continue;

assign xFInRange_9_0_128_128_15_0_1_9_1_3_U0_ap_start = (img_width_loc_channel_empty_n & img_height_loc_channel_empty_n);

endmodule //color_detect_colorthresholding_9_0_3_128_128_1_s
