// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_detect_Axi2Mat (
        img_in_TDATA,
        imgInput_data1_din,
        imgInput_data1_full_n,
        imgInput_data1_write,
        rows,
        cols,
        ap_clk,
        ap_rst,
        ap_start,
        rows_ap_vld,
        cols_ap_vld,
        img_in_TVALID,
        img_in_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] img_in_TDATA;
output  [23:0] imgInput_data1_din;
input   imgInput_data1_full_n;
output   imgInput_data1_write;
input  [31:0] rows;
input  [31:0] cols;
input   ap_clk;
input   ap_rst;
input   ap_start;
input   rows_ap_vld;
input   cols_ap_vld;
input   img_in_TVALID;
output   img_in_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    last_blk_pxl_width_U0_ap_start;
wire    last_blk_pxl_width_U0_ap_done;
wire    last_blk_pxl_width_U0_ap_continue;
wire    last_blk_pxl_width_U0_ap_idle;
wire    last_blk_pxl_width_U0_ap_ready;
wire   [3:0] last_blk_pxl_width_U0_return_r;
wire    last_blk_width_channel_full_n;
wire    addrbound_U0_ap_start;
wire    addrbound_U0_ap_done;
wire    addrbound_U0_ap_continue;
wire    addrbound_U0_ap_idle;
wire    addrbound_U0_ap_ready;
wire   [14:0] addrbound_U0_return_r;
wire   [31:0] addrbound_U0_rows_c_din;
wire    addrbound_U0_rows_c_write;
wire   [31:0] addrbound_U0_cols_c_din;
wire    addrbound_U0_cols_c_write;
wire    p_channel_full_n;
wire    Axi2Mat_Block_entry26_proc_U0_ap_start;
wire    Axi2Mat_Block_entry26_proc_U0_ap_done;
wire    Axi2Mat_Block_entry26_proc_U0_ap_continue;
wire    Axi2Mat_Block_entry26_proc_U0_ap_idle;
wire    Axi2Mat_Block_entry26_proc_U0_ap_ready;
wire   [14:0] Axi2Mat_Block_entry26_proc_U0_ap_return;
wire    axibound_V_full_n;
wire    Axi2AxiStream_U0_ap_start;
wire    Axi2AxiStream_U0_ap_done;
wire    Axi2AxiStream_U0_ap_continue;
wire    Axi2AxiStream_U0_ap_idle;
wire    Axi2AxiStream_U0_ap_ready;
wire   [31:0] Axi2AxiStream_U0_ldata1_din;
wire    Axi2AxiStream_U0_ldata1_write;
wire    Axi2AxiStream_U0_img_in_TREADY;
wire    AxiStream2MatStream_U0_ap_start;
wire    AxiStream2MatStream_U0_ap_done;
wire    AxiStream2MatStream_U0_ap_continue;
wire    AxiStream2MatStream_U0_ap_idle;
wire    AxiStream2MatStream_U0_ap_ready;
wire    AxiStream2MatStream_U0_ldata1_read;
wire   [23:0] AxiStream2MatStream_U0_imgInput_data1_din;
wire    AxiStream2MatStream_U0_imgInput_data1_write;
wire    AxiStream2MatStream_U0_rows_read;
wire    AxiStream2MatStream_U0_cols_bound_per_npc_read;
wire   [3:0] last_blk_width_channel_dout;
wire   [2:0] last_blk_width_channel_num_data_valid;
wire   [2:0] last_blk_width_channel_fifo_cap;
wire    last_blk_width_channel_empty_n;
wire   [14:0] p_channel_dout;
wire   [1:0] p_channel_num_data_valid;
wire   [1:0] p_channel_fifo_cap;
wire    p_channel_empty_n;
wire    rows_c_full_n;
wire   [31:0] rows_c_dout;
wire   [2:0] rows_c_num_data_valid;
wire   [2:0] rows_c_fifo_cap;
wire    rows_c_empty_n;
wire    cols_c_full_n;
wire   [31:0] cols_c_dout;
wire   [2:0] cols_c_num_data_valid;
wire   [2:0] cols_c_fifo_cap;
wire    cols_c_empty_n;
wire   [14:0] axibound_V_dout;
wire   [1:0] axibound_V_num_data_valid;
wire   [1:0] axibound_V_fifo_cap;
wire    axibound_V_empty_n;
wire    ldata_full_n;
wire   [31:0] ldata_dout;
wire   [1:0] ldata_num_data_valid;
wire   [1:0] ldata_fifo_cap;
wire    ldata_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_last_blk_pxl_width_U0_ap_ready;
wire    ap_sync_last_blk_pxl_width_U0_ap_ready;
reg    ap_sync_reg_addrbound_U0_ap_ready;
wire    ap_sync_addrbound_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_last_blk_pxl_width_U0_ap_ready = 1'b0;
#0 ap_sync_reg_addrbound_U0_ap_ready = 1'b0;
end

color_detect_last_blk_pxl_width last_blk_pxl_width_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(last_blk_pxl_width_U0_ap_start),
    .ap_done(last_blk_pxl_width_U0_ap_done),
    .ap_continue(last_blk_pxl_width_U0_ap_continue),
    .ap_idle(last_blk_pxl_width_U0_ap_idle),
    .ap_ready(last_blk_pxl_width_U0_ap_ready),
    .return_r(last_blk_pxl_width_U0_return_r)
);

color_detect_addrbound addrbound_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(addrbound_U0_ap_start),
    .ap_done(addrbound_U0_ap_done),
    .ap_continue(addrbound_U0_ap_continue),
    .ap_idle(addrbound_U0_ap_idle),
    .ap_ready(addrbound_U0_ap_ready),
    .return_r(addrbound_U0_return_r),
    .rows(rows),
    .cols(cols),
    .rows_c_din(addrbound_U0_rows_c_din),
    .rows_c_num_data_valid(rows_c_num_data_valid),
    .rows_c_fifo_cap(rows_c_fifo_cap),
    .rows_c_full_n(rows_c_full_n),
    .rows_c_write(addrbound_U0_rows_c_write),
    .cols_c_din(addrbound_U0_cols_c_din),
    .cols_c_num_data_valid(cols_c_num_data_valid),
    .cols_c_fifo_cap(cols_c_fifo_cap),
    .cols_c_full_n(cols_c_full_n),
    .cols_c_write(addrbound_U0_cols_c_write)
);

color_detect_Axi2Mat_Block_entry26_proc Axi2Mat_Block_entry26_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Axi2Mat_Block_entry26_proc_U0_ap_start),
    .ap_done(Axi2Mat_Block_entry26_proc_U0_ap_done),
    .ap_continue(Axi2Mat_Block_entry26_proc_U0_ap_continue),
    .ap_idle(Axi2Mat_Block_entry26_proc_U0_ap_idle),
    .ap_ready(Axi2Mat_Block_entry26_proc_U0_ap_ready),
    .axibound_V_2(p_channel_dout),
    .ap_return(Axi2Mat_Block_entry26_proc_U0_ap_return)
);

color_detect_Axi2AxiStream Axi2AxiStream_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Axi2AxiStream_U0_ap_start),
    .ap_done(Axi2AxiStream_U0_ap_done),
    .ap_continue(Axi2AxiStream_U0_ap_continue),
    .ap_idle(Axi2AxiStream_U0_ap_idle),
    .ap_ready(Axi2AxiStream_U0_ap_ready),
    .img_in_TVALID(img_in_TVALID),
    .ldata1_din(Axi2AxiStream_U0_ldata1_din),
    .ldata1_num_data_valid(ldata_num_data_valid),
    .ldata1_fifo_cap(ldata_fifo_cap),
    .ldata1_full_n(ldata_full_n),
    .ldata1_write(Axi2AxiStream_U0_ldata1_write),
    .img_in_TDATA(img_in_TDATA),
    .img_in_TREADY(Axi2AxiStream_U0_img_in_TREADY),
    .p_read(axibound_V_dout)
);

color_detect_AxiStream2MatStream AxiStream2MatStream_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(AxiStream2MatStream_U0_ap_start),
    .ap_done(AxiStream2MatStream_U0_ap_done),
    .ap_continue(AxiStream2MatStream_U0_ap_continue),
    .ap_idle(AxiStream2MatStream_U0_ap_idle),
    .ap_ready(AxiStream2MatStream_U0_ap_ready),
    .ldata1_dout(ldata_dout),
    .ldata1_num_data_valid(ldata_num_data_valid),
    .ldata1_fifo_cap(ldata_fifo_cap),
    .ldata1_empty_n(ldata_empty_n),
    .ldata1_read(AxiStream2MatStream_U0_ldata1_read),
    .imgInput_data1_din(AxiStream2MatStream_U0_imgInput_data1_din),
    .imgInput_data1_num_data_valid(2'd0),
    .imgInput_data1_fifo_cap(2'd0),
    .imgInput_data1_full_n(imgInput_data1_full_n),
    .imgInput_data1_write(AxiStream2MatStream_U0_imgInput_data1_write),
    .rows_dout(rows_c_dout),
    .rows_num_data_valid(rows_c_num_data_valid),
    .rows_fifo_cap(rows_c_fifo_cap),
    .rows_empty_n(rows_c_empty_n),
    .rows_read(AxiStream2MatStream_U0_rows_read),
    .cols_bound_per_npc_dout(cols_c_dout),
    .cols_bound_per_npc_num_data_valid(cols_c_num_data_valid),
    .cols_bound_per_npc_fifo_cap(cols_c_fifo_cap),
    .cols_bound_per_npc_empty_n(cols_c_empty_n),
    .cols_bound_per_npc_read(AxiStream2MatStream_U0_cols_bound_per_npc_read),
    .last_blk_width(last_blk_width_channel_dout)
);

color_detect_fifo_w4_d4_S last_blk_width_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(last_blk_pxl_width_U0_return_r),
    .if_full_n(last_blk_width_channel_full_n),
    .if_write(last_blk_pxl_width_U0_ap_done),
    .if_dout(last_blk_width_channel_dout),
    .if_num_data_valid(last_blk_width_channel_num_data_valid),
    .if_fifo_cap(last_blk_width_channel_fifo_cap),
    .if_empty_n(last_blk_width_channel_empty_n),
    .if_read(AxiStream2MatStream_U0_ap_ready)
);

color_detect_fifo_w15_d2_S p_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(addrbound_U0_return_r),
    .if_full_n(p_channel_full_n),
    .if_write(addrbound_U0_ap_done),
    .if_dout(p_channel_dout),
    .if_num_data_valid(p_channel_num_data_valid),
    .if_fifo_cap(p_channel_fifo_cap),
    .if_empty_n(p_channel_empty_n),
    .if_read(Axi2Mat_Block_entry26_proc_U0_ap_ready)
);

color_detect_fifo_w32_d4_S rows_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(addrbound_U0_rows_c_din),
    .if_full_n(rows_c_full_n),
    .if_write(addrbound_U0_rows_c_write),
    .if_dout(rows_c_dout),
    .if_num_data_valid(rows_c_num_data_valid),
    .if_fifo_cap(rows_c_fifo_cap),
    .if_empty_n(rows_c_empty_n),
    .if_read(AxiStream2MatStream_U0_rows_read)
);

color_detect_fifo_w32_d4_S cols_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(addrbound_U0_cols_c_din),
    .if_full_n(cols_c_full_n),
    .if_write(addrbound_U0_cols_c_write),
    .if_dout(cols_c_dout),
    .if_num_data_valid(cols_c_num_data_valid),
    .if_fifo_cap(cols_c_fifo_cap),
    .if_empty_n(cols_c_empty_n),
    .if_read(AxiStream2MatStream_U0_cols_bound_per_npc_read)
);

color_detect_fifo_w15_d2_S axibound_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Axi2Mat_Block_entry26_proc_U0_ap_return),
    .if_full_n(axibound_V_full_n),
    .if_write(Axi2Mat_Block_entry26_proc_U0_ap_done),
    .if_dout(axibound_V_dout),
    .if_num_data_valid(axibound_V_num_data_valid),
    .if_fifo_cap(axibound_V_fifo_cap),
    .if_empty_n(axibound_V_empty_n),
    .if_read(Axi2AxiStream_U0_ap_ready)
);

color_detect_fifo_w32_d2_S ldata_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Axi2AxiStream_U0_ldata1_din),
    .if_full_n(ldata_full_n),
    .if_write(Axi2AxiStream_U0_ldata1_write),
    .if_dout(ldata_dout),
    .if_num_data_valid(ldata_num_data_valid),
    .if_fifo_cap(ldata_fifo_cap),
    .if_empty_n(ldata_empty_n),
    .if_read(AxiStream2MatStream_U0_ldata1_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_addrbound_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_addrbound_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_addrbound_U0_ap_ready <= ap_sync_addrbound_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= ap_sync_last_blk_pxl_width_U0_ap_ready;
        end
    end
end

assign Axi2AxiStream_U0_ap_continue = 1'b1;

assign Axi2AxiStream_U0_ap_start = axibound_V_empty_n;

assign Axi2Mat_Block_entry26_proc_U0_ap_continue = axibound_V_full_n;

assign Axi2Mat_Block_entry26_proc_U0_ap_start = p_channel_empty_n;

assign AxiStream2MatStream_U0_ap_continue = ap_continue;

assign AxiStream2MatStream_U0_ap_start = last_blk_width_channel_empty_n;

assign addrbound_U0_ap_continue = p_channel_full_n;

assign addrbound_U0_ap_start = ((ap_sync_reg_addrbound_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_done = AxiStream2MatStream_U0_ap_done;

assign ap_idle = (last_blk_pxl_width_U0_ap_idle & (axibound_V_empty_n ^ 1'b1) & (p_channel_empty_n ^ 1'b1) & (last_blk_width_channel_empty_n ^ 1'b1) & addrbound_U0_ap_idle & AxiStream2MatStream_U0_ap_idle & Axi2Mat_Block_entry26_proc_U0_ap_idle & Axi2AxiStream_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_addrbound_U0_ap_ready = (ap_sync_reg_addrbound_U0_ap_ready | addrbound_U0_ap_ready);

assign ap_sync_last_blk_pxl_width_U0_ap_ready = (last_blk_pxl_width_U0_ap_ready | ap_sync_reg_last_blk_pxl_width_U0_ap_ready);

assign ap_sync_ready = (ap_sync_last_blk_pxl_width_U0_ap_ready & ap_sync_addrbound_U0_ap_ready);

assign imgInput_data1_din = AxiStream2MatStream_U0_imgInput_data1_din;

assign imgInput_data1_write = AxiStream2MatStream_U0_imgInput_data1_write;

assign img_in_TREADY = Axi2AxiStream_U0_img_in_TREADY;

assign last_blk_pxl_width_U0_ap_continue = last_blk_width_channel_full_n;

assign last_blk_pxl_width_U0_ap_start = ((ap_sync_reg_last_blk_pxl_width_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //color_detect_Axi2Mat
