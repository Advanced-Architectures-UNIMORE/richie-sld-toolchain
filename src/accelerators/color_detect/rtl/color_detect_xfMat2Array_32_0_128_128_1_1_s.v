// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_detect_xfMat2Array_32_0_128_128_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        imgOutput_data7_dout,
        imgOutput_data7_num_data_valid,
        imgOutput_data7_fifo_cap,
        imgOutput_data7_empty_n,
        imgOutput_data7_read,
        img_out_TDATA,
        img_out_TVALID,
        img_out_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] imgOutput_data7_dout;
input  [1:0] imgOutput_data7_num_data_valid;
input  [1:0] imgOutput_data7_fifo_cap;
input   imgOutput_data7_empty_n;
output   imgOutput_data7_read;
output  [31:0] img_out_TDATA;
output   img_out_TVALID;
input   img_out_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutput_data7_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Mat2Axi_fu_36_imgOutput_data7_read;
wire   [31:0] grp_Mat2Axi_fu_36_img_out_TDATA;
wire    grp_Mat2Axi_fu_36_ap_start;
wire    grp_Mat2Axi_fu_36_img_out_TVALID;
wire    grp_Mat2Axi_fu_36_img_out_TREADY;
wire    grp_Mat2Axi_fu_36_ap_done;
wire    grp_Mat2Axi_fu_36_ap_ready;
wire    grp_Mat2Axi_fu_36_ap_idle;
reg    grp_Mat2Axi_fu_36_ap_continue;
reg    grp_Mat2Axi_fu_36_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_Mat2Axi_fu_36_ap_ready;
wire    ap_sync_grp_Mat2Axi_fu_36_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready;
reg    ap_sync_reg_grp_Mat2Axi_fu_36_ap_done;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_Mat2Axi_fu_36_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready = 1'b0;
#0 ap_sync_reg_grp_Mat2Axi_fu_36_ap_done = 1'b0;
end

color_detect_Mat2Axi grp_Mat2Axi_fu_36(
    .imgOutput_data7_dout(imgOutput_data7_dout),
    .imgOutput_data7_empty_n(imgOutput_data7_empty_n),
    .imgOutput_data7_read(grp_Mat2Axi_fu_36_imgOutput_data7_read),
    .img_out_TDATA(grp_Mat2Axi_fu_36_img_out_TDATA),
    .rows(p_read),
    .cols(p_read1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .rows_ap_vld(1'b1),
    .cols_ap_vld(1'b1),
    .ap_start(grp_Mat2Axi_fu_36_ap_start),
    .img_out_TVALID(grp_Mat2Axi_fu_36_img_out_TVALID),
    .img_out_TREADY(grp_Mat2Axi_fu_36_img_out_TREADY),
    .ap_done(grp_Mat2Axi_fu_36_ap_done),
    .ap_ready(grp_Mat2Axi_fu_36_ap_ready),
    .ap_idle(grp_Mat2Axi_fu_36_ap_idle),
    .ap_continue(grp_Mat2Axi_fu_36_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_Mat2Axi_fu_36_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_Mat2Axi_fu_36_ap_done <= 1'b0;
        end else if ((grp_Mat2Axi_fu_36_ap_done == 1'b1)) begin
            ap_sync_reg_grp_Mat2Axi_fu_36_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready <= 1'b0;
        end else if ((grp_Mat2Axi_fu_36_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Mat2Axi_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_Mat2Axi_fu_36_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_Mat2Axi_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2Axi_fu_36_ap_ready == 1'b1)) begin
            grp_Mat2Axi_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_Mat2Axi_fu_36_ap_continue = 1'b1;
    end else begin
        grp_Mat2Axi_fu_36_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        imgOutput_data7_read = grp_Mat2Axi_fu_36_imgOutput_data7_read;
    end else begin
        imgOutput_data7_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_Mat2Axi_fu_36_ap_ready & ap_sync_grp_Mat2Axi_fu_36_ap_done) == 1'b0);
end

assign ap_sync_grp_Mat2Axi_fu_36_ap_done = (grp_Mat2Axi_fu_36_ap_done | ap_sync_reg_grp_Mat2Axi_fu_36_ap_done);

assign ap_sync_grp_Mat2Axi_fu_36_ap_ready = (grp_Mat2Axi_fu_36_ap_ready | ap_sync_reg_grp_Mat2Axi_fu_36_ap_ready);

assign grp_Mat2Axi_fu_36_ap_start = grp_Mat2Axi_fu_36_ap_start_reg;

assign grp_Mat2Axi_fu_36_img_out_TREADY = (img_out_TREADY & ap_CS_fsm_state3);

assign img_out_TDATA = grp_Mat2Axi_fu_36_img_out_TDATA;

assign img_out_TVALID = grp_Mat2Axi_fu_36_img_out_TVALID;

endmodule //color_detect_xfMat2Array_32_0_128_128_1_1_s
