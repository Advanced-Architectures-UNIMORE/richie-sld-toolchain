// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_detect_AxiStream2MatStream_Pipeline_MMIterInLoopRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_num_data_valid,
        ldata1_fifo_cap,
        ldata1_empty_n,
        ldata1_read,
        imgInput_data1_din,
        imgInput_data1_num_data_valid,
        imgInput_data1_fifo_cap,
        imgInput_data1_full_n,
        imgInput_data1_write,
        bound,
        sext_ln1093,
        cols_bound_per_npc_load,
        sub,
        last_blk_width_load,
        sub5,
        add_ln1093
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ldata1_dout;
input  [1:0] ldata1_num_data_valid;
input  [1:0] ldata1_fifo_cap;
input   ldata1_empty_n;
output   ldata1_read;
output  [23:0] imgInput_data1_din;
input  [1:0] imgInput_data1_num_data_valid;
input  [1:0] imgInput_data1_fifo_cap;
input   imgInput_data1_full_n;
output   imgInput_data1_write;
input  [31:0] bound;
input  [5:0] sext_ln1093;
input  [31:0] cols_bound_per_npc_load;
input  [31:0] sub;
input  [3:0] last_blk_width_load;
input  [5:0] sub5;
input  [5:0] add_ln1093;

reg ap_idle;
reg ldata1_read;
reg imgInput_data1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln1073_reg_756;
reg   [0:0] icmp_ln1073_reg_756_pp0_iter2_reg;
reg   [0:0] icmp_ln1084_reg_772;
reg    ap_predicate_op83_read_state4;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln1104_reg_768;
reg   [0:0] icmp_ln1104_reg_768_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1073_fu_198_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata1_blk_n;
wire    ap_block_pp0_stage0;
reg    imgInput_data1_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1073_reg_756_pp0_iter3_reg;
wire   [0:0] bLast_width_fu_209_p2;
reg   [0:0] bLast_width_reg_760;
reg   [0:0] bLast_width_reg_760_pp0_iter2_reg;
reg   [0:0] bLast_width_reg_760_pp0_iter3_reg;
reg   [0:0] bLast_width_reg_760_pp0_iter4_reg;
wire   [0:0] icmp_ln1104_fu_214_p2;
reg   [0:0] icmp_ln1104_reg_768_pp0_iter2_reg;
reg   [0:0] icmp_ln1104_reg_768_pp0_iter3_reg;
wire   [0:0] icmp_ln1084_fu_274_p2;
reg   [0:0] icmp_ln1084_reg_772_pp0_iter3_reg;
wire   [0:0] icmp_ln628_fu_302_p2;
reg   [0:0] icmp_ln628_reg_776;
reg   [0:0] icmp_ln628_reg_776_pp0_iter3_reg;
wire   [4:0] trunc_ln628_fu_308_p1;
reg   [4:0] trunc_ln628_reg_783;
reg   [4:0] trunc_ln628_reg_783_pp0_iter3_reg;
wire   [4:0] trunc_ln628_1_fu_312_p1;
reg   [4:0] trunc_ln628_1_reg_791;
reg   [4:0] trunc_ln628_1_reg_791_pp0_iter3_reg;
wire   [0:0] icmp_ln1085_fu_327_p2;
reg   [0:0] icmp_ln1085_reg_797;
reg   [0:0] icmp_ln1085_reg_797_pp0_iter3_reg;
wire   [4:0] trunc_ln1086_fu_333_p1;
reg   [4:0] trunc_ln1086_reg_802;
wire   [4:0] trunc_ln1086_1_fu_337_p1;
reg   [4:0] trunc_ln1086_1_reg_807;
wire   [4:0] sub_ln628_1_fu_359_p2;
reg   [4:0] sub_ln628_1_reg_812;
wire   [0:0] icmp_ln368_fu_365_p2;
reg   [0:0] icmp_ln368_reg_817;
reg   [0:0] icmp_ln368_reg_817_pp0_iter3_reg;
wire   [4:0] trunc_ln368_fu_371_p1;
reg   [4:0] trunc_ln368_reg_825;
wire   [4:0] trunc_ln368_1_fu_375_p1;
reg   [4:0] trunc_ln368_1_reg_833;
reg   [31:0] p_Val2_load_reg_839;
wire   [31:0] lshr_ln628_3_fu_425_p2;
reg   [31:0] lshr_ln628_3_reg_844;
wire   [4:0] sub_ln628_fu_431_p2;
reg   [4:0] sub_ln628_reg_849;
wire   [4:0] sub_ln368_fu_436_p2;
reg   [4:0] sub_ln368_reg_855;
wire   [23:0] shl_ln368_fu_505_p2;
reg   [23:0] shl_ln368_reg_860;
wire   [23:0] and_ln368_fu_523_p2;
reg   [23:0] and_ln368_reg_866;
wire   [23:0] localbuffer_V_6_fu_570_p1;
wire   [23:0] p_Result_3_fu_654_p2;
wire   [4:0] sub_ln628_4_fu_663_p2;
reg   [4:0] sub_ln628_4_reg_882;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [23:0] ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_159;
reg   [23:0] ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_159;
reg   [23:0] ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_159;
reg   [23:0] ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_159;
reg   [23:0] ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_159;
reg   [23:0] ap_phi_reg_pp0_iter5_localbuffer_V_8_reg_159;
reg   [31:0] rem_fu_88;
wire   [31:0] rem_3_fu_316_p2;
wire   [31:0] rem_2_fu_379_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_92;
wire   [30:0] add_ln1073_fu_203_p2;
reg   [31:0] j_fu_96;
wire   [31:0] j_5_fu_225_p3;
reg   [31:0] p_Val2_s_fu_100;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln1073_fu_194_p1;
wire   [31:0] add_ln1105_fu_219_p2;
wire   [3:0] xf_bits_per_clock_fu_246_p3;
wire  signed [4:0] sext_ln1079_fu_252_p1;
wire   [5:0] ptr_width_minus_fu_264_p3;
wire   [31:0] zext_ln1079_fu_256_p1;
wire   [5:0] select_ln1093_fu_280_p3;
wire   [31:0] zext_ln1093_fu_286_p1;
wire   [31:0] sub_ln1093_1_fu_296_p2;
wire   [31:0] sub_ln1093_fu_290_p2;
wire   [5:0] zext_ln1079_1_fu_260_p1;
wire  signed [5:0] add_ln1090_fu_341_p2;
wire   [4:0] trunc_ln1090_fu_351_p1;
wire   [4:0] trunc_ln1090_1_fu_355_p1;
wire  signed [31:0] sext_ln1090_fu_347_p1;
wire   [31:0] zext_ln1080_fu_270_p1;
reg   [31:0] tmp_1_fu_393_p4;
wire   [4:0] xor_ln628_1_fu_403_p2;
wire   [4:0] select_ln628_2_fu_415_p3;
wire   [31:0] select_ln628_1_fu_408_p3;
wire   [31:0] zext_ln628_3_fu_421_p1;
wire   [4:0] xor_ln628_fu_441_p2;
wire   [31:0] zext_ln628_2_fu_446_p1;
wire   [31:0] lshr_ln628_2_fu_450_p2;
wire   [31:0] p_Result_2_fu_456_p2;
wire   [4:0] sub_ln368_1_fu_466_p2;
wire   [4:0] select_ln368_fu_471_p3;
wire   [4:0] select_ln368_2_fu_481_p3;
wire   [4:0] select_ln368_1_fu_476_p3;
wire   [4:0] sub_ln368_2_fu_487_p2;
wire   [23:0] tmp_3_fu_462_p1;
wire   [23:0] zext_ln368_1_fu_493_p1;
wire   [23:0] zext_ln368_2_fu_497_p1;
wire   [23:0] zext_ln368_3_fu_501_p1;
wire   [23:0] shl_ln368_1_fu_511_p2;
wire   [23:0] lshr_ln368_1_fu_517_p2;
wire   [4:0] sub_ln628_2_fu_534_p2;
wire   [4:0] sub_ln628_3_fu_538_p2;
wire   [4:0] select_ln628_fu_542_p3;
wire   [4:0] xor_ln628_2_fu_549_p2;
wire   [31:0] zext_ln628_4_fu_555_p1;
wire   [31:0] lshr_ln628_4_fu_559_p2;
wire   [31:0] p_Result_4_fu_565_p2;
wire   [31:0] zext_ln628_fu_574_p1;
wire   [31:0] zext_ln628_1_fu_577_p1;
wire   [31:0] lshr_ln628_fu_580_p2;
wire   [31:0] lshr_ln628_1_fu_585_p2;
wire   [31:0] p_Result_s_fu_591_p2;
wire   [23:0] zext_ln368_fu_601_p1;
wire   [23:0] tmp_2_fu_597_p1;
wire   [23:0] lshr_ln368_fu_604_p2;
wire   [23:0] p_Result_1_fu_610_p2;
reg   [23:0] tmp_fu_623_p4;
wire   [23:0] localbuffer_V_fu_616_p3;
wire   [23:0] xor_ln368_fu_638_p2;
wire   [23:0] select_ln368_3_fu_632_p3;
wire   [23:0] and_ln368_1_fu_643_p2;
wire   [23:0] and_ln368_2_fu_649_p2;
wire   [4:0] trunc_ln628_2_fu_660_p1;
wire   [23:0] zext_ln628_5_fu_669_p1;
wire   [23:0] lshr_ln628_5_fu_672_p2;
wire   [23:0] select_ln1078_fu_678_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_677;
reg    ap_condition_681;
reg    ap_condition_684;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

color_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if (((icmp_ln1084_reg_772_pp0_iter3_reg == 1'd0) & (icmp_ln1073_reg_756_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_V_8_reg_159 <= localbuffer_V_6_fu_570_p1;
        end else if (((icmp_ln1084_reg_772_pp0_iter3_reg == 1'd1) & (icmp_ln1073_reg_756_pp0_iter3_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter5_localbuffer_V_8_reg_159 <= p_Result_3_fu_654_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_localbuffer_V_8_reg_159 <= ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_159;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 31'd0;
        end else if (((icmp_ln1073_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_92 <= add_ln1073_fu_203_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 32'd0;
        end else if (((icmp_ln1073_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_96 <= j_5_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_Val2_s_fu_100 <= 32'd0;
        end else if ((1'b1 == ap_condition_677)) begin
            p_Val2_s_fu_100 <= ldata1_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            rem_fu_88 <= 32'd0;
        end else if ((1'b1 == ap_condition_684)) begin
            rem_fu_88 <= rem_2_fu_379_p2;
        end else if ((1'b1 == ap_condition_681)) begin
            rem_fu_88 <= rem_3_fu_316_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1084_reg_772 == 1'd1) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1))) begin
        and_ln368_reg_866 <= and_ln368_fu_523_p2;
        shl_ln368_reg_860 <= shl_ln368_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1073_reg_756 <= icmp_ln1073_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        bLast_width_reg_760_pp0_iter2_reg <= bLast_width_reg_760;
        bLast_width_reg_760_pp0_iter3_reg <= bLast_width_reg_760_pp0_iter2_reg;
        bLast_width_reg_760_pp0_iter4_reg <= bLast_width_reg_760_pp0_iter3_reg;
        icmp_ln1073_reg_756_pp0_iter2_reg <= icmp_ln1073_reg_756;
        icmp_ln1073_reg_756_pp0_iter3_reg <= icmp_ln1073_reg_756_pp0_iter2_reg;
        icmp_ln1084_reg_772_pp0_iter3_reg <= icmp_ln1084_reg_772;
        icmp_ln1085_reg_797_pp0_iter3_reg <= icmp_ln1085_reg_797;
        icmp_ln1104_reg_768_pp0_iter2_reg <= icmp_ln1104_reg_768;
        icmp_ln1104_reg_768_pp0_iter3_reg <= icmp_ln1104_reg_768_pp0_iter2_reg;
        icmp_ln1104_reg_768_pp0_iter4_reg <= icmp_ln1104_reg_768_pp0_iter3_reg;
        icmp_ln368_reg_817_pp0_iter3_reg <= icmp_ln368_reg_817;
        icmp_ln628_reg_776_pp0_iter3_reg <= icmp_ln628_reg_776;
        trunc_ln628_1_reg_791_pp0_iter3_reg <= trunc_ln628_1_reg_791;
        trunc_ln628_reg_783_pp0_iter3_reg <= trunc_ln628_reg_783;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_159 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_159 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_159 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_159 <= ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_198_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bLast_width_reg_760 <= bLast_width_fu_209_p2;
        icmp_ln1104_reg_768 <= icmp_ln1104_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1073_reg_756 == 1'd1))) begin
        icmp_ln1084_reg_772 <= icmp_ln1084_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1073_reg_756 == 1'd1) & (icmp_ln1084_fu_274_p2 == 1'd1))) begin
        icmp_ln1085_reg_797 <= icmp_ln1085_fu_327_p2;
        icmp_ln368_reg_817 <= icmp_ln368_fu_365_p2;
        sub_ln628_1_reg_812 <= sub_ln628_1_fu_359_p2;
        trunc_ln1086_1_reg_807 <= trunc_ln1086_1_fu_337_p1;
        trunc_ln1086_reg_802 <= trunc_ln1086_fu_333_p1;
        trunc_ln368_1_reg_833 <= trunc_ln368_1_fu_375_p1;
        trunc_ln368_reg_825 <= trunc_ln368_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1073_reg_756 == 1'd1) & (icmp_ln1084_fu_274_p2 == 1'd0))) begin
        icmp_ln628_reg_776 <= icmp_ln628_fu_302_p2;
        trunc_ln628_1_reg_791 <= trunc_ln628_1_fu_312_p1;
        trunc_ln628_reg_783 <= trunc_ln628_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1084_reg_772 == 1'd0) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1))) begin
        lshr_ln628_3_reg_844 <= lshr_ln628_3_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1))) begin
        p_Val2_load_reg_839 <= p_Val2_s_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1084_reg_772 == 1'd1) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1) & (icmp_ln1085_reg_797 == 1'd0))) begin
        sub_ln368_reg_855 <= sub_ln368_fu_436_p2;
        sub_ln628_reg_849 <= sub_ln628_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (bLast_width_reg_760_pp0_iter3_reg == 1'd1))) begin
        sub_ln628_4_reg_882 <= sub_ln628_4_fu_663_p2;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_198_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1073_reg_756 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgInput_data1_blk_n = imgInput_data1_full_n;
    end else begin
        imgInput_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        imgInput_data1_write = 1'b1;
    end else begin
        imgInput_data1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op83_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op83_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1073_fu_203_p2 = (i_fu_92 + 31'd1);

assign add_ln1090_fu_341_p2 = ($signed(zext_ln1079_1_fu_260_p1) + $signed(6'd63));

assign add_ln1105_fu_219_p2 = (j_fu_96 + 32'd1);

assign and_ln368_1_fu_643_p2 = (xor_ln368_fu_638_p2 & localbuffer_V_fu_616_p3);

assign and_ln368_2_fu_649_p2 = (select_ln368_3_fu_632_p3 & and_ln368_reg_866);

assign and_ln368_fu_523_p2 = (shl_ln368_1_fu_511_p2 & lshr_ln368_1_fu_517_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op83_read_state4 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op83_read_state4 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (imgInput_data1_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_predicate_op83_read_state4 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((ap_predicate_op83_read_state4 == 1'b1) & (ldata1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln1104_reg_768_pp0_iter4_reg == 1'd1) & (imgInput_data1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_677 = ((icmp_ln1084_reg_772 == 1'd1) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_681 = ((icmp_ln1073_reg_756 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1084_fu_274_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_684 = ((icmp_ln1073_reg_756 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1084_fu_274_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_159 = 'bx;

always @ (*) begin
    ap_predicate_op83_read_state4 = ((icmp_ln1084_reg_772 == 1'd1) & (icmp_ln1073_reg_756_pp0_iter2_reg == 1'd1));
end

assign bLast_width_fu_209_p2 = ((j_fu_96 == sub) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_198_p2 = (($signed(zext_ln1073_fu_194_p1) < $signed(bound)) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_274_p2 = (($signed(zext_ln1079_fu_256_p1) > $signed(rem_fu_88)) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_327_p2 = ((rem_fu_88 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1104_fu_214_p2 = (($signed(j_fu_96) < $signed(cols_bound_per_npc_load)) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_365_p2 = ((rem_fu_88 > sext_ln1090_fu_347_p1) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_302_p2 = ((sub_ln1093_1_fu_296_p2 > sub_ln1093_fu_290_p2) ? 1'b1 : 1'b0);

assign imgInput_data1_din = (select_ln1078_fu_678_p3 & ap_phi_reg_pp0_iter5_localbuffer_V_8_reg_159);

assign j_5_fu_225_p3 = ((bLast_width_fu_209_p2[0:0] == 1'b1) ? 32'd0 : add_ln1105_fu_219_p2);

assign localbuffer_V_6_fu_570_p1 = p_Result_4_fu_565_p2[23:0];

assign localbuffer_V_fu_616_p3 = ((icmp_ln1085_reg_797_pp0_iter3_reg[0:0] == 1'b1) ? 24'd0 : p_Result_1_fu_610_p2);

assign lshr_ln368_1_fu_517_p2 = 24'd16777215 >> zext_ln368_3_fu_501_p1;

assign lshr_ln368_fu_604_p2 = 24'd16777215 >> zext_ln368_fu_601_p1;

assign lshr_ln628_1_fu_585_p2 = 32'd4294967295 >> zext_ln628_1_fu_577_p1;

assign lshr_ln628_2_fu_450_p2 = 32'd4294967295 >> zext_ln628_2_fu_446_p1;

assign lshr_ln628_3_fu_425_p2 = select_ln628_1_fu_408_p3 >> zext_ln628_3_fu_421_p1;

assign lshr_ln628_4_fu_559_p2 = 32'd4294967295 >> zext_ln628_4_fu_555_p1;

assign lshr_ln628_5_fu_672_p2 = 24'd16777215 >> zext_ln628_5_fu_669_p1;

assign lshr_ln628_fu_580_p2 = p_Val2_load_reg_839 >> zext_ln628_fu_574_p1;

assign p_Result_1_fu_610_p2 = (tmp_2_fu_597_p1 & lshr_ln368_fu_604_p2);

assign p_Result_2_fu_456_p2 = (lshr_ln628_2_fu_450_p2 & ldata1_dout);

assign p_Result_3_fu_654_p2 = (and_ln368_2_fu_649_p2 | and_ln368_1_fu_643_p2);

assign p_Result_4_fu_565_p2 = (lshr_ln628_4_fu_559_p2 & lshr_ln628_3_reg_844);

assign p_Result_s_fu_591_p2 = (lshr_ln628_fu_580_p2 & lshr_ln628_1_fu_585_p2);

assign ptr_width_minus_fu_264_p3 = ((bLast_width_reg_760[0:0] == 1'b1) ? sub5 : 6'd8);

assign rem_2_fu_379_p2 = (rem_fu_88 + zext_ln1080_fu_270_p1);

assign rem_3_fu_316_p2 = (rem_fu_88 - zext_ln1079_fu_256_p1);

assign select_ln1078_fu_678_p3 = ((bLast_width_reg_760_pp0_iter4_reg[0:0] == 1'b1) ? lshr_ln628_5_fu_672_p2 : 24'd16777215);

assign select_ln1093_fu_280_p3 = ((bLast_width_reg_760[0:0] == 1'b1) ? add_ln1093 : 6'd55);

assign select_ln368_1_fu_476_p3 = ((icmp_ln368_reg_817[0:0] == 1'b1) ? trunc_ln368_1_reg_833 : trunc_ln368_reg_825);

assign select_ln368_2_fu_481_p3 = ((icmp_ln368_reg_817[0:0] == 1'b1) ? sub_ln368_1_fu_466_p2 : trunc_ln368_reg_825);

assign select_ln368_3_fu_632_p3 = ((icmp_ln368_reg_817_pp0_iter3_reg[0:0] == 1'b1) ? tmp_fu_623_p4 : shl_ln368_reg_860);

assign select_ln368_fu_471_p3 = ((icmp_ln368_reg_817[0:0] == 1'b1) ? trunc_ln368_reg_825 : trunc_ln368_1_reg_833);

assign select_ln628_1_fu_408_p3 = ((icmp_ln628_reg_776[0:0] == 1'b1) ? tmp_1_fu_393_p4 : p_Val2_s_fu_100);

assign select_ln628_2_fu_415_p3 = ((icmp_ln628_reg_776[0:0] == 1'b1) ? xor_ln628_1_fu_403_p2 : trunc_ln628_reg_783);

assign select_ln628_fu_542_p3 = ((icmp_ln628_reg_776_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln628_2_fu_534_p2 : sub_ln628_3_fu_538_p2);

assign sext_ln1079_fu_252_p1 = $signed(xf_bits_per_clock_fu_246_p3);

assign sext_ln1090_fu_347_p1 = add_ln1090_fu_341_p2;

assign shl_ln368_1_fu_511_p2 = 24'd16777215 << zext_ln368_2_fu_497_p1;

assign shl_ln368_fu_505_p2 = tmp_3_fu_462_p1 << zext_ln368_1_fu_493_p1;

assign sub_ln1093_1_fu_296_p2 = (32'd32 - rem_fu_88);

assign sub_ln1093_fu_290_p2 = (zext_ln1093_fu_286_p1 - rem_fu_88);

assign sub_ln368_1_fu_466_p2 = ($signed(5'd23) - $signed(trunc_ln368_reg_825));

assign sub_ln368_2_fu_487_p2 = ($signed(5'd23) - $signed(select_ln368_fu_471_p3));

assign sub_ln368_fu_436_p2 = ($signed(5'd24) - $signed(trunc_ln1086_1_reg_807));

assign sub_ln628_1_fu_359_p2 = (trunc_ln1090_fu_351_p1 - trunc_ln1090_1_fu_355_p1);

assign sub_ln628_2_fu_534_p2 = (trunc_ln628_reg_783_pp0_iter3_reg - trunc_ln628_1_reg_791_pp0_iter3_reg);

assign sub_ln628_3_fu_538_p2 = (trunc_ln628_1_reg_791_pp0_iter3_reg - trunc_ln628_reg_783_pp0_iter3_reg);

assign sub_ln628_4_fu_663_p2 = ($signed(5'd23) - $signed(trunc_ln628_2_fu_660_p1));

assign sub_ln628_fu_431_p2 = (5'd0 - trunc_ln1086_reg_802);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_100) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_393_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_393_p4[ap_tvar_int_0] = p_Val2_s_fu_100[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_597_p1 = p_Result_s_fu_591_p2[23:0];

assign tmp_3_fu_462_p1 = p_Result_2_fu_456_p2[23:0];

integer ap_tvar_int_1;

always @ (shl_ln368_reg_860) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            tmp_fu_623_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_fu_623_p4[ap_tvar_int_1] = shl_ln368_reg_860[23 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln1086_1_fu_337_p1 = rem_fu_88[4:0];

assign trunc_ln1086_fu_333_p1 = rem_fu_88[4:0];

assign trunc_ln1090_1_fu_355_p1 = rem_fu_88[4:0];

assign trunc_ln1090_fu_351_p1 = add_ln1090_fu_341_p2[4:0];

assign trunc_ln368_1_fu_375_p1 = add_ln1090_fu_341_p2[4:0];

assign trunc_ln368_fu_371_p1 = rem_fu_88[4:0];

assign trunc_ln628_1_fu_312_p1 = sub_ln1093_fu_290_p2[4:0];

assign trunc_ln628_2_fu_660_p1 = sext_ln1093[4:0];

assign trunc_ln628_fu_308_p1 = sub_ln1093_1_fu_296_p2[4:0];

assign xf_bits_per_clock_fu_246_p3 = ((bLast_width_reg_760[0:0] == 1'b1) ? last_blk_width_load : 4'd8);

assign xor_ln368_fu_638_p2 = (24'd16777215 ^ and_ln368_reg_866);

assign xor_ln628_1_fu_403_p2 = (trunc_ln628_reg_783 ^ 5'd31);

assign xor_ln628_2_fu_549_p2 = (select_ln628_fu_542_p3 ^ 5'd31);

assign xor_ln628_fu_441_p2 = (sub_ln628_1_reg_812 ^ 5'd31);

assign zext_ln1073_fu_194_p1 = i_fu_92;

assign zext_ln1079_1_fu_260_p1 = $unsigned(sext_ln1079_fu_252_p1);

assign zext_ln1079_fu_256_p1 = $unsigned(sext_ln1079_fu_252_p1);

assign zext_ln1080_fu_270_p1 = ptr_width_minus_fu_264_p3;

assign zext_ln1093_fu_286_p1 = select_ln1093_fu_280_p3;

assign zext_ln368_1_fu_493_p1 = select_ln368_2_fu_481_p3;

assign zext_ln368_2_fu_497_p1 = select_ln368_1_fu_476_p3;

assign zext_ln368_3_fu_501_p1 = sub_ln368_2_fu_487_p2;

assign zext_ln368_fu_601_p1 = sub_ln368_reg_855;

assign zext_ln628_1_fu_577_p1 = sub_ln628_reg_849;

assign zext_ln628_2_fu_446_p1 = xor_ln628_fu_441_p2;

assign zext_ln628_3_fu_421_p1 = select_ln628_2_fu_415_p3;

assign zext_ln628_4_fu_555_p1 = xor_ln628_2_fu_549_p2;

assign zext_ln628_5_fu_669_p1 = sub_ln628_4_reg_882;

assign zext_ln628_fu_574_p1 = sub_ln628_reg_849;

endmodule //color_detect_AxiStream2MatStream_Pipeline_MMIterInLoopRow
