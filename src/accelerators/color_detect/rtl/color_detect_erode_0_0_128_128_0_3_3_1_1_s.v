// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.1 (64-bit)
// Version: 2022.2.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module color_detect_erode_0_0_128_128_0_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        imgHelper1_data3_dout,
        imgHelper1_data3_num_data_valid,
        imgHelper1_data3_fifo_cap,
        imgHelper1_data3_empty_n,
        imgHelper1_data3_read,
        imgHelper2_data4_din,
        imgHelper2_data4_num_data_valid,
        imgHelper2_data4_fifo_cap,
        imgHelper2_data4_full_n,
        imgHelper2_data4_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] imgHelper1_data3_dout;
input  [1:0] imgHelper1_data3_num_data_valid;
input  [1:0] imgHelper1_data3_fifo_cap;
input   imgHelper1_data3_empty_n;
output   imgHelper1_data3_read;
output  [7:0] imgHelper2_data4_din;
input  [1:0] imgHelper2_data4_num_data_valid;
input  [1:0] imgHelper2_data4_fifo_cap;
input   imgHelper2_data4_full_n;
output   imgHelper2_data4_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgHelper1_data3_read;
reg imgHelper2_data4_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] imgheight_fu_44_p1;
reg   [15:0] imgheight_reg_54;
wire   [15:0] imgwidth_fu_49_p1;
reg   [15:0] imgwidth_reg_59;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_idle;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_ready;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgHelper4_data6_read;
wire   [7:0] grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_din;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_write;
reg    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg;
reg    ap_block_state1_ignore_call6;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg = 1'b0;
end

color_detect_xferode_128_128_1_0_1_0_129_3_3_s grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start),
    .ap_done(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done),
    .ap_idle(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_idle),
    .ap_ready(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_ready),
    .imgHelper4_data6_dout(imgHelper1_data3_dout),
    .imgHelper4_data6_num_data_valid(2'd0),
    .imgHelper4_data6_fifo_cap(2'd0),
    .imgHelper4_data6_empty_n(imgHelper1_data3_empty_n),
    .imgHelper4_data6_read(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgHelper4_data6_read),
    .imgOutput_data7_din(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_din),
    .imgOutput_data7_num_data_valid(2'd0),
    .imgOutput_data7_fifo_cap(2'd0),
    .imgOutput_data7_full_n(imgHelper2_data4_full_n),
    .imgOutput_data7_write(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_write),
    .img_height(imgheight_reg_54),
    .img_width(imgwidth_reg_59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_ready == 1'b1)) begin
            grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        imgheight_reg_54 <= imgheight_fu_44_p1;
        imgwidth_reg_59 <= imgwidth_fu_49_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgHelper1_data3_read = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgHelper4_data6_read;
    end else begin
        imgHelper1_data3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgHelper2_data4_write = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_write;
    end else begin
        imgHelper2_data4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_ap_start_reg;

assign imgHelper2_data4_din = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_34_imgOutput_data7_din;

assign imgheight_fu_44_p1 = p_read[15:0];

assign imgwidth_fu_49_p1 = p_read1[15:0];

endmodule //color_detect_erode_0_0_128_128_0_3_3_1_1_s
